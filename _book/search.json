[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to Probability",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee (knuth84?) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "index.html#what-are-these-lecture-notes-about",
    "href": "index.html#what-are-these-lecture-notes-about",
    "title": "An Introduction to Probability",
    "section": "What are these lecture notes about",
    "text": "What are these lecture notes about\nThese lecture notes support the course An Introduction to Probability - with Applications to Computational Finance using R. The course introduces essential probability concepts that every finance practitioner must understand. As probability is crucial for solving financial problems computationally, we will use computational finance as the context to develop these ideas. The focus will be hands-on learning, enabling you to understand and internalize concepts by applying them yourself.\nTo make abstract concepts like randomness, chance, and probability more accessible, we will leverage computational tools, in our course this will be R, and visualizations built by using R. By actively engaging with these tools, you’ll not only deepen your understanding of probability but also enhance your ability to apply it to real-world finance problems.\n\n\n\n\n\n\nKey learning objectives\n\n\n\n\nUnderstand foundational probability concepts.\nApply probability principles to solve computational finance problems.\nGain hands-on experience using R for probability and finance applications.\nDevelop proficiency in interpreting and visualizing probabilistic data.\n\n\n\nBut how can we build abstract concepts such as probability, random phenomena and chance by our own hands? While probability is a mathematical theory, it gains practical value and an intuitive meaning in connection with real or conceptual experiments such as, the future change in a stock price index, the future value of a portfolio of securities, the chance that a creditor is not going to be able to pay back your loan.\nMany of these experiments we can nowadays simulate on the computer. We can can construct, build and simulate a huge variety of random phenomena. We can - for instance - implement models of random fluctuations of asset prices. We can model financial risks and contemplate possible future scenarios through simulation.\nThe arrival of the computer has been indeed a sea change for the mathematics of probability because it allows both reflecting about probability through theorems and proofs as well as by making use of computer simulation. We can approach our understanding of abstract concepts by building them with our own hands on the computer. This is the approach to teaching you probability in this course.\nLet me give you one example right away. Don’t worry if you do not understand precisely what the following snippet of code is doing. We will learn the syntax of the R language as we go along. This is just to demonstrate you what I explained in words before by a simple example highlighting simulation of random processes and visualization.\n\n\n\n\n\n\nAn R example for illustration\n\n\n\n\n# Simulate daily returns for a stock\n\nset.seed(123)  # Ensure reproducibility\nn &lt;- 100       # Number of days\ndaily_returns &lt;- rnorm(n, mean = 0.001, sd = 0.02)  # Normal distribution\n\n# Compute cumulative returns\nprice &lt;- cumprod(1 + daily_returns) * 100  # Starting price = 100\n\n# Visualize the stock price\nplot(price, type = \"l\", col = \"blue\", lwd = 2,\n     main = \"Simulated Stock Price\",\n     xlab = \"Days\", ylab = \"Price\")\n\n\n\n\n\n\n\n\n\n\nThis example highlights:\n\nHow randomness influences stock price movements\nR’s usefulness in simulations and visualization.\n\nIt is, however important to always keep in mind that the real world is different from the theory world as well as from the simulated world. The real world is both richer and more complex than both theory and simulation. It may contain features which need to be be taken into account for the explanation of phenomena which are absent in theory or in the simulation. We will try our best to develop your feeling for the difference, between theoretical concepts, simulations and applications as well as for the interdependence of these three areas.\nThere are many ways to build virtual objects and to run simulations to manipulate them. For this we will need a programming language. The language we choose for this course is R and the integrated development environment RStudio. This is one of the main languages used in data analysis, statistics and data science and is widely used in industry and academia. It will be our tool to do probability in this course.\nSince this course was being taught the first time new AI tools such as large language models (LLMs) like chatGPT, Claude or Gemini have been introduced. These new powerful tools create new opportunities for learning and reinforcing knowledge such as the concepts learned in this course. In this year I will show you throughout the course, how you can leverage AI tools like ChatGPT for enhancing your learning experience. I encourage you to use these tools to generate examples, explain concepts, and debug R code or perhaps translate R code into a language you might be more familiar with on the fly to help you understand how things are expressed in R.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#downloading-and-installing-r",
    "href": "index.html#downloading-and-installing-r",
    "title": "An Introduction to Probability",
    "section": "Downloading and installing R",
    "text": "Downloading and installing R\nSo lets start by downloading and installing R first. R is an open source project maintained by an international team of developers. The software is made available through a website called the comprehensive R archive network (http://cran.r-project.org).\nAt the top of this website, in a box named “Download and install R” you will find three links for downloading R. Choose the link that describes your operating system, Windows, Mac or Linux. These links will lead you to the necessary information you need to install a current version of R. The easiest install option is to install R from precompiled binaries. There is also the option to built R from source on all operating systems if you have the tools and the expertise to do so. R also comes both in a 32-bit and a 64-bit version. It does not make a substantial difference which version you use. 64-bit versions can handle larger files and data sets with fewer memory management problems.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#downloading-and-installing-rstudio",
    "href": "index.html#downloading-and-installing-rstudio",
    "title": "An Introduction to Probability",
    "section": "Downloading and installing RStudio",
    "text": "Downloading and installing RStudio\nRStudio is an application that helps you write and develop R code. It makes using R much easier for you than using it in isolation. The interface of RStudio looks the same across all operating systems.\nYou can download RStudio for free from https://www.rstudio.com/products/rstudio/. Select the box RStudio Desktop and follow the download instructions. RStudio Desktop is free. Note that you need to have a version of R installed to use RStudio.\nIf you have successfully installed R and RStudio, we are ready to start.\nThroughout this course I will use R with RStudio and when I do code demonstrations I will use this environment. R can be used in many other ways of course. Some of you might be accustomed to work with Jupyter Notebooks. I will just mention here that with some minor tweaks R can be used with Jupyter notebooks as well. I will not go into the details here. Those of you who are interested in such a setup are encouraged to ask chatGPT:\n\n“Please give me a step by step instruction how to set up the system to use R through Jupyter notebooks instead of RStudio.”",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "An Introduction to Probability",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis course is built as an intuitive and elementary introduction to the field. No knowledge of probability or R is assumed and all concepts are built from scratch. You should be able to study for this course by relying on the slides and these lecture notes only without having to consult a textbook or further literature.\nMany of you will have heard or studied probability at some stage in college or at university. I hope the course will appeal to the newcomers as well as to the experienced. While it should allow the first group to quickly learn some of the most important concepts and raise your curiosity and excitement about a field of knowledge which is both beautiful and immensely practical, I hope it will open a new perspective for the more experienced among you and thus help deepening your understanding of concepts you might already have heard elsewhere.\nThe lectures develop probability concepts and R concepts in parallel. This follows the idea underlying this course to develop your knowledge of probability concepts by building them on the computer yourself and play with them. In this way we hope to build your R skills more thoroughly because they appear in a natural context and that this context also reinforces your understanding of probability.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#structure-of-the-notes",
    "href": "index.html#structure-of-the-notes",
    "title": "An Introduction to Probability",
    "section": "Structure of the Notes",
    "text": "Structure of the Notes\nThe notes are structured into five main chapters. The idea is to cover each main chapter topic in one of the five double units allocated to this course.\nEach of the main chapters or lectures are followed by a so called project. The projects are meant to be worked on by you in the assigned groups between the lectures and should help you to practice and to deepen what you have learned. We will discuss the project questions at the end of each lecture. We will also distribute a worked problem after you have worked on it yourself.\nWe begin the first lecture, lecture 1 by discussing some of the main basic probability fundamentals by putting them in their historical context where the first ideas appear of how you could measure something such elusive as chance at all. Surprisingly these first simple ideas are already very rich and lead us quite far into the field and its problems.\nIn this lecture we will also give a first panoramic run down of what you can do with R. In this lecture the first application will be a simple game of chance, the tossing of a coin. Already this very elementary example has direct relevance for computational financial modelling of security prices as we will learn throughout the course.\nEven the very basic ideas of probability and R enable us, already at this early stage, to take on a serious real world problem as well. In fact, with only a few intuitive concepts we can study and understand problems of the chance of coincidences. This class of problems is at the heart of the science of constructing cryptographically safe finger prints, so called hash-functions, which are at the heart of crypto-currencies such as Bitcoin.\nThe first project will deal with engineering secure transaction indentifiers for a digital payment system and study how the construction of such identifiers has to take into account key system paramaters such as transaction volume and number of participants in the payment system.\nLecture 2 will introduce the first basic intuitive ideas a bit more formally and also generalize them. In particular it explains the basic ideas of how probability and frequencies of chance events are related. We will discuss the power as well as the limits of these ideas for applied work in probability.\nIn this lecture we will explain in detail how you can use R to read, store and manipulate data. We also start working with stock market data and randomly fluctuating asset prices and discuss how we can deepen our understanding of them using probability and R.\nProject 2 will help you to train and practice your understanding of data manipulation in R by analyzing a real world supervisory data set from the European Banking Authority EBA. We will use a really cool empirical probability pattern on the empirical frequency of leading digits - Benford’s law - for checking whether the data could be trusted or do look fishy on purely probabilistic grounds.\nIn Lecture 3 we will learn about the key concept of conditional probability. This lecture contains lots of concepts but it is also of key importance for understanding many problems in Finance and the management of financial risks. We will explain how the misunderstanding or perhaps willful ignorance of the concept of dependence is at the root of the big financial crisis of 2007-2008. We will also learn, how updating your probability assessments in the light of new data is important for investment decisions.\nOn top of this directly practical considerations, we will also learn how this particular problem of updating probability assessments in the light of new information helps us close a conceptual gap in the pure frequency interpretations of probability.\nIn terms of R this lecture gives you a bit of a break in the sense that it applies what we have learned before and thereby reinforces what we have already learned. It will introduce some useful techniques and functions along the way.\nIn project 3 you will deepen your understanding of how probability updating works and how its sound understanding can make a real difference for the success of investment decisions.\nLecture 4 will introduce you more precisely to the key probabilistic model of random returns and other random phenomena in Finance: The concept of a random variable and the concepts of expected value, variance, standard deviation, covariance and correlation. We will discuss at length the modelling of random returns and learn about the basic workhorse model of asset price dynamics, the binomial lattice.\nThis discussion gives us also the appropriate context to discuss how to write programs in R and some of the principles and constructions that are most useful for this task.\nIn the project for lecture 4 you will learn about how you can apply the ideas of random variables and the binomial distribution to deepen your understanding of credit risk.\nThe final Lecture 5 discusses the concept of continuous random variables, which is very important for a large body of applied work. You will be introduced to the normal distribution and its power and limits for modelling random returns and financial risks.\nIn terms of R this lecture will provide a good context for discussing what matters when you want to make your R code fast and efficient.\nThe last project will then allow us to connect all the concepts of the five lectures with the project following lecture 4 to get a somewhat realistic and practically useful model for analyzing and managing credit risk.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "An Introduction to Probability",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nI would like to thank my friend and colleague Branko Urošević that he entrusted me to develop this course for his new and innovative program in computational finance.\nI am very grateful for the opportunity to make a contribution to this effort and for all the encouragement, support and advice I got from him for this project. Of course he bears no responsibility whatsoever for any shortcomings of these lecture notes.\nI would also like to sincerely thank the former students of the bootcamp probability course who gave me feedback and studied from the lecture. They were a fantastic and enthusiastic audience from who I learned a lot.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "An Introduction to Probability",
    "section": "References",
    "text": "References\nWhen you teach such a fundamental field as probability theory and its applications in Finance you teach from a core knowledge that has been built by many pioneers, experts and other teachers in this area. In this sense nothing contained in this course is original work. The only contribution a teacher can make is the way how the material is presented and combined. In this sense these lecture notes are nothing but a collection of well known and time tested material as well as an experiment in yet one more, hopefully innovative exposition.\nBut even in this field I have copied and recycled a lot from the teaching materials and collective wisdom of other colleagues whose examples and problems I found particularly helpful. Without any claim to completeness let me briefly go through the sources I have relied on most strongly when developing this course.\nWith respect to probability theory two sources have influenced me most and I have followed their example extensively in this course: William Fellers “An introduction to probability theory and its applications volume 1.” which first appeared in 1957. (Feller (1968)). While really old by now it is still in my view one of the most outstanding reference with respect to exposition and clarity of explanation as well as an inspiring source of enthusiasm for the subject. I just would like to mention as an aside that Feller (born Vilibald Srećko Feller) was a Croatian emigrant to first Germany and then the US in the 1930ies. You might claim him as a citizen of Croatia, former Yugoslavia or even Austria, since when he was born in 1906, what is now Croatia was still a part of the Austrian-Hungarian empire.\nMy second most important source for this course in terms of probability was Karl Schmedder’s course “An intuitive introduction to probabiliy”, which Karl developed for the online platform Coursera. I consider this course an outstanding didactical achievement and masterpiece. If you find this lectures fun, I can only encourage you to also do the course on Coursera, when you find time. It is for a reason that Karl’s course is the mostly viewed Coursera course from Switzerand.1\n1 See https://www.coursera.org/learn/introductiontoprobabilityIn terms of R and R programming I have followed and copied a lot from Garett Grolemund’s excellent book “Hands on programming with R”.(Grolemund (2014)) I encourage you to study this book. From it I have not only learned about one of the most excellent explanations of R concepts but also the insight that these concepts are best explained within a very concrete and non trivial application context rather than in a patchy series of toy examples.\nWith respect to Finance and investments I have relied on the excellent book by David Luenberger, “Investment Science”. (Luenberger (2009)) If you can get a hold of this fantastic work, I can only encourage you to get one and have it on your shelf. It is a role model of clarity of exposition and has much more to offer than we can cover in this book.\nFinally with respect to the history and the interpretations of probability, I have learned the most form the excellent book “10 great ideas about chance”, by Persi Diaconis and Brian Skyrms. (Diaconis and Skyrms (2019)) If you find probability interesting or even fascinating I encourage you to read this book at some stage, if you find time. It is full of highly interesting philosophical, mathematical, historical and fun facts and ideas about this very rich subject.\nBut now, lets get straight down to the matter at hand.\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nFeller, William. 1968. An Introduction to Probability Theory and Its Applications. 3rd ed. Vol. 1. Wiley.\n\n\nGrolemund, Garrett. 2014. Hands on Programming with R. O’Reilly. https://rstudio-education.github.io/hopr/.\n\n\nLuenberger, David. 2009. Investment Science. Oxford University Press.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#leveraging-chatgpt-free-version",
    "href": "index.html#leveraging-chatgpt-free-version",
    "title": "An Introduction to Probability",
    "section": "Leveraging ChatGPT (Free Version)",
    "text": "Leveraging ChatGPT (Free Version)\n\nUsing an LLM to Enhance Your Learning\nThroughout this course, you’ll learn how to use ChatGPT to support your studies. As a free tool, it offers capabilities that can make learning probability more interactive and engaging. Here’s how you can leverage it:\n\nClarify Concepts:\nAsk ChatGPT to explain concepts in simple terms or elaborate on topics you find difficult:\n\n“Explain the concept of a probability distribution with an example.”\n\nGenerate Examples:\nUse it to create additional examples for practice:\n\n“Can you give me an example of a random variable and how it applies in finance?”\n\nDebug R Code:\nIf you encounter issues with your R code, paste the code and ask:\n\n“Why does this R code not run, and how can I fix it?”\n\nPractice Exercises:\nRequest custom exercises:\n\n“Create three exercises to practice calculating probabilities for dice rolls.”\n\nSimulate Interactive Discussions:\nSimulate discussions with ChatGPT to test your understanding:\n\n“I think the variance of a constant is zero. Am I correct? Explain why or why not.”\n\nLearn Best Practices in R:\nAsk for tips to improve your coding practices:\n\n“What are the best practices for writing clean and efficient R code?”\n\n\nImportant Note:\nWhile ChatGPT is a powerful learning tool, remember to verify the outputs, especially for complex calculations, and always critically evaluate its suggestions.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#signing-up-for-chatgpt-free-version",
    "href": "index.html#signing-up-for-chatgpt-free-version",
    "title": "An Introduction to Probability",
    "section": "Signing up for ChatGPT (Free Version)",
    "text": "Signing up for ChatGPT (Free Version)\nTo access the free version of ChatGPT, follow these steps:\n\nGo to https://chat.openai.com in your web browser.\nClick on the “Creat a free account” button to create an account. You can sign up using an email address or your existing Google or Microsoft account.\nFollow the prompts to verify your email address and complete the registration process.\nOnce registered, log in to access ChatGPT. You can start using it immediately for your learning needs.\n\nUsing ChatGPT is free, but note that certain features or advanced versions (e.g., GPT-40) may require a paid subscription. The free version (GPT-3.5) is sufficient for getting a feeling of what the LLM can do. They payed version is more powerful.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#using-jupyter-notebooks-with-r",
    "href": "index.html#using-jupyter-notebooks-with-r",
    "title": "An Introduction to Probability",
    "section": "Using Jupyter Notebooks with R",
    "text": "Using Jupyter Notebooks with R\nIf you prefer working in Jupyter notebooks instead of RStudio, follow these steps to set up your system:\n\nInstall Jupyter Notebook:\nInstall Jupyter using Python’s pip package manager:\npip install notebook\nInstall R and the IRkernel:\nInstall R on your system, then install the IRkernel within R:\ninstall.packages(\"IRkernel\")\nIRkernel::installspec()\nStart Jupyter Notebook:\nLaunch Jupyter from your terminal:\njupyter notebook\nCreate a New R Notebook:\nIn Jupyter, click “New” and select “R” to start an R notebook.\nInstall R Packages in Jupyter:\nUse the usual R syntax to install packages:\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nJupyter provides a flexible, interactive environment for running R code, making it an excellent alternative to RStudio.\n\nWith these resources and tools, you are ready to dive into the fascinating world of probability and computational finance!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#leveraging-the-possibilities-of-chatgpt",
    "href": "index.html#leveraging-the-possibilities-of-chatgpt",
    "title": "An Introduction to Probability",
    "section": "Leveraging the possibilities of ChatGPT",
    "text": "Leveraging the possibilities of ChatGPT\nIn these lectures I try to help you building experience how to integrate large language models or LLMs into your learning and study process as well as to support you in coding and programming. There are several such models currently on the market. For this course I will use openAI’s chatGPT as a tool. chatGPT is available in a free version and in an enhanced pay-version. For the purposes of this course the free version is sufficient.\n\nUsing an LLM to Enhance Your Learning\nThroughout this course, you’ll learn how to use ChatGPT to support your studies. As a free tool, it offers capabilities that can make learning probability more interactive and engaging. Here’s how you can leverage it:\n\nClarify Concepts:\nAsk ChatGPT to explain concepts in simple terms or elaborate on topics you find difficult:\n\n“Explain the concept of a probability distribution with an example.”\n\nGenerate Examples:\nUse it to create additional examples for practice:\n\n“Can you give me an example of a random variable and how it applies in finance?”\n\nDebug R Code:\nIf you encounter issues with your R code, paste the code and ask:\n\n“Why does this R code not run, and how can I fix it?”\n\nPractice Exercises:\nRequest custom exercises:\n\n“Create three exercises to practice calculating probabilities for dice rolls.”\n\nSimulate Interactive Discussions:\nSimulate discussions with ChatGPT to test your understanding:\n\n“I think the variance of a constant is zero. Am I correct? Explain why or why not.”\n\nLearn Best Practices in R:\nAsk for tips to improve your coding practices:\n\n“What are the best practices for writing clean and efficient R code?”\n\n\nImportant Note:\nWhile ChatGPT is a powerful learning tool, remember to verify the outputs, especially for complex calculations, and always critically evaluate its suggestions. One such tool you might consider for cross checking is Wolfram | Alpha, which you can find here: https://www.wolframalpha.com/ in a free version-",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#using-an-llm-to-enhance-your-learning",
    "href": "index.html#using-an-llm-to-enhance-your-learning",
    "title": "An Introduction to Probability",
    "section": "Using an LLM to Enhance Your Learning",
    "text": "Using an LLM to Enhance Your Learning\nIn these lectures I try to help you building experience how to integrate large language models or LLMs into your learning and study process as well as to support you in coding and programming. There are several such models currently on the market. For this course I will use openAI’s chatGPT as a tool. ChatGPT is available in a free version and in an enhanced pay-version. For the purposes of this course the free version is sufficient.\nThroughout this course, you’ll learn how to use ChatGPT to support your studies. As a free tool, it offers capabilities that can make learning probability more interactive and engaging. Here’s how you can leverage it:\n\nClarify Concepts:\nAsk ChatGPT to explain concepts in simple terms or elaborate on topics you find difficult:\n\n“Explain the concept of a probability distribution with an example.”\n\nGenerate Examples:\nUse it to create additional examples for practice:\n\n“Can you give me an example of a random variable and how it applies in finance?”\n\nDebug R Code:\nIf you encounter issues with your R code, paste the code and ask:\n\n“Why does this R code not run, and how can I fix it?”\n\nPractice Exercises:\nRequest custom exercises:\n\n“Create three exercises to practice calculating probabilities for dice rolls.”\n\nSimulate Interactive Discussions:\nSimulate discussions with ChatGPT to test your understanding:\n\n“I think the variance of a constant is zero. Am I correct? Explain why or why not.”\n\nLearn Best Practices in R:\nAsk for tips to improve your coding practices:\n\n“What are the best practices for writing clean and efficient R code?”\n\n\nImportant Note:\nWhile ChatGPT is a powerful learning tool, remember to verify the outputs, especially for complex calculations, and always critically evaluate its suggestions. One such tool you might consider for cross checking is Wolfram | Alpha, which you can find here: https://www.wolframalpha.com/ in a free version-",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01-lecture1.html",
    "href": "01-lecture1.html",
    "title": "1  First probability ideas and first steps in R",
    "section": "",
    "text": "1.1 Tossing a fair coin: First Probability ideas.\nLets start with a classic and basic example of a probability model: Tossing a fair coin. When probability theorists talk of a fair coin they mean that the coin has equal chances of coming up heads as coming up tails. When the coin is tossed it is uncertain whether it will ultimately come up Heads or Tails.\nFigure 1.1: Figure 1: Tossing a coin\nFigure 1.1 visualizes such a process.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#rolling-a-die",
    "href": "01-lecture1.html#rolling-a-die",
    "title": "1  First probability ideas and first steps in R",
    "section": "",
    "text": "1.1.1 Random experiments, sample space, events\nIn the theory of probability a process leading to an uncertain outcome is called a random experiment. The example of throwing a die helps us to give a precise meaning to the notion of an uncertain outcome. While we can imagine in principle that the die lands on one of its corners and this is one outcome, we agree on the outset that we are going to consider the (practically relevant cases) that it will land on one of the faces.\nThe collection of all possible outcomes of a practical or conceptual random experiment is called in probability theory a sample space. While the sample space of throwing a die is an idealization it is exactly this idealization which simplifies the theory without affecting its applicability. The basic outcomes in the random experiment of throwing a die are that the die lands such that the upward showing face shows a 1 a 2, 3, 4, 5 or a 6. In the theory the collection of basic outcomes is denoted as a set. Thus the sample space of throwing a die is given as the set \\({\\cal S} = \\{1,2,3,4,5,6\\}\\).\nThe sample space \\({\\cal S}\\) is the set of all basic outcomes. The subsets of the sample space are often called events in probability theory. An event could be - for example - an outcome where the die shows an upward looking face with an even number \\(A = \\{2,4,6\\}\\).\n\n\n1.1.2 The role and nature of idealizations in applications\nIdealizations of the kind we discussed for the throw of a die are standard in probability and we will encounter them again and again. For example the movement of a stock price is often though of as a conceptual random experiment. When we try to agree on what is the appropriate sample space of this experiment, we can say that the price can not fall below 0 but it is hard to agree on what will be the highest possible price. In the probabilistic treatment of stock prices, which we will discuss later in our course, it is for instance common to assume that the sample space of this random experiment is the entire interval of non-negative real numbers \\({\\cal S} = [0, \\infty)\\).\nMany of us would hesitate to claim that the price might rise without bound. Yet many models in applied Finance are based on such an assumption. The models allow arbitrary price hikes but with arbitrary small probability as the price gets higher and higher. Practically it does not make sense to believe that a security price can become arbitrarily high. The use of arbitrarily small probabilities in a financial model might seem absurd but it does no practical harm and makes the model simple and convenient to use. Moreover, if we seriously introduced an upper bound on a security price at \\(x\\) it would be also awkward to assume that it is impossible that it could be just a cent higher, an assumption equally unappealing than assuming it can get in principle arbitrarily high.\n\n\n1.1.3 Classical Probability: Measuring uncertainty\nProbability is a measure of how likely an event of an experiment is. But how could we measure chance? Here is the first big idea of probability theory and how the originators thought about it.1 How do you measure anything? If you think of length, for example, you take an arbitrary standard you agree on and then count. The originators of probability theory pursued the same idea with chance: To measure probability you choose equally probable cases and then count.\n1 In this discussion I use chapter 1 in Diaconis and Skyrms (2019)The probability of an event \\(A\\) according to the originators of the theory of probability is then \\[\\begin{equation}\nP(A) = \\frac{\\text{Number of cases where $A$ occurs}}{\\text{Total number of cases}}\n\\end{equation}\\]\nThus, if we want to know the probability of the die ending up on a face such that an even number is shown (2,4,6) we have to compute according to this notion \\(3/6\\) (since the total number of cases are six basic outcomes) which is a chance of \\(50 \\%\\).\nNote that this classical notion of probability has a few interesting consequences, which we will discuss in more detail later but which already now naturally flow from this basic idea of measuring chance.\n\nProbability is never negative.\nIf an event \\(A\\) occurs in all cases \\(P(A)=1\\).\nIf \\(A\\) and \\(B\\) never occur in the same case, then \\(P(A \\,\\text{or}\\, B) = P(A) + P(B)\\).\n\nIn particular then the probability that an event does not occur is 1 less the probability that it occurs: \\(P(\\text{not}\\, A) = 1 - P(A)\\).\nLet us interrupt here our discussion of probability for a moment and ask how we can make good on our promise to make these ideas tangible, so we can play with them.\nFor this we will need the computer. Since we will talk to the computer in R, it is now the right time to look at the die rolling example from the perspective of R and dive into some of its basic concepts.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#rolling-die-on-computer",
    "href": "01-lecture1.html#rolling-die-on-computer",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.2 Rolling a die on the computer: First steps in R",
    "text": "1.2 Rolling a die on the computer: First steps in R\n\n1.2.1 The R User Interface\nBefore we can ask our tool to do anything for us, we need to know how to talk to it. In our case RStudio allows us to talk to our computer. It works like any other application. When you launch RStudio on your computer, in figure @ref(fig:rstudio-start-screen) you see a screen looking like this:\n\n\n\n\n\nThe RStudio startup screen\n\n\n\n\nIn this picture you see a screenshot of my RStudio screen. Interacting with the app is easy. You type commands via your keyboard at the prompt, which is the &gt; symbol. You find this symbol in the RStudio pane called Console. You can see it in the left pane in the screenshot. You send the command to the computer by pressing enter. After you have pressed enter, RStudio sends the command to R and displays the result of your command with a new prompt to enter new commands, like this:\n\n1+1\n\n[1] 2\n\n\nLet me pause to explain what you see here in this code example. First you see a light-gray box containing the command 1+1. This is an instance of a so called code chunk. Moving the cursor to the right upper corner of the chunk, will display a copy icon and you can click this icon to copy the code to the computer’s clipboard and then paste it at the prompt of your console (or for that matter anywhere else) and run it in R studio, if you wish. In the code-chunk the R-prompt &gt; is not displayed. This symbol of the prompt is only shown in the Console itself.\nWhen the code is executed, you see the result in the second light-gray box, just below the first one. It starts with a double hash ##, indicating that it shows an output of running the above code chunk and then displays the output as it would appear in the command window [1] 2.\nThe [1] means that the line begins with the first value of your result. For example, if you enter the command 20:60 at the prompt of your console which means in the R language, “list all the integers from 20 to 60” and press enter you get:\n\n20:60\n\n [1] 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\n[26] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\n\nmeaning that 20 is the first value displayed in your result. Then there is a line break because not all values can be displayed on the same line and R tells you that 45 is the 26-th value of the result.\nThe colon operator : is a very useful function in R which we will need often. It allows us to create sequences of every integer between two given integers.\nR needs a complete command to be able to execute it, when the return key is pressed. Lets see what happens, if a command is incomplete, like for instance &gt; 5*.\nIn this case R will show the expression followed by a + instead of showing a new prompt. This means that the expression is incomplete. It expects more input. If we complete the expression, say like\n&gt; 5*\n+ 4\nthe expression can be evaluated and a new prompt is shown in the console.\nIf you type a command that R does not understand, you will be returned an error message. Don’t worry if you see an error message. It just is a way the computer tells you that he does not understand what you want him to do.\nFor instance, if you type 5%3 you will get an error message like this\n&gt; 5%3\nError: unexpected input in \"5%3\"\n&gt;\nSometimes it is obvious why a mistake occurred. In this case, that R just does not know what to do with the symbol %. It has no meaning in this context. Sometimes it is not so obvious what the error message actually means and what you might do about it.\nA useful strategy in this case is to type the error message into a search engine and see what you can find. The chance is very high that others encountered the same problem before you and got helpful advice how to fix it from other users on the internet. One site, we find particularly helpful for all kinds of questions related to R and R programming is https://stackoverflow.com/. Try it at the next opportunity.\nNow with this basic knowledge, we can already make the first step to create a die on the computer using R. If you think of a physical die, the essential thing that matters are the points on its six sides. If you throw the die it will usually land on one of these sides and the upward showing side of the die shows the number of points. The colon operator : gives us a way to create a group of numbers from 1 to 6. R gives us the result as a one dimensional set of numbers.\n\n1:6\n\n[1] 1 2 3 4 5 6\n\n\nLets use these first steps in R to recap the probability concepts we have learned using this example of the six sided die: A basic outcome of rolling a six-sided die is for example 6 if the upper side after rolling the die happens to be the side with 6 points. The sample space of the experiment of rolling a six-sided die is the set \\({\\cal S} = \\{1,2,3,4,5,6\\}\\). In probability theory we often use the symbol \\({\\cal S}\\) or \\(S\\) for sample space. In many probability texts the sample space is also often denoted by the symbol \\(\\Omega\\) the Greek letter for (big) Omega. A random experiment in this example is the rolling of the die. The outcome is uncertain but once the die is rolled the outcome can be determined precisely. The event that the outcome is a display of 10 points is the empty set \\(A = \\emptyset\\). The symbol \\(\\emptyset\\) comes from set theory and means the set containing no elements. This event can contain no elements because we can not get a score of 10 by rolling a six sided die.\n\n\n1.2.2 Objects\nYou can save data in R by storing them in objects. An object is a name, you can choose yourself to store data. For example, if you choose to store the value 6 in an object called point_six, you would type:\n\npoint_six &lt;- 6\n\nat the prompt. R will the store the value 6 in the object called point_six, which you can use to refer to the value. If you type the name of your object at the prompt, R will display the value you have assigned. A useful key combination for typing the assignment operator &lt;- is to use the key combination ALT _. At the R prompt R will automatically print an assignment operator.\nNow if you type the name of the object and press enter, R will display the value or values stored in it, like this:\n\npoint_six\n\n[1] 6\n\n\nNow you can use the name of the object to refer to its value. For instance, you could divide point_sixby 2and get a meaningful result\n\npoint_six/2\n\n[1] 3\n\n\nNow to make our die more tangible and useful, let us store it in an R object by typing the following command at the prompt. This command creates an object with name die and assigns the vector 1,2,3,4,5, 6 to it.\n\ndie &lt;- 1:6\n\n\n\n\n\n\nThe RStudio Environment pane keeps track of the objects you have created\n\n\n\n\nYou can now see in the right upper Environment pane in figure @ref(fig:rstudio-screen-with-command) that R shows you that there is an object with the name die that it consists of integers 1,2,3,4,5. As you create more objects they will be stored in the Environment pane and are ready for your reference, unless you delete them. You can remove or delete an object by typing rm(object) or by assigning the value die &lt;- NULL which would also remove the object from your environment or workspace.\nYou can name your objects almost anything with a few exceptions. An object name must not start with a number. There are some special symbols which can also not be used in object names, like ^, !, $, @, +, -, /, *. Note that R is case sensitive and distinguishes small and big letters. If you assign a new value for an object you have already created, R will overwrite the object without warning.\nYou can see which objects are currently created and available for you in the Environment pane of your session of by typing ls(). The UNIX users among you will recognize this command from the unix shell, where it displays the files in a directory.\nBefore we learn how we can actually roll our die and perform a random experiment with it, let us briefly use the opportunity to explain a few things about how R does computations. We have already explained that we can use the object name to refer to the value. So for instance if we type\n\ndie*die\n\n[1]  1  4  9 16 25 36\n\n\nThis might irritate some of you because we have called the object a vector. In linear algebra multiplication of vectors is only allowed if there is an inner product. What happens here, if we use * the multiplication operator is that R does an element-wise multiplication of the six numbers of our die. Of course R allows to take an inner product as well, but this needs a different operator. To compute an inner product, we would type\n\ndie %*% die\n\n     [,1]\n[1,]   91\n\n\nNow R displays the result as a vectors with one row and one column, which is denoted in the output by [ , 1] for the column and [1, ] for the row. We will learn later more about the use and the meaning of this notation in R.\nThe element wise execution R usually uses also means that when you, for example type\n\ndie - 1\n\n[1] 0 1 2 3 4 5\n\n\nR would subtract 1 from every component in the vector die.\nAnother specific behavior of R, you need to know about is called recycling. If you give R two vectors of different length in an operation, R will repeat the shorter vector as long as it is of equal length with the longer one. For example, if you have: ::: {.cell}\ndie + 1:2\n\n[1] 2 4 4 6 6 8\n\n:::\nyou see that R adds 1 to 1 and 2 to 2 and then starts over again by adding 1 to 3 and 2 to 4 and then starts over once again by adding 1 to 5 and 2 to 6. If the longer vectors is not a multiple of the shorter one, R recycles but the cuts off. It will give you a warning though. ::: {.cell}\ndie + 1:4\n\nWarning in die + 1:4: longer object length is not a multiple of shorter object\nlength\n\n\n[1] 2 4 6 8 6 8\n\n:::\nWhile this might seem awkward to some of you, we will see that for data manipulation element-wise execution is often extremely useful. It allows to manipulate groups of values in a systematic yet easy way.\n\n\n1.2.3 Functions\nR contains many functions which we can use to manipulate data and compute things. The syntax for using a function is very simple: You type the function name and put the value of the function argument in parentheses. Here we use for illustrations the function of the square root sqrt(): ::: {.cell}\nsqrt(4)\n\n[1] 2\n\n::: or rounding a number: ::: {.cell}\nround(3.1415)\n\n[1] 3\n\n::: The data you write in the parentheses are called the function arguments. Arguments can be all sorts of things: raw data, R objects, results from other functions.\nIf functions are nested, R evaluates the innermost function first and then goes on to the outer functions. To see examples of all these instances you can take ::: {.cell}\nmean(1:6)\n\n[1] 3.5\n\nmean(die)\n\n[1] 3.5\n\nround(mean(die))\n\n[1] 4\n\n::: for example.\nFor simulating random experiments, R has the very useful function sample(). With this function we can roll our die on the computer and conduct actual random experiments.\nThe function takes as arguments a vector names x and a number named size. sample will return size elements randomly chosen from the vector x. Lets say: ::: {.cell}\nsample(x = 1:4, size = 2)\n\n[1] 2 1\n\n:::\nIn this case sample has chosen 4,1 from the vector x = (1,2,3,4) at random.\nIf we want to roll the die in our computer we can thus pass the die as an argument to sample and use the number 1 for the size argument. Lets do a few rolls with our die ::: {.cell}\nsample(x = die, size = 1)\n\n[1] 3\n\nsample(x = die, size = 1)\n\n[1] 2\n\nsample(x = die, size = 1)\n\n[1] 6\n\nsample(x = die, size = 1)\n\n[1] 5\n\n::: These are the random outcomes of our consecutive rolls. It is as if we had thrown an actual die but in this case we have done the same thing on the computer. Isn’t it cool that this is possible at all? The sample() function will remain our good friend throughout this course.\nR functions can have many arguments, but they need to be separated by a comma.\nEvery argument in every function has a name. We specify which data are assigned to the arguments by setting a mathematical equal sign = between the name and the data. Names help us to avoid passing the wrong data and thereby mixing up things or committing errors. But using names is not necessary. If we just wrote ::: {.cell}\nsample(die,1)\n\n[1] 3\n\n::: R would also know what to do. It is not always clear which names to use for a function. If you are not sure, you can use the function args() to look it up. Here we take the function roundas one example. ::: {.cell}\nargs(round)\n\nfunction (x, digits = 0, ...) \nNULL\n\n::: Note that the digits argument in the round function is already set to 0. Frequently R functions come with optional arguments. These arguments are optional because the come with a default value, which is 0 in case of the round function.\nWe recommend that you write out argument names as a rule. It gives clearer code and avoids errors. If you don’t write argument names, R matches your values to the arguments of the function by order.\n\n\n1.2.4 Writing your own functions\nNow we are ready to write our own function to roll the die in our computer. Each function in R has the same elements: A name, a function body of code and a set of arguments. To write your own function, you have to write up all of these parts and save them in an R object. The syntax is:\nmy_function &lt;- function() {}\n\nThe name here is my_function, next comes the expression function() which needs to be assigned. The names of the function arguments have to be written between the parentheses. Then we have to write the actual code within the braces {}.\nTo do this for the die, lets write a function named roll_die. ::: {.cell}\nroll_die &lt;- function(){die &lt;- 1:6 \n                         sample(die, size = 1)}\n:::\nNow we can roll our die for a few times to show how the function works ::: {.cell}\nroll_die()\n\n[1] 3\n\nroll_die()\n\n[1] 1\n\nroll_die()\n\n[1] 1\n\nroll_die()\n\n[1] 6\n\nroll_die()\n\n[1] 5\n\n::: Note that in our function roll_die() has no arguments, just the function body. This is perfectly legitimate in R. It is important that when we call the function we have to call it with the parenthesis like roll_die(). If we only call the name roll_die, R will display the code in the function body.\nA final remark in the sample function is in place here. If we look at the arguments of sample using the args function we see ::: {.cell}\nargs(sample)\n\nfunction (x, size, replace = FALSE, prob = NULL) \nNULL\n\n::: Lets do not discuss all the details of this output but concentrate for a moment on the replace argument. What does this mean?\nAs we saw previously we can use the sample function to model the rolling of our die. If we set the size argument to 1 we get the roll of one die. If we set the size argument to n, we would simulate the rolling of n dies. But now the replace argument becomes crucial. As we can see in the output of the args function replace has a default value FALSE. This is a logical argument. It tells R, for example, that if we set size = 2, meaning that two dice are rolled, if the first dice shows, say a value of 3, the second die cannot show 3 as well.\nThis is clearly not what we have in mind when we model the rolling of 2 dice. It should be possible that both dies show the same value. To enable this behavior of the sample function, we have to change the default value of the replace argument to TRUE. Then R chooses a random draw from all of the six possible values for all dice rolled.\nCongratulations ! You have written your first R function for conducting a simple random experiment. Let me remind you once again: Think of the parentheses as a trigger that tells R to run the function. If you omit the trigger R just prints the body of the function. When you run a function, all the code in the function body is executed and R returns the result of the last line of code. If the last line of code does not return a value neither will R.\n\n\n1.2.5 Arguments\nImagine we remove the first line of code in our function body and changed the name die in the sample function to “ball”. ::: {.cell}\nroll_die2 &lt;- function(){sample(ball, size = 1)}\n::: If we call the function now, we will get an error. The function call roll_die2() will result in the error message Error in sample(ball, size = 1) : object 'ball' not found (try it!)\nWe could supply ball when we call roll_die2 if we make ball an argument of the function. Lets do this: ::: {.cell}\nroll_die2 &lt;- function(ball){sample(ball, size = 1)}\n::: Now the function will work as long as we supply ball when we call the function. ::: {.cell}\nroll_die2(ball = 1:6)\n\n[1] 3\n\n::: Note that we still get an error, if we forget to supply ball argument. This could be avoided if we give the function a default argument ::: {.cell}\nroll_die2 &lt;- function(ball= 1:6){sample(ball, size = 1)}\n::: Now if we type: ::: {.cell}\nroll_die2()\n\n[1] 1\n\n::: everything works, just as intended.\n\n\n1.2.6 Scripts\nSo far we have worked by interacting with the console. But what if you want to edit your functions? It would be much easier, if you could use a draft of your code and work form there. This can be done by using a script.\nYou create a script by going to File &gt; New File &gt; R script in the menu bar of RStudio. Using scripts is the standard way to write code in R. It not only helps you to keep track of your code, save it and edit it later. It also makes your work reproducible. You can edit and proofread your code and share it with others. To save your script go to File &gt; Save As in the menu bar.\n\n\n\n\n\nThe RStudio Script\n\n\n\n\nRStudio has many useful features to help you work with scripts. You can for instance automatically execute a line in a code by using the run button. You can also execute sections of code or the entire script. The entire script is executed by running the Source button. For all these commands there are key short cuts which you will learn as you work more with RStudio and R.\nFrom now on you should write all your R-code for this course in scripts. Make a new folder for the scripts you write and store your R-code there from now on.\n\n\n1.2.7 Using packages and finding Help\nWe have now a function which we can use to simulate the rolling of a die, roll_die(). If the die is fair it should be the case that if we roll the die often, all numbers should occur about equally often. The die should not be weighted in favor of a particular value.\nOne way to learn whether our die is fair are repetition and visualization. These are tools we will need all the time, when working with data and when doing probability. While R has many useful functions, one of the great powers is that R is constantly extended by a huge community of users by providing packages.\nPackages are add on functions, which will not be available when you install R. They need to be installed and loaded before you can use them. Since packages are such a powerful tool in R we need to introduce what they are and how to use them in the beginning.\n\n\n1.2.8 Packages\nThere are many visualization tools in R that come with the basic installation. Since the point we want to make here is about packages, we will use a visualization function which is part of the add on package ggplot2, a very popular package for making all kinds of graphs. ggplot2 is not part of the base-R distribution. It has to be therefore loaded before we can use it.\nThere are many additional functions provided with this package. Indeed you could run a whole course on just that 2 For the point we want to make here we will use just one of them, called qplot(), a shorthand for for quick plot.\n2 A very good starting point is for instance Healy (2019), in case you are interested. Also a good source is the first chapter in Wickham and Grolemund (2017).Since qplot() is a function in the package ggplot2, we first need to install this package. To install a package you need to be connected to the internet. If you have internet connection go to the command line and run at the command line: install.packages(\"ggplot2\").\nR displays what is happening while executing the command. Don’t worry if you don not know what all of these messages exactly mean and don’t panic that they are displayed in red. All packages can be installed like this. You have just to enter the correct name in the function install.packages(). The lower right pane in the RStudio software alternatively provides a tab called Packages. Using this tab, you can also install R packages interactively by clicking the install button on the upper left corner of the Packages tab.\nAfter installation the package is on our hard-drive but it can not yet be used. To use the package it has to be loaded. This is done with the command library. To load the ggplot2 package we type ::: {.cell}\nlibrary(\"ggplot2\")\n::: and hit the return key. Many things could be said about the R package system and you will learn it in more detail as we go along in our course. For the moment the most important thing to remember is that a package needs to be newly loaded whenever you want to use it in a new R session.\nTo check whether our dies is fair, we need to roll it many times. R provides a function, that does this for us. This function is called replicate() and provides an easy way to repeat a command many times. The number of times we want to repeat something is given as an argument to the replicate function.\nNow lets roll our die 100 times and save the result in an object we call rolls: ::: {.cell}\nrolls &lt;- replicate(100, roll_die())\n::: We now use the qplot()function from the ggplot2 library to make a quick visualization, by typing the command qplot(rolls). I include the resulting picture in the following figure ::: {.cell layout-align=“center”} ::: {.cell-output-display}  ::: ::: If you try this and your picture looks a bit different from mine, don’t worry. This is as things should be. I have stored the picture after one particular run of the replicate function and saved it in my figures folder to these lecture notes. Each time you run the replicate function anew a new random outcome is stored which will look not exactly the same as any other or course. This is what randomness does to the outcome of rolling a die.\nIt looks like every value occurred roughly 16 times but there is still quite some variation. For instance, the value 3 seems to occur more than 20 times whereas the value 2 occurs less than 15 times.\nMaybe we have to give it another trial with more replications. With the computer we can do this with a fingertip. Let us roll our die 10000 times and plot the result.\n&gt; rolls2 &lt;- replicate(10000, roll_die())\n&gt; qplot(rolls2m bindwidth = 1)\nNow the picture looks better.\n\n\n\n\n\nFrequencies of 1, 2, 3, 4, 5, 6 after rolling our virtual die 10000 times\n\n\n\n\nWe will learn in our course why the picture get better as we increase the number of rolls of the die. For the moment, let us just state that at least for this case it seems that there is no significant visual evidence that our virtual die is loaded.\n\n\n1.2.9 Getting Help\nWe have now learned a tiny number of R functions and we have written one function ourselves. We have learned how to make use of functions provided by packages.\nIt would be overwhelming to memorize and learn them all. In R, fortunately, every function comes with a detailed documentation and with its own help page. You need to learn how to use this source right from the beginning.\nTo access the help page of a function you type the function name preceded by a question mark at the prompt, like this ::: {.cell}\n?sample\n:::\nThen, after you have pressed the return key, a help page is opened in the right lower pane under the help tab as shown in @ref(fig:helpinr) ::: {.cell layout-align=“center”} ::: {.cell-output-display}  ::: :::\nThis help page has a particular structure that you will find for every other R function no matter whether it is provided by the base installation or by a package. In the upper left corner you see the name of the function (sample) and in curly brackets next to it the term base, which means that this is a function in the R base installation. Then you see a headline about what the function does.\nFrom the top of the page, you then first see the field Description. This is a short description what the function does. Here it says\nDescription\nsample takes a sample of the specified size from the elements of x using either with or without replacement.\nThe next field is Usage. It gives you the function description with the arguments. Here for example\nUsage\nsample(x, size, replace = FALSE, prob = NULL)\n\nsample.int(n, size = n, replace = FALSE, prob = NULL,\n           useHash = (!replace && is.null(prob) && size &lt;= n/2 && n &gt; 1e7))\n           \nThe first line in Usage should by now be familiar. Don’t worry about the second line. The function can obviously do more than we know so far.\nNext comes a list of arguments the function takes and what type of information R expects you to provide, as well as what R will do with this information. Here it says for example\nArguments\nx   \neither a vector of one or more elements from which to choose, or a positive integer. See ‘Details.’\n\nn   \na positive number, the number of items to choose from. See ‘Details.’\n\nsize    \na non-negative integer giving the number of items to choose.\n\nreplace \nshould sampling be with replacement?\n\nprob    \na vector of probability weights for obtaining the elements of the vector being sampled.\n\n...\n\nWe omit some information here.\nThen comes a field called Details which gives a more in-depth description of the function. The next field is called Value. It describes what the function returns when you run it. Then we have a reference to related R functions under the field See. Finally there is a field called Examples. This field contains example code that is guaranteed to work. It shows a couple of different cases how you can use the function in practice.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#coincidences",
    "href": "01-lecture1.html#coincidences",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.3 Application: Coincidences and the Blockchain",
    "text": "1.3 Application: Coincidences and the Blockchain\n\n1.3.1 The birthday problem\nIn this section, we will apply our foundational knowledge of probability - which is at the moment just the informal and intuitive notion of counting equally probably cases - to a fascinating real-world problem known as the birthday problem:\nThe starting question in the birthday problem is: What is the probability that at least two people in a room share the same birthday, when we neglect things like leap years, and when we assume that birthdays on any day of the year are equiprobable and the birthdays of the people in the room are independent. We have no twins for example.\nPerhaps some of you have already seen this problem before. If not, the result may surprise you. Even if you saw the birthday problem before, perhaps not many of you are aware that the significance of this problem reaches far beyond recreational math puzzles. This is because the birthday story is of course accidential. The mathematical formulation of the problem will reveal through the process of abstraction that this problem is at the heart a problem about the probability of coincidences. As such it has real world connections to cryptography and the blockchain security.4\n4 We follow here the discussion in Diaconis and Skyrms (2019)Through this problem, we will:\n\nExplore how to frame probability questions mathematically.\nUse basic R functions to compute probabilities.\nLearn how to simulate experiments to approximate probabilities. This problem is not only an entertaining mathematical puzzle but also a stepping stone to understanding its applications in cryptography and blockchain security.\n\nFirst, observe that we took our assumptions such that we are in the frame of classical probability like the originators of the field thought about it.\nNow for the sake of familiarizing ourselves with the new concepts, let us try to map the birthday problem into the probability notions we learned so far.\nThe sample space is the set of possible outcomes of the experiment. The sample space for our problem includes all possible combinations of birthdays for the group. For example, if there are 3 people, each with a birthday on any of 365 days, the sample space contains all possible sequences of three birthdays:\n\\((1,1,1),(1,1,2),…,(365,365,365)\\)\nIn general, for \\(n\\) people, there are \\(365^n\\) possible combinations, as each person’s birthday is independent of the others.5\n5 Mathematically you can describe the sample space for the birthday problem as a set with \\(365^n\\) ordered \\(n\\)-tuples or sequences of birthdays: \\({\\cal S} = \\{x | x \\in 365^n \\}\\) This is the sample space of this experiment, written as in set theoretic notation. It means the sample space is the set of all ordered \\(n-tuples\\) from the Cartesian product \\(365^n\\). Remember that in mathematics, a Cartesian product is a mathematical operation that returns a set (or product set or simply product) from multiple sets (in this case the sample space, \\({\\cal S}\\). That is, for sets \\(A\\) and \\(B\\), the Cartesian product \\(A \\times B\\) is the set of all ordered pairs \\((a,b)\\) where \\(a \\in A\\) and \\(b \\in B\\).Now given this sample space we can assign a probability to the event that two people chosen at random will have the same birthday. The denominator will this be \\(365^n\\). The nominator for this probability will be much more straightforward to figure out, if we compute the complement. We discussed before that the probability of the complement of an event is 1 minus the probability of the event: \\(P(\\text{not} A) = 1 - P(A)\\).\nLet \\(A\\) denote the event that no two people share the same brithday. We can then use the complement rule to compute the probability of at least two people sharing a birthday: Compute the probability that no two people share a birthday. Subtract this probability from 1 to get the probability of at least one match.\nHere’s how we compute the probability of no matches:\n\nThe first person can have any birthday \\((365/365)\\).\nThe second person must avoid the first person’s birthday \\((364/365)\\).\nThe third person must avoid the first two birthdays \\((363/365)\\).\n\nNow continue this reasoning for \\(n\\) people.\nThe final probability is:\n\\[\\begin{equation*}\nP(\\text{at least two people share birthday}) =\n1 - \\frac{365 \\times 364 \\times 363 \\cdots \\times 365 - n +1}{365^n}\n\\end{equation*}\\]\nNow there is an additional thing we did not yet introduce and which we will learn about in the next lecture. This refers to our assumption that the individual birthdays are independent. For the moment you need to take the following fact on faith: The probability of independent events is the product of the probability these events.\nNow comes the surprise for those of you who did not already see the birthday problem. Assume the group size of people is 23. Let us compute the birthday coincidence probability. For this computation we make use of the R function prod() which takes a vector of numbers as input and computes their product. For \\(n=23\\) we need the list of numbers from 365 to 343. Now we can use the : operator and take advantage from one of its cool properties. If we formulate the command as 365:343 then the colon operator will give us a descending list of integers starting at 365 and ending at 343. Then the probability can be computed as\n\n1 - prod(365:343)/365^23\n\n[1] 0.5072972\n\n\nWe have used the operator ^ which is needed to compute powers. Now we see from our computation that with 23 people the probability is already larger than 50 %. Quite stunning. You can now verify yourself that with 50 people this probability is already at 97 %.\nLet’s visualize how the probability of at least one shared birthday grows with the size of the group. This time I will use base R’s plotting functionality and not use the ggplot2 package.6\n6 I used ggplot2 before to explain the concept of a package and how to load it to enhance R’s functionality. Base R containts a lot of powerful plotting functions which work independently of gglot2.The plot below shows that the probability exceeds 50% with just 23 people and quickly approaches 100% as the group size increases.\n\n# Define the birthday_collisions function\n\nbirthday_collisions &lt;- function(n) {\n  1 - prod(365:(365 - n + 1)) / 365^n\n}\n\n# Generate data for group sizes\n\ngroup_sizes &lt;- 1:50\ncollision_probs &lt;- sapply(group_sizes, birthday_collisions)\n\n# Plot the probability of at least one shared birthday\n\nplot(group_sizes, collision_probs, type = \"l\", col = \"blue\", lwd = 2,\n     xlab = \"Group Size\", ylab = \"Collision Probability\",\n     main = \"Probability of At Least One Shared Birthday\")\nabline(h = 0.5, col = \"red\", lty = 2)  # Highlight the 50% threshold\n\n\n\n\n\n\n\n\nI will not go in detail into the explanation of the code at this stage. For those of you who crave for an explanation, please look at the marginal note here or use the LLM for a step by step explanation.7\n7 birthday_collisions Function: This function calculates the probability of at least one shared birthday for a group of nn people using the formula derived earlier. group_sizes and collision_probs: group_sizes defines a range of group sizes (1 to 50). sapply applies the birthday_collisions function to each group size, computing the collision probabilities. Visualization: A line plot (type = \"l\") is used to visualize how the collision probability increases with group size. A horizontal red dashed line (abline) highlights the 50% threshold for better visual context.\n\n1.3.2 Determining birthday collisions by simulation\nInstead of deriving the probability analytically, we can simulate the birthday experiment if we use the relative frequency notion of probability which we informally had used in our visualization of coin tosses. Here’s how:\n\nGenerate random birthdays for nn people using sample(1:365, n, replace = TRUE).\nCount how often at least two people share a birthday using the duplicated() functionin combination with the logical function any().\nRepeat the simulation many times (e.g., 10,000) using replicate() to estimate the probability.\n\n\nsim_birthday &lt;- function(n, trials = 10000) {\n  results &lt;- replicate(trials, {\n    birthdays &lt;- sample(1:365, n, replace = TRUE)\n    any(duplicated(birthdays))\n  })\n  mean(results)\n}\n\nLet me give a step-by-step breakdown of this piece of code.\n\nDefining the Function:\n\nThe function sim_birthday has two arguments\n\nn: The number of people in the room (group size).\ntrials: The number of simulation repetitions (default is 10,000). These parameters allow us to customize the simulation for different group sizes and levels of precision.\n\n\nUsing replicate to Run Simulations:\nThe replicate() function repeats an experiment a specified number of times (trials). Each experiment simulates one instance of \\(n\\) people in a room.\nSimulating Birthdays:\nThe sample() function generates \\(n\\) random birthdays (integers between 1 and 365) with replacement, representing the assumption that birthdays are independent and uniformly distributed. This step directly reflects the assumptions made in the analytical solution:\n\nThe sample space consists of 365 possible birthdays.\nSampling is done with replacement because multiple people can share the same birthday.\n\nChecking for Duplicates:\nThe duplicated() function identifies repeated birthdays in the sample. The any() function checks if there is at least one duplicate. If duplicates exist, this corresponds to a “birthday collision.” This step operationalizes the concept of finding the complement (at least one collision) rather than calculating the probability of all unique birthdays.\nCalculating the Probability:\nThe results vector contains TRUE (collision occurred) or FALSE (no collision) for each trial. Taking the mean() of this logical vector calculates the proportion of trials with a collision, which corresponds to the simulated probability. This step ties back to the definition of relative frequency probability introduced earlier: the probability of an event is the ratio of favorable outcomes to the total number of trials.\n\nThis step requires some explanation of how R uses data types. We will learn about this more systematically in the next lecture. Here I give a quick and superficial explanation. R can force logical data types automatically to a numerical type when it applies arithmetic functions to a logical vector, forcing TRUE to 1 and FALSE to 0. Now, when you take the average (mean()) of a vector containing only 1 and 0 values you will get the proportion of 1’s or TRUE values. We will use such tricks often during the course of the lecture. For the moment I ask you to bear with this quick and superficial explanation of why this way of proceeding does what we want.\nLet’s compute the birthday collision probability for 23 (as in our analytical solution) and 50 people:\n\nsim_birthday(23)\n\n[1] 0.5111\n\nsim_birthday(50)\n\n[1] 0.9718\n\n\n\nFor \\(n = 23\\), the output should be close to the analytically derived probability \\(\\approx 0.507\\).\nFor \\(n = 50\\), the output should approximate \\(\\approx 0.970\\).\n\nWhat are the advantages of simulations. Here are three main advantages:\n\nFlexibility: This method works even when the assumptions (e.g., uniformity or independence) are adjusted.\nVerification: We can confirm analytical results with experimental data.\nReal-World Application: Simulation methods are widely used in practice when exact formulas are unavailable or complex.\n\nBy understanding and applying this simulation, you now have a practical tool to explore probability problems beyond purely mathematical derivations.\nThe birthday problem has practical implications beyond recreational math. In cryptography, the same underlying principles are used to analyze the likelihood of hash collisions in blockchain systems and digital signatures. Let’s explore this connection further.\n\n\n1.3.3 Hash-functions and the blockchain\nThe birthday problem provides the foundation for studying coincidences in various contexts. A critical application is in cryptography, where the concept of hash functions relies on similar probabilistic principles to ensure data security.\nA hash function is a mathematical tool that converts an input (e.g., a text, file, or number) of any size into a fixed-length output, often called a “hash value” or “digest.” For example, the widely used hash function SHA-256 maps its input to a 256-bit string. You can think of this hash value as a digital fingerprint: any change to the input, no matter how small, results in a completely different hash.\nHash functions have two critical properties that make them essential in cryptography:\n\nOne-wayness: It is computationally unfeasible to determine the original input from the hash value. A hash function is easy to evaluate or compute but it is practically impossible to learn from the value the initial argument by computing the inverse.\nCollision resistance: It is highly unlikely for two different inputs to produce the same hash value.\n\nIf the range of the hash-function is \\(M\\) and the hash-function maps into a 256 bit string then there are \\(2^{256}\\) basic outcomes. Since the hash-function maps a large string onto a smaller string it is possible that there are two different strings \\(x \\neq y\\) mapping to the same value \\(\\text{hash}(x)=\\text{hash}(y)\\). This would be a problem for message authentication because it would give the same “fingerprint” for two different strings.\nFor a cryptographically secure hash function it is therefore required that the probability of such a collision should be small enough to exclude a collision in all practically relevant circumstances.\nThe collision problem for hash functions is analogous to the birthday problem. Instead of asking how many people are needed in a room for a shared birthday, we ask: how many inputs (e.g., messages or files) need to be hashed before two of them produce the same hash value? This probability depends on the size of the hash space, which is determined by the number of bits8 in the hash function’s output.\n8 A bit, short for binary digit, is defined as the most basic unit of data in telecommunications and computing. Each bit is represented by either a 1 or a 0Let \\(M = 2^{256}\\) the number of possible hash values. The probability of no collisions after \\(n\\) hashes is\n\\[\\begin{equation*}\nP_{nc}(n) = 1 \\times \\left(1 - \\frac{1}{M}\\right)\\times\n\\left(1 - \\frac{2}{M} \\right) \\times \\cdots \\times \\left(1 - \\frac{(n-1)}{M} \\right)\n\\end{equation*}\\]\nFor \\(n\\) large this probability can be approximated by a factorial expansion as \\[\\begin{equation*}\nP_{nc}(n) \\approx \\prod_{k=0}^{n-1} \\left( 1 - \\frac{k}{M} \\right)\n\\end{equation*}\\]\nNow convert the product into a sum using the natural logarithm: \\[\\begin{equation}\n\\ln P_{nc}(n) \\approx \\sum_{k=0}^{n -1} \\ln \\left( 1 - \\frac{k}{M} \\right)\n\\end{equation}\\]\nNow to do the estimation of the threshold we use an approximation, which works with a simple property of the logarithm: \\(\\log(1-x)\\approx -x\\) when \\(x\\) is small. Thus for \\(n\\) much smaller than \\(M\\), or \\(n \\ll M\\), we can write the no-collision probability as \\[\\begin{equation*}\n\\ln P_{nc}(n) \\approx - \\sum_{k=0}^{n-1} \\frac{k}{M}\n\\end{equation*}\\] Simplify the summation by usin the fact that \\(\\sum_{k=0}^{n-1} = \\frac{n(n-1)}{2}\\) we get \\[\\begin{equation*}\n\\ln P_{nc}(n) \\approx -\\frac{n(n-1)}{2\\, M}\n\\end{equation*}\\] By taking exponentials on both sides this gives us \\[\\begin{equation*}\nP_{nc}(n) \\approx \\exp \\left( - \\frac{n(n-1)}{2 \\, M} \\right)\n\\end{equation*}\\]\nThus the probability of a hash-collision as a function of \\(n\\) is then approximately\n\\[\\begin{equation*}\nP_{c}(n) = 1- P_{nc}(n) \\approx \\frac{n^2}{M}\n\\end{equation*}\\]\nLet’s try a visualization to show how \\(P_{c}(n)\\) increases with \\(n\\):\n\nn &lt;- 1:100\nM &lt;- 2^256\n\ncollision_prob &lt;- (n^2) / (2 * M)\n\nplot(n, collision_prob, type = \"l\", log = \"y\", col = \"blue\",\n     xlab = \"Number of Inputs (n)\", ylab = \"Collision Probability (log scale)\",\n     main = \"Hash Collision Probability (SHA-256)\")\nabline(h = 0.5, col = \"red\", lty = 2)  # 50% threshold\n\n\n\n\n\n\n\n\nThese results show that for SHA-256:\n\nTo have a \\(50\\)% chance of a collision, an attacker would need to compute approximately \\(2^{128}\\) hashes.\nAt \\(10000\\) hashes per second, this would take longer than the age of the universe.\n\nThis enormous computational difficulty ensures the security of modern cryptographic systems. Even with the combined computing power of all devices on Earth, finding a collision is practically impossible.\nThe birthday problem demonstrates how fundamental probability concepts can inform critical applications like cryptographic hash functions. By understanding the collision probabilities, we see why hash functions like SHA-256 are effective for ensuring data integrity and security.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#summary",
    "href": "01-lecture1.html#summary",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.4 Summary",
    "text": "1.4 Summary\nIn this lecture we have taken a first step towards some very basic probability notions and some basic steps in R. Isn’t it amazing how much territory we could cover with so few concepts? You have learned about how to think probabilistically about collision probabilities and how to solve for them analytically, by simulation and for large numbers by approximation.\nWe have convinced ourselves using this knowledge only and taking on faith that the probability of independent events is the product of their individual probabilities, that the cryptographic Hash-function SHA-256, while it can produce collisions in theory, practically the number of hashes to make such a collision occur would be so large that we can be confident that hashing bit strings with SHA-256 gives us a unique fingerprint practically with certainty.\nThese are the basic probability concepts we have covered in this lecture:\n\nA random experiment: A process leading to an uncertain outcome.\nSample space: The collection of all possible outcomes of a random experiment.\nBasic outcome: A possible outcome of a random experiment.\nEvent: An event is a subset of basic outcomes. Any event which contains a single outcome is called a simple event.\nClassical probability find or make equally probably cases and the count them. The probability of an event \\(A\\) is the number of cases when \\(A\\) occurs divided by the total number of cases.\nRelative frequency probability defined as the number of times an event \\(A\\) occurs in a repeated number of trials divided by the total number of trials in a random experiment.\n\nThese are the R concepts we have covered in this lecture:\n\nobjects arbitrary names that can store different values and data types.\nfunctions ab R object that can accept other R objects as arguments, operate on them and return a new object.\nscripts files that store sequences of R commands and can be saved, repopened and allow the execution of commands.\nusing packages\nfinding help\nthe functions sample and replicate\n\nThese are the Applications we have covered in the lecture:\n\nConstructing a coin on the computer and toss it an arbitrary number of times\nThe birthday problem and how to solve it analytically as well as through simulation\nExtrapolating the birthday problem to analyze cryptographic collision resistance of hash-functions by using ideas from probability",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#project-1-craps-a-casion-dice-game.",
    "href": "01-lecture1.html#project-1-craps-a-casion-dice-game.",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.5 Project 1: Craps: A casion dice game.",
    "text": "1.5 Project 1: Craps: A casion dice game.\nThe first project is about one of the very few dice games offered at a Casino: Craps.8\n8  This will be the only project in this course where we do not go into a direct financial application. Before we can do so, we need to build still a bit more knowledge of probability and skills in R.In Craps people throw a pair of dice and bet on outcomes of these throws. In this project we practice our new knowledge by implementing the dice throws of craps and the automatic summation of points on the computer. We try to find out the probability of the possible outcomes and check the fairness of the dice.\n\nYour first task in this project will be to write a function which allows you to virtually throw a pair of dice and sum up the points shown after the throw.\nSimulate and plot the result of your simulation using qplot() with the binwidth argument set to 1.\nAre these dice fair? Why?\nAssume the dice were unfair in the following sense: Numbers 1,2,3,4 and 5 have a probability of \\(1/8\\) while the 6 has a probability of \\(3/8\\). Study the help page of the samplefunction and find out how you could give these new probability weights to the function. If you redo your simulation analysis with the loaded dice, how does the picture change?\nWrite a script for this random experiment.\nNow look at the random experiment of throwing two dice with the concepts from probability theory: What is the sample space of this experiment. What are the probabilities of the basic outcomes? What is the probability of getting sum 7, what is the probability of getting sum 2 for the case of the fair dice, for the case of the unfair dice?\nImagine now that you are at the casino which uses fair dice and you can spend 150 Euro for chips. Since you have figured out that 7 is the most likely outcome you would like to buy bets on 7. The casino offers you a bet for 15 cent. When you win you get 1 Euro for the bet, when you loose you get nothing. Every bet costs 15 cents, so you can make 1000 bets in total on 7 from your budget of 150. Is this a good or a bad deal for you? Try to think about this problem in terms of a simulation.\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nHealy, Kirean. 2019. Data Visualization: A Practical Introduction. Princeton University Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://r4ds.had.co.nz/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1_updated.html",
    "href": "01-lecture1_updated.html",
    "title": "1  First probability ideas and first steps in R",
    "section": "",
    "text": "1.1 Rolling a die: First Probability ideas.\nLets start with a classic and old example of a probability model, which occupied the attention of Pascal and Fermat as well as their gambling friend the Chevalier de Méré: Rolling a six sided die.\nWhen you role a die or several dice like shown in the following picture @ref(fig:dice), it is uncertain on which face it will finally end up after the throw.\nRolling dice: An old game of chance\nWhat seems clear though is, that it will turn out that it is either one of the six possible faces of the die.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1_updated.html#rolling-a-die",
    "href": "01-lecture1_updated.html#rolling-a-die",
    "title": "1  First probability ideas and first steps in R",
    "section": "",
    "text": "1.1.1 Random experiments, sample space, events\nIn the theory of probability a process leading to an uncertain outcome is called a random experiment. The example of throwing a die helps us to give a precise meaning to the notion of an uncertain outcome. While we can imagine in principle that the die lands on one of its corners and this is one outcome, we agree on the outset that we are going to consider the (practically relevant cases) that it will land on one of the faces.\nThe collection of all possible outcomes of a practical or conceptual random experiment is called in probability theory a sample space. While the sample space of throwing a die is an idealization it is exactly this idealization which simplifies the theory without affecting its applicability. The basic outcomes in the random experiment of throwing a die are that the die lands such that the upward showing face shows a 1 a 2, 3, 4, 5 or a 6. In the theory the collection of basic outcomes is denoted as a set. Thus the sample space of throwing a die is given as the set \\({\\cal S} = \\{1,2,3,4,5,6\\}\\).\nThe sample space \\({\\cal S}\\) is the set of all basic outcomes. The subsets of the sample space are often called events in probability theory. An event could be - for example - an outcome where the die shows an upward looking face with an even number \\(A = \\{2,4,6\\}\\).\n\n\n1.1.2 The role and nature of idealizations in applications\nIdealizations of the kind we discussed for the throw of a die are standard in probability and we will encounter them again and again. For example the movement of a stock price is often though of as a conceptual random experiment. When we try to agree on what is the appropriate sample space of this experiment, we can say that the price can not fall below 0 but it is hard to agree on what will be the highest possible price. In the probabilistic treatment of stock prices, which we will discuss later in our course, it is for instance common to assume that the sample space of this random experiment is the entire interval of non-negative real numbers \\({\\cal S} = [0, \\infty)\\).\nMany of us would hesitate to claim that the price might rise without bound. Yet many models in applied Finance are based on such an assumption. The models allow arbitrary price hikes but with arbitrary small probability as the price gets higher and higher. Practically it does not make sense to believe that a security price can become arbitrarily high. The use of arbitrarily small probabilities in a financial model might seem absurd but it does no practical harm and makes the model simple and convenient to use. Moreover, if we seriously introduced an upper bound on a security price at \\(x\\) it would be also awkward to assume that it is impossible that it could be just a cent higher, an assumption equally unappealing than assuming it can get in principle arbitrarily high.\n\n\n1.1.3 Classical Probability: Measuring uncertainty\nProbability is a measure of how likely an event of an experiment is. But how could we measure chance? Here is the first big idea of probability theory and how the originators thought about it.1 How do you measure anything? If you think of length, for example, you take an arbitrary standard you agree on and then count. The originators of probability theory pursued the same idea with chance: To measure probability you choose equally probable cases and then count.\n1 In this discussion I use chapter 1 in Diaconis and Skyrms (2019)The probability of an event \\(A\\) according to the originators of the theory of probability is then \\[\\begin{equation}\nP(A) = \\frac{\\text{Number of cases where $A$ occurs}}{\\text{Total number of cases}}\n\\end{equation}\\]\nThus, if we want to know the probability of the die ending up on a face such that an even number is shown (2,4,6) we have to compute according to this notion \\(3/6\\) (since the total number of cases are six basic outcomes) which is a chance of \\(50 \\%\\).\nNote that this classical notion of probability has a few interesting consequences, which we will discuss in more detail later but which already now naturally flow from this basic idea of measuring chance.\n\nProbability is never negative.\nIf an event \\(A\\) occurs in all cases \\(P(A)=1\\).\nIf \\(A\\) and \\(B\\) never occur in the same case, then \\(P(A \\,\\text{or}\\, B) = P(A) + P(B)\\).\n\nIn particular then the probability that an event does not occur is 1 less the probability that it occurs: \\(P(\\text{not}\\, A) = 1 - P(A)\\).\nLet us interrupt here our discussion of probability for a moment and ask how we can make good on our promise to make these ideas tangible, so we can play with them.\nFor this we will need the computer. Since we will talk to the computer in R, it is now the right time to look at the die rolling example from the perspective of R and dive into some of its basic concepts.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1_updated.html#rolling-die-on-computer",
    "href": "01-lecture1_updated.html#rolling-die-on-computer",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.2 Rolling a die on the computer: First steps in R",
    "text": "1.2 Rolling a die on the computer: First steps in R\n\n1.2.1 The R User Interface\nBefore we can ask our tool to do anything for us, we need to know how to talk to it. In our case RStudio allows us to talk to our computer. It works like any other application. When you launch RStudio on your computer, in figure @ref(fig:rstudio-start-screen) you see a screen looking like this:\n\n\n\n\n\nThe RStudio startup screen\n\n\n\n\nIn this picture you see a screenshot of my RStudio screen. Interacting with the app is easy. You type commands via your keyboard at the prompt, which is the &gt; symbol. You find this symbol in the RStudio pane called Console. You can see it in the left pane in the screenshot. You send the command to the computer by pressing enter. After you have pressed enter, RStudio sends the command to R and displays the result of your command with a new prompt to enter new commands, like this:\n\n1+1\n\n[1] 2\n\n\nLet me pause to explain what you see here in this code example. First you see a light-gray box containing the command 1+1. This is an instance of a so called code chunk. Moving the cursor to the right upper corner of the chunk, will display a copy icon and you can click this icon to copy the code to the computer’s clipboard and then paste it at the prompt of your console (or for that matter anywhere else) and run it in R studio, if you wish. In the code-chunk the R-prompt &gt; is not displayed. This symbol of the prompt is only shown in the Console itself.\nWhen the code is executed, you see the result in the second light-gray box, just below the first one. It starts with a double hash ##, indicating that it shows an output of running the above code chunk and then displays the output as it would appear in the command window [1] 2.\nThe [1] means that the line begins with the first value of your result. For example, if you enter the command 20:60 at the prompt of your console which means in the R language, “list all the integers from 20 to 60” and press enter you get:\n\n20:60\n\n [1] 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\n[26] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\n\nmeaning that 20 is the first value displayed in your result. Then there is a line break because not all values can be displayed on the same line and R tells you that 45 is the 26-th value of the result.\nThe colon operator : is a very useful function in R which we will need often. It allows us to create sequences of every integer between two given integers.\nR needs a complete command to be able to execute it, when the return key is pressed. Lets see what happens, if a command is incomplete, like for instance &gt; 5*.\nIn this case R will show the expression followed by a + instead of showing a new prompt. This means that the expression is incomplete. It expects more input. If we complete the expression, say like\n&gt; 5*\n+ 4\nthe expression can be evaluated and a new prompt is shown in the console.\nIf you type a command that R does not understand, you will be returned an error message. Don’t worry if you see an error message. It just is a way the computer tells you that he does not understand what you want him to do.\nFor instance, if you type 5%3 you will get an error message like this\n&gt; 5%3\nError: unexpected input in \"5%3\"\n&gt;\nSometimes it is obvious why a mistake occurred. In this case, that R just does not know what to do with the symbol %. It has no meaning in this context. Sometimes it is not so obvious what the error message actually means and what you might do about it.\nA useful strategy in this case is to type the error message into a search engine and see what you can find. The chance is very high that others encountered the same problem before you and got helpful advice how to fix it from other users on the internet. One site, we find particularly helpful for all kinds of questions related to R and R programming is https://stackoverflow.com/. Try it at the next opportunity.\nNow with this basic knowledge, we can already make the first step to create a die on the computer using R. If you think of a physical die, the essential thing that matters are the points on its six sides. If you throw the die it will usually land on one of these sides and the upward showing side of the die shows the number of points. The colon operator : gives us a way to create a group of numbers from 1 to 6. R gives us the result as a one dimensional set of numbers.\n\n1:6\n\n[1] 1 2 3 4 5 6\n\n\nLets use these first steps in R to recap the probability concepts we have learned using this example of the six sided die: A basic outcome of rolling a six-sided die is for example 6 if the upper side after rolling the die happens to be the side with 6 points. The sample space of the experiment of rolling a six-sided die is the set \\({\\cal S} = \\{1,2,3,4,5,6\\}\\). In probability theory we often use the symbol \\({\\cal S}\\) or \\(S\\) for sample space. In many probability texts the sample space is also often denoted by the symbol \\(\\Omega\\) the Greek letter for (big) Omega. A random experiment in this example is the rolling of the die. The outcome is uncertain but once the die is rolled the outcome can be determined precisely. The event that the outcome is a display of 10 points is the empty set \\(A = \\emptyset\\). The symbol \\(\\emptyset\\) comes from set theory and means the set containing no elements. This event can contain no elements because we can not get a score of 10 by rolling a six sided die.\n\n\n1.2.2 Objects\nYou can save data in R by storing them in objects. An object is a name, you can choose yourself to store data. For example, if you choose to store the value 6 in an object called point_six, you would type:\n\npoint_six &lt;- 6\n\nat the prompt. R will the store the value 6 in the object called point_six, which you can use to refer to the value. If you type the name of your object at the prompt, R will display the value you have assigned. A useful key combination for typing the assignment operator &lt;- is to use the key combination ALT _. At the R prompt R will automatically print an assignment operator.\nNow if you type the name of the object and press enter, R will display the value or values stored in it, like this:\n\npoint_six\n\n[1] 6\n\n\nNow you can use the name of the object to refer to its value. For instance, you could divide point_sixby 2and get a meaningful result\n\npoint_six/2\n\n[1] 3\n\n\nNow to make our die more tangible and useful, let us store it in an R object by typing the following command at the prompt. This command creates an object with name die and assigns the vector 1,2,3,4,5, 6 to it.\n\ndie &lt;- 1:6\n\n\n\n\n\n\nThe RStudio Environment pane keeps track of the objects you have created\n\n\n\n\nYou can now see in the right upper Environment pane in figure @ref(fig:rstudio-screen-with-command) that R shows you that there is an object with the name die that it consists of integers 1,2,3,4,5. As you create more objects they will be stored in the Environment pane and are ready for your reference, unless you delete them. You can remove or delete an object by typing rm(object) or by assigning the value die &lt;- NULL which would also remove the object from your environment or workspace.\nYou can name your objects almost anything with a few exceptions. An object name must not start with a number. There are some special symbols which can also not be used in object names, like ^, !, $, @, +, -, /, *. Note that R is case sensitive and distinguishes small and big letters. If you assign a new value for an object you have already created, R will overwrite the object without warning.\nYou can see which objects are currently created and available for you in the Environment pane of your session of by typing ls(). The UNIX users among you will recognize this command from the unix shell, where it displays the files in a directory.\nBefore we learn how we can actually roll our die and perform a random experiment with it, let us briefly use the opportunity to explain a few things about how R does computations. We have already explained that we can use the object name to refer to the value. So for instance if we type\n\ndie*die\n\n[1]  1  4  9 16 25 36\n\n\nThis might irritate some of you because we have called the object a vector. In linear algebra multiplication of vectors is only allowed if there is an inner product. What happens here, if we use * the multiplication operator is that R does an element-wise multiplication of the six numbers of our die. Of course R allows to take an inner product as well, but this needs a different operator. To compute an inner product, we would type\n\ndie %*% die\n\n     [,1]\n[1,]   91\n\n\nNow R displays the result as a vectors with one row and one column, which is denoted in the output by [ , 1] for the column and [1, ] for the row. We will learn later more about the use and the meaning of this notation in R.\nThe element wise execution R usually uses also means that when you, for example type\n\ndie - 1\n\n[1] 0 1 2 3 4 5\n\n\nR would subtract 1 from every component in the vector die.\nAnother specific behavior of R, you need to know about is called recycling. If you give R two vectors of different length in an operation, R will repeat the shorter vector as long as it is of equal length with the longer one. For example, if you have: ::: {.cell}\ndie + 1:2\n\n[1] 2 4 4 6 6 8\n\n:::\nyou see that R adds 1 to 1 and 2 to 2 and then starts over again by adding 1 to 3 and 2 to 4 and then starts over once again by adding 1 to 5 and 2 to 6. If the longer vectors is not a multiple of the shorter one, R recycles but the cuts off. It will give you a warning though. ::: {.cell}\ndie + 1:4\n\nWarning in die + 1:4: longer object length is not a multiple of shorter object\nlength\n\n\n[1] 2 4 6 8 6 8\n\n:::\nWhile this might seem awkward to some of you, we will see that for data manipulation element-wise execution is often extremely useful. It allows to manipulate groups of values in a systematic yet easy way.\n\n\n1.2.3 Functions\nR contains many functions which we can use to manipulate data and compute things. The syntax for using a function is very simple: You type the function name and put the value of the function argument in parentheses. Here we use for illustrations the function of the square root sqrt(): ::: {.cell}\nsqrt(4)\n\n[1] 2\n\n::: or rounding a number: ::: {.cell}\nround(3.1415)\n\n[1] 3\n\n::: The data you write in the parentheses are called the function arguments. Arguments can be all sorts of things: raw data, R objects, results from other functions.\nIf functions are nested, R evaluates the innermost function first and then goes on to the outer functions. To see examples of all these instances you can take ::: {.cell}\nmean(1:6)\n\n[1] 3.5\n\nmean(die)\n\n[1] 3.5\n\nround(mean(die))\n\n[1] 4\n\n::: for example.\nFor simulating random experiments, R has the very useful function sample(). With this function we can roll our die on the computer and conduct actual random experiments.\nThe function takes as arguments a vector names x and a number named size. sample will return size elements randomly chosen from the vector x. Lets say: ::: {.cell}\nsample(x = 1:4, size = 2)\n\n[1] 3 1\n\n:::\nIn this case sample has chosen 4,1 from the vector x = (1,2,3,4) at random.\nIf we want to roll the die in our computer we can thus pass the die as an argument to sample and use the number 1 for the size argument. Lets do a few rolls with our die ::: {.cell}\nsample(x = die, size = 1)\n\n[1] 3\n\nsample(x = die, size = 1)\n\n[1] 1\n\nsample(x = die, size = 1)\n\n[1] 2\n\nsample(x = die, size = 1)\n\n[1] 1\n\n::: These are the random outcomes of our consecutive rolls. It is as if we had thrown an actual die but in this case we have done the same thing on the computer. Isn’t it cool that this is possible at all? The sample() function will remain our good friend throughout this course.\nR functions can have many arguments, but they need to be separated by a comma.\nEvery argument in every function has a name. We specify which data are assigned to the arguments by setting a mathematical equal sign = between the name and the data. Names help us to avoid passing the wrong data and thereby mixing up things or committing errors. But using names is not necessary. If we just wrote ::: {.cell}\nsample(die,1)\n\n[1] 4\n\n::: R would also know what to do. It is not always clear which names to use for a function. If you are not sure, you can use the function args() to look it up. Here we take the function roundas one example. ::: {.cell}\nargs(round)\n\nfunction (x, digits = 0, ...) \nNULL\n\n::: Note that the digits argument in the round function is already set to 0. Frequently R functions come with optional arguments. These arguments are optional because the come with a default value, which is 0 in case of the round function.\nWe recommend that you write out argument names as a rule. It gives clearer code and avoids errors. If you don’t write argument names, R matches your values to the arguments of the function by order.\n\n\n1.2.4 Writing your own functions\nNow we are ready to write our own function to roll the die in our computer. Each function in R has the same elements: A name, a function body of code and a set of arguments. To write your own function, you have to write up all of these parts and save them in an R object. The syntax is:\nmy_function &lt;- function() {}\n\nThe name here is my_function, next comes the expression function() which needs to be assigned. The names of the function arguments have to be written between the parentheses. Then we have to write the actual code within the braces {}.\nTo do this for the die, lets write a function named roll_die. ::: {.cell}\nroll_die &lt;- function(){die &lt;- 1:6 \n                         sample(die, size = 1)}\n:::\nNow we can roll our die for a few times to show how the function works ::: {.cell}\nroll_die()\n\n[1] 5\n\nroll_die()\n\n[1] 4\n\nroll_die()\n\n[1] 2\n\nroll_die()\n\n[1] 6\n\nroll_die()\n\n[1] 1\n\n::: Note that in our function roll_die() has no arguments, just the function body. This is perfectly legitimate in R. It is important that when we call the function we have to call it with the parenthesis like roll_die(). If we only call the name roll_die, R will display the code in the function body.\nA final remark in the sample function is in place here. If we look at the arguments of sample using the args function we see ::: {.cell}\nargs(sample)\n\nfunction (x, size, replace = FALSE, prob = NULL) \nNULL\n\n::: Lets do not discuss all the details of this output but concentrate for a moment on the replace argument. What does this mean?\nAs we saw previously we can use the sample function to model the rolling of our die. If we set the size argument to 1 we get the roll of one die. If we set the size argument to n, we would simulate the rolling of n dies. But now the replace argument becomes crucial. As we can see in the output of the args function replace has a default value FALSE. This is a logical argument. It tells R, for example, that if we set size = 2, meaning that two dice are rolled, if the first dice shows, say a value of 3, the second die cannot show 3 as well.\nThis is clearly not what we have in mind when we model the rolling of 2 dice. It should be possible that both dies show the same value. To enable this behavior of the sample function, we have to change the default value of the replace argument to TRUE. Then R chooses a random draw from all of the six possible values for all dice rolled.\nCongratulations ! You have written your first R function for conducting a simple random experiment. Let me remind you once again: Think of the parentheses as a trigger that tells R to run the function. If you omit the trigger R just prints the body of the function. When you run a function, all the code in the function body is executed and R returns the result of the last line of code. If the last line of code does not return a value neither will R.\n\n\n1.2.5 Arguments\nImagine we remove the first line of code in our function body and changed the name die in the sample function to “ball”. ::: {.cell}\nroll_die2 &lt;- function(){sample(ball, size = 1)}\n::: If we call the function now, we will get an error. The function call roll_die2() will result in the error message Error in sample(ball, size = 1) : object 'ball' not found (try it!)\nWe could supply ball when we call roll_die2 if we make ball an argument of the function. Lets do this: ::: {.cell}\nroll_die2 &lt;- function(ball){sample(ball, size = 1)}\n::: Now the function will work as long as we supply ball when we call the function. ::: {.cell}\nroll_die2(ball = 1:6)\n\n[1] 1\n\n::: Note that we still get an error, if we forget to supply ball argument. This could be avoided if we give the function a default argument ::: {.cell}\nroll_die2 &lt;- function(ball= 1:6){sample(ball, size = 1)}\n::: Now if we type: ::: {.cell}\nroll_die2()\n\n[1] 6\n\n::: everything works, just as intended.\n\n\n1.2.6 Scripts\nSo far we have worked by interacting with the console. But what if you want to edit your functions? It would be much easier, if you could use a draft of your code and work form there. This can be done by using a script.\nYou create a script by going to File &gt; New File &gt; R script in the menu bar of RStudio. Using scripts is the standard way to write code in R. It not only helps you to keep track of your code, save it and edit it later. It also makes your work reproducible. You can edit and proofread your code and share it with others. To save your script go to File &gt; Save As in the menu bar.\n\n\n\n\n\nThe RStudio Script\n\n\n\n\nRStudio has many useful features to help you work with scripts. You can for instance automatically execute a line in a code by using the run button. You can also execute sections of code or the entire script. The entire script is executed by running the Source button. For all these commands there are key short cuts which you will learn as you work more with RStudio and R.\nFrom now on you should write all your R-code for this course in scripts. Make a new folder for the scripts you write and store your R-code there from now on.\n\n\n1.2.7 Using packages and finding Help\nWe have now a function which we can use to simulate the rolling of a die, roll_die(). If the die is fair it should be the case that if we roll the die often, all numbers should occur about equally often. The die should not be weighted in favor of a particular value.\nOne way to learn whether our die is fair are repetition and visualization. These are tools we will need all the time, when working with data and when doing probability. While R has many useful functions, one of the great powers is that R is constantly extended by a huge community of users by providing packages.\nPackages are add on functions, which will not be available when you install R. They need to be installed and loaded before you can use them. Since packages are such a powerful tool in R we need to introduce what they are and how to use them in the beginning.\n\n\n1.2.8 Packages\nThere are many visualization tools in R that come with the basic installation. Since the point we want to make here is about packages, we will use a visualization function which is part of the add on package ggplot2, a very popular package for making all kinds of graphs. ggplot2 is not part of the base-R distribution. It has to be therefore loaded before we can use it.\nThere are many additional functions provided with this package. Indeed you could run a whole course on just that 2 For the point we want to make here we will use just one of them, called qplot(), a shorthand for for quick plot.\n2 A very good starting point is for instance Healy (2019), in case you are interested. Also a good source is the first chapter in Wickham and Grolemund (2017).Since qplot() is a function in the package ggplot2, we first need to install this package. To install a package you need to be connected to the internet. If you have internet connection go to the command line and run at the command line: install.packages(\"ggplot2\").\nR displays what is happening while executing the command. Don’t worry if you don not know what all of these messages exactly mean and don’t panic that they are displayed in red. All packages can be installed like this. You have just to enter the correct name in the function install.packages(). The lower right pane in the RStudio software alternatively provides a tab called Packages. Using this tab, you can also install R packages interactively by clicking the install button on the upper left corner of the Packages tab.\nAfter installation the package is on our hard-drive but it can not yet be used. To use the package it has to be loaded. This is done with the command library. To load the ggplot2 package we type ::: {.cell}\nlibrary(\"ggplot2\")\n::: and hit the return key. Many things could be said about the R package system and you will learn it in more detail as we go along in our course. For the moment the most important thing to remember is that a package needs to be newly loaded whenever you want to use it in a new R session.\nTo check whether our dies is fair, we need to roll it many times. R provides a function, that does this for us. This function is called replicate() and provides an easy way to repeat a command many times. The number of times we want to repeat something is given as an argument to the replicate function.\nNow lets roll our die 100 times and save the result in an object we call rolls: ::: {.cell}\nrolls &lt;- replicate(100, roll_die())\n::: We now use the qplot()function from the ggplot2 library to make a quick visualization, by typing the command qplot(rolls). I include the resulting picture in the following figure ::: {.cell layout-align=“center”} ::: {.cell-output-display}  ::: ::: If you try this and your picture looks a bit different from mine, don’t worry. This is as things should be. I have stored the picture after one particular run of the replicate function and saved it in my figures folder to these lecture notes. Each time you run the replicate function anew a new random outcome is stored which will look not exactly the same as any other or course. This is what randomness does to the outcome of rolling a die.\nIt looks like every value occurred roughly 16 times but there is still quite some variation. For instance, the value 3 seems to occur more than 20 times whereas the value 2 occurs less than 15 times.\nMaybe we have to give it another trial with more replications. With the computer we can do this with a fingertip. Let us roll our die 10000 times and plot the result.\n&gt; rolls2 &lt;- replicate(10000, roll_die())\n&gt; qplot(rolls2m bindwidth = 1)\nNow the picture looks better.\n\n\n\n\n\nFrequencies of 1, 2, 3, 4, 5, 6 after rolling our virtual die 10000 times\n\n\n\n\nWe will learn in our course why the picture get better as we increase the number of rolls of the die. For the moment, let us just state that at least for this case it seems that there is no significant visual evidence that our virtual die is loaded.\n\n\n1.2.9 Getting Help\nWe have now learned a tiny number of R functions and we have written one function ourselves. We have learned how to make use of functions provided by packages.\nIt would be overwhelming to memorize and learn them all. In R, fortunately, every function comes with a detailed documentation and with its own help page. You need to learn how to use this source right from the beginning.\nTo access the help page of a function you type the function name preceded by a question mark at the prompt, like this ::: {.cell}\n?sample\n:::\nThen, after you have pressed the return key, a help page is opened in the right lower pane under the help tab as shown in @ref(fig:helpinr) ::: {.cell layout-align=“center”} ::: {.cell-output-display}  ::: :::\nThis help page has a particular structure that you will find for every other R function no matter whether it is provided by the base installation or by a package. In the upper left corner you see the name of the function (sample) and in curly brackets next to it the term base, which means that this is a function in the R base installation. Then you see a headline about what the function does.\nFrom the top of the page, you then first see the field Description. This is a short description what the function does. Here it says\nDescription\nsample takes a sample of the specified size from the elements of x using either with or without replacement.\nThe next field is Usage. It gives you the function description with the arguments. Here for example\nUsage\nsample(x, size, replace = FALSE, prob = NULL)\n\nsample.int(n, size = n, replace = FALSE, prob = NULL,\n           useHash = (!replace && is.null(prob) && size &lt;= n/2 && n &gt; 1e7))\n           \nThe first line in Usage should by now be familiar. Don’t worry about the second line. The function can obviously do more than we know so far.\nNext comes a list of arguments the function takes and what type of information R expects you to provide, as well as what R will do with this information. Here it says for example\nArguments\nx   \neither a vector of one or more elements from which to choose, or a positive integer. See ‘Details.’\n\nn   \na positive number, the number of items to choose from. See ‘Details.’\n\nsize    \na non-negative integer giving the number of items to choose.\n\nreplace \nshould sampling be with replacement?\n\nprob    \na vector of probability weights for obtaining the elements of the vector being sampled.\n\n...\n\nWe omit some information here.\nThen comes a field called Details which gives a more in-depth description of the function. The next field is called Value. It describes what the function returns when you run it. Then we have a reference to related R functions under the field See. Finally there is a field called Examples. This field contains example code that is guaranteed to work. It shows a couple of different cases how you can use the function in practice.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1_updated.html#coincidences",
    "href": "01-lecture1_updated.html#coincidences",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.3 Application: Coincidences and the Blockchain",
    "text": "1.3 Application: Coincidences and the Blockchain\n\n1.3.1 The birthday problem\nWe learned now some basic notions of probability and of R with the example of the rolling of a fair die. It is really surprising what already can be done by just applying the simple ideas we have just learned. The application we want to show you now is known to probability theorists as the birthday problem. It originates in a piece of recreational maths and math-puzzles but it reaches out until cryptography, computer security and blockchain architecture. It also gives us an opportunity to apply some of our newly acquired R-knowledge.\nThe starting question in the birthday puzzle is: What is the probability that at least two people in a room share the same birthday, when we neglect things like leap years, and when we assume that birthdays on any day of the year are equiprobable and the birthdays of the people in the room are independent. We have no twins for example. Perhaps some of you have already seen this problem before. If not, the result may surprise you. Even if you saw the birthday problem before, perhaps not many of you have seen the connection to the cryptography and the blockchain.3\n3 We follow here the discussion in Diaconis and Skyrms (2019)First, observe that we took our assumptions such that we are in the frame of classical probability like the originators of the field thought about it.\nNow for the sake of familiarizing ourselves with the new concepts, let us try to map the birthday problem into the probability notions we learned so far.\nThe sample space is the set of possible outcomes of the experiment. Assume we have \\(n\\) people in the room. Since each person can have a birthday at any of the 365 days in the year (note that we assumed we exclude leap years) and we have \\(n\\) people in the room, the possible basic outcomes are \\(365 \\times 365 \\times 365 \\cdots 365\\) taken \\(n\\) times. This will produce a set with \\(365^{n}\\) ordered \\(n-tuples\\) or sequences of birthdays. This is the sample space of this experiment, written as \\({\\cal S} = \\{x | x \\in 365^n\\}\\) in set theoretic notation. It means the sample space is the set of all ordered \\(n-tuples\\) from the Cartesian product \\(365^n\\).\nRemember that in mathematics, a Cartesian product is a mathematical operation that returns a set (or product set or simply product) from multiple sets (in this case the sample space, \\({\\cal S}\\). That is, for sets \\(A\\) and \\(B\\), the Cartesian product \\(A \\times B\\) is the set of all ordered pairs \\((a, b)\\) where \\(a \\in A\\) and \\(b \\in B\\).\nNow given this sample space we can assign a probability to the event that two people chosen at random will have the same birthday. The denominator will this be \\(365^n\\). The nominator for this probability will be much more straightforward to figure out, if we compute the complement. We discussed before that the probability of the complement of an event is 1 minus the probability of the event. Translated to the birthday problem, this means we look for the 1 minus the probability that that all birthdays are different. The probability that the second person has a different birthday from the first is \\(\\frac{364}{365}\\). If they are different the probability that the third person has a different birthday from them is \\(\\frac{363}{365}\\) and so on for all \\(n\\) in the room. Thus the probability of a shared birthday in the room is: \\[\\begin{equation*}\nP(\\text{at least two people share birthday}) =\n1 - \\frac{365 \\times 364 \\times 363 \\cdots \\times 365 - n +1}{365^n}\n\\end{equation*}\\] Now there is an additional thing we did not yet introduce and which we will learn about in the next lecture. This refers to our assumption that the individual birthdays are independent. For the moment you need to take the following fact on faith: The probability of independent events is the product of the probability these events.\nNow comes the surprise for those of you who did not already see the birthday problem. Assume the group size of people is 23. Let us compute the birthday coincidence probability. For this computation we make use of the R function prod() which takes a vector of numbers as input and computes their product. For \\(n=23\\) we need the list of numbers from 365 to 343. Now we can use the : operator and take advantage from one of its cool properties. If we formulate the command as 365:343 then the colon operator will give us a descending list of integers starting at 365 and ending at 343. Then the probability can be computed as ::: {.cell}\n1 - prod(365:343)/365^23\n\n[1] 0.5072972\n\n::: We have used the operator ^ which is needed to compute powers. Now we see from our computation that with 23 people the probability is already larger than 50 %. Quite stunning. You can now verify yourself that with 50 people this probability is already at 97 %.\n\n\n1.3.2 An R function to compute birthday probabilities\nNow let us use our knowledge about how to write R functions to write a function to compute birthday probabilities. The function argument is the number \\(n\\) of people in class. The coincidence probability is given by the formula we have derived. Now here is how we could go about writing this function: ::: {.cell}\nbirthday_collisions &lt;- function(n){\n  1 - prod(365:(365-n+1))/365^n\n}\n::: Now lets verify what I have claimed before about the group size 50. ::: {.cell}\nbirthday_collisions(50)\n\n[1] 0.9703736\n\n::: Voila, indeed with 50 people in the group the collision probability is already at 97 %.\n\n\n1.3.3 Determining birthday collisions by simulation\nNow this was an argument derived analytically and then we just packed the derived result into a function to compute the exact birthday-collision probabilities. Here is how we could figure out these probabilities by simulation, even with the minimal tools we have learned so far.\nLet us simulate first birthdays for 23 people in a room using the sample function. We stick to the assumption that our year has 365 days (no leap years), and that all birthdays are equally likely, so we can sample from the list of days from 1 to 365 with the sample function which we have already encountered.\nWe need to take care to set the replace argument in the sample function to the value TRUE. This is because we always draw for every person in the room from the same list of values. If one birthday is drawn it is possible in principle that later in the process the same birthday is drawn again. Before, when we worked with only one die we did not need to care whether sample drew with replacement or not. ::: {.cell}\nb_23 &lt;- sample(1:365, 23, replace = TRUE)\n::: This little piece of code is to be read in the same way as before when we built the process of rolling a die on the computer. We sample 23 values from the vector \\(1,2,3,\\cdots,365\\) without replacement. Think about a situation where I use uniform random numbers to call 23 people in your group and write the birthdays I get in this way into the object b_23.\nHere is how I can find the number of matches in b_23. R has a built in function, which is called unique(). So if there were two people with the same birthday in b_23, applying unique() to b_23 would only keep one value. Now clearly if we subtract the length of the resulting object from 23 we get the number of collisions in b_23. Fortunately we can use the R function length() to achieve this task. length() computes the length of any object we give it as an argument. ::: {.cell}\nm_23 &lt;- 23 - length(unique(b_23))\n::: So for instance if sample() drew 23 different birthdays m_23 would be 0.\nLet’s pack this process into a function: ::: {.cell}\nsim_23 &lt;- function(){\n  b_23 &lt;- sample(1:365, 23, replace = TRUE)\n  (23 - length(unique(b_23)))\n}\n::: Now we can repeat this process many times - say 10000 times - using the replicate function. ::: {.cell}\nsimprobs_23 &lt;- replicate(10000, sim_23())\n:::\nNow how do we get from here to probabilities? Here we anticipate and introduce a new probability concept which we will discuss in more detail in the next lecture but which you perhaps already came across a few times.\nThis concept could be called the relative frequency probability . In this concept the probability of an event \\(A\\) is defined as \\[\\begin{equation*}\nP(A) = \\frac{\\text{Number of times $A$ occurs in repeated identical trials}}{\\text{Total number of trials in a random experiment}}\n\\end{equation*}\\] Applying this concept to our data generated by the replicate function and stored in b_23 would require two things. First we would have to count the number of times we saw a 1,2 or more matches, which in our case means 1,2 or more birthday collisions, add up the count and divide by the number of replications. Clearly it is also easier here to work the other way round. We count the number of no collisions and use the complement rule, by computing 1 minus the relative frequency of no collisions. Let us do that.\nNow this is clearly too tedious to do by hand. We will discuss systematically in the next lecture how to refer to individual values in an R object and select and operate on ranges of values etc.\nFor the moment, look at the next step just as a piece of magic and don’t worry if you do not exactly understand the syntax at the moment.\nIn the numerator I ask R to count the number of 0s (no birthday collisions) in the object simprobs_23 and then I divide it by 10000, just as in the definition of relative frequency probability. Then I compute 1 minus this relative frequency ::: {.cell}\n1 - length((simprobs_23[simprobs_23 == 0]))/10000\n\n[1] 0.5067\n\n::: Voila, this is pretty good, isn’t it? Remember that the analytical solution we just got a bit earlier was 0.5072972\nIsn’t this cool? Instead of using formal reasoning we built a random experiment on the computer and came up with a pretty good approximation of the collision probability.\nLet’s check the result with 50 for the sake of completeness and for the sake of practice, with an experiment with 10000 trials. I now stitch all steps together. ::: {.cell}\nsim_50 &lt;- function(){\n  b_50 &lt;- sample(1:365, 50, replace = TRUE)\n  (50 - length(unique(b_50)))}\n\nsimprobs_50 &lt;- replicate(100000, sim_50())\n1 - length((simprobs_50[simprobs_50 == 0]))/100000\n\n[1] 0.97027\n\n::: Pretty amazing! Before we got the exact value as 0.9703736.\nBut now let us stay still with the birthday problem but now get away from this playful application to something really serious: Cryptography.\n\n\n1.3.4 Hash-functions and the blockchain\nThe birthday problem is the canonical model for the probabilistic study of coincidences of all kinds. A particular important application of this idea is in cryptography, and its concept of so called hash-functions.\nA hash-function maps a string of arbitrary but finite length to a fixed length string of output.4 A very frequently used hash-function in practice is the function SHA-256, which maps its input to a string of 256 bits5. So, you could for instance give the text of these lecture notes as an input to SHA-256 and it would map this into a 256-bit string, which functions like a finger print of this text. This function is an instance of a special from of mappings called a one-way-function meaning that it is easy to evaluate or compute but it is practically impossible to learn from the value the initial argument by computing the inverse.\n4 We have taken this discussion from https://brilliant.org/wiki/birthday-paradox/5 A bit, short for binary digit, is defined as the most basic unit of data in telecommunications and computing. Each bit is represented by either a 1 or a 0Hash-Functions are key pillars of modern cryptography, where they play a major role in message authentication. This is because it is impossible to modify the input without significantly changing the output. So in our previous example, if you only deleted or added a comma to these notes and hash-them again they would hash into a completely different value than the previous version which still was without this minor change. Comparing the hash-values would reveal immediately that something has changed.\nThe collision problem for hash-functions is formally equivalent to the birthday problem. The event we are interested in is that at least two input strings hash-to the same value. Again it is easier to think about the complementary event that all inputs hash to a different value.\nIf the range of the hash-function is \\(M\\) and the hash-function maps into a 256 bit string then there are \\(2^{256}\\) basic outcomes. Since the hash-function maps a large string onto a smaller string it is possible that there are two different strings \\(x \\neq y\\) mapping to the same value \\(\\text{hash}(x)=\\text{hash}(y)\\). This would be a problem for message authentication because it would give the same “fingerprint” for two different strings.\nFor a cryptographically secure hash function it is therefore required that the probability of such a collision should be small enough to exclude a collision in all practically relevant circumstances.\nNote that this is a problem formally similar to the birthday problem. In the cryptography context we ask, how many values does a potential attacker have to hash through SHA-256 before the probability of a collision is larger than a certain threshold?\nThe probability of no-collision (\\(nc\\)) with \\(n\\) hashed-messages through a SHA-256 hash function is \\[\\begin{equation*}\nP_{nc}(n) = 1 \\times \\left(1 - \\frac{1}{2^{256}}\\right)\\times\n\\left(1 - \\frac{2}{2^{256}}\\right) \\times \\cdots \\times \\left(1 - \\frac{(n-1)}{2^{256}}\\right)\n\\end{equation*}\\]\nNow to do the estimation of the threshold we use an approximation, which works with a simple property of the logarithm: \\(\\log(1-x)\\approx -x\\) when \\(x\\) is small. Thus for \\(n\\) much smaller than \\(M\\), or \\(n \\ll M\\), we can write the no-collision probability approximately as \\[\\begin{align*}\nP_{nc}(n) &\\approx 1 \\times \\exp\\left(-\\frac{1}{2^{256}}\\right) \\times \\exp\\left(-\\frac{2}{2^{256}}\\right) \\times \\cdots\n\\times \\exp\\left(-\\frac{(n-1)}{2^{256}}\\right) \\\\\n&\\approx 1 \\times \\exp\\left(-\\frac{(1+2+3+...+(n-1))}{2^{256}} \\right) \\\\\n&\\approx \\exp\\left(-\\frac{n \\times (n-1)}{2 \\times 2^{256}}\\right)\n\\end{align*}\\] Now if \\(n \\ll 2^{256}\\) we can again use the approximation \\(\\exp(x) \\approx 1 + x\\) to get the probability of a hash-collision as \\[\\begin{align*}\nP_{nc}(n) &\\approx 1 - \\frac{n \\times (n-1)}{2\\times 2^{256}}\\\\\n       & \\approx 1 - \\frac{n^2}{2\\times 2^{256}}\n\\end{align*}\\] Thus the probability of a hash-collision as a function of \\(n\\) is then approximately \\[\\begin{equation*}\nP_{c}(n) = \\frac{n^2}{2 \\times 2^{256}}\n\\end{equation*}\\] Thus to have a collision probability with \\(99.8%\\) you need ::: {.cell}\nsqrt(2*2^256*0.998)\n\n[1] 4.807505e+38\n\n::: which is about \\(5*10^{38}\\) hashes. To have a collision probability of \\(50 \\%\\) you need ::: {.cell}\nsqrt(2^256)\n\n[1] 3.402824e+38\n\n::: which amounts to \\(2^{128}\\) hashes. This is, of course a really big number.\nLet’s put this into perspective: If a computer computes \\(10000\\) hashes per second, it would take more than \\(10^{27}\\) years to compute \\(2^{128}\\) hashes. Narayanan et al. (2016) formulate it like this: “…if every computer ever made by humanity had been computing since the beginning of the universe, the odds that they would have found a collision by now are still infinitesimally small. So small that it it’s far less than the odds that a meteor will land on your house.”.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1_updated.html#summary",
    "href": "01-lecture1_updated.html#summary",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.4 Summary",
    "text": "1.4 Summary\nIn this lecture we have taken a first step towards some very basic probability notions and some basic steps in R. Isn’t it amazing how much territory we could cover with so few concepts? You have learned about how to think probabilistically about collision probabilities and how to solve for them analytically, by simulation and for large numbers by approximation.\nWe have convinced ourselves using this knowledge only and taking on faith that the probability of independent events is the product of their individual probabilities, that the cryptographic Hash-function SHA-256, while it can produce collisions in theory, practically the number of hashes to make such a collision occur would be so large that we can be confident that hashing bit strings with SHA-256 gives us a unique fingerprint practically with certainty.\nThese are the basic probability concepts we have covered in this lecture:\n\nA random experiment: A process leading to an uncertain outcome.\nSample space: The collection of all possible outcomes of a random experiment.\nBasic outcome: A possible outcome of a random experiment.\nEvent: An event is a subset of basic outcomes. Any event which contains a single outcome is called a simple event.\nClassical probability find or make equally probably cases and the count them. The probability of an event \\(A\\) is the number of cases when \\(A\\) occurs divided by the total number of cases.\nRelative frequency probability defined as the number of times an event \\(A\\) occurs in a repeated number of trials divided by the total number of trials in a random experiment.\n\nThese are the R concepts we have covered in this lecture:\n\nobjects arbitrary names that can store different values and data types.\nfunctions ab R object that can accept other R objects as arguments, operate on them and return a new object.\nscripts files that store sequences of R commands and can be saved, repopened and allow the execution of commands.\nusing packages\nfinding help\nthe functions sample and replicate\n\nThese are the Applications we have covered in the lecture:\n\nConstructing a die on the computer and roll it an arbitrary number of times\nThe birthday problem and how to solve it analytically as well as through simulation\nExtrapolating the birthday problem to analyze cryptographic collision resistance of hash-functions by using ideas from probability",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1_updated.html#project-1-craps-a-casion-dice-game.",
    "href": "01-lecture1_updated.html#project-1-craps-a-casion-dice-game.",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.5 Project 1: Craps: A casion dice game.",
    "text": "1.5 Project 1: Craps: A casion dice game.\nThe first project is about one of the very few dice games offered at a Casino: Craps.6\n6  This will be the only project in this course where we do not go into a direct financial application. Before we can do so, we need to build still a bit more knowledge of probability and skills in R.In Craps people throw a pair of dice and bet on outcomes of these throws. In this project we practice our new knowledge by implementing the dice throws of craps and the automatic summation of points on the computer. We try to find out the probability of the possible outcomes and check the fairness of the dice.\n\nYour first task in this project will be to write a function which allows you to virtually throw a pair of dice and sum up the points shown after the throw.\nSimulate and plot the result of your simulation using qplot() with the binwidth argument set to 1.\nAre these dice fair? Why?\nAssume the dice were unfair in the following sense: Numbers 1,2,3,4 and 5 have a probability of \\(1/8\\) while the 6 has a probability of \\(3/8\\). Study the help page of the samplefunction and find out how you could give these new probability weights to the function. If you redo your simulation analysis with the loaded dice, how does the picture change?\nWrite a script for this random experiment.\nNow look at the random experiment of throwing two dice with the concepts from probability theory: What is the sample space of this experiment. What are the probabilities of the basic outcomes? What is the probability of getting sum 7, what is the probability of getting sum 2 for the case of the fair dice, for the case of the unfair dice?\nImagine now that you are at the casino which uses fair dice and you can spend 150 Euro for chips. Since you have figured out that 7 is the most likely outcome you would like to buy bets on 7. The casino offers you a bet for 15 cent. When you win you get 1 Euro for the bet, when you loose you get nothing. Every bet costs 15 cents, so you can make 1000 bets in total on 7 from your budget of 150. Is this a good or a bad deal for you? Try to think about this problem in terms of a simulation.\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nHealy, Kirean. 2019. Data Visualization: A Practical Introduction. Princeton University Press.\n\n\nNarayanan, Arvind, Joseph Bonneau, Edward Felten, Andrew Miller, and Steven Goldfeder. 2016. Bitcoin and Cryptocurrency Technologies: A Comprehensive Introduction. Princeton University Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://r4ds.had.co.nz/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#tossing-a-coin",
    "href": "01-lecture1.html#tossing-a-coin",
    "title": "1  First probability ideas and first steps in R",
    "section": "",
    "text": "1.1.1 Random experiments, sample space, events\nIn the theory of probability a process leading to an uncertain outcome is called a random experiment. The example of tossing a coin helps us to give a precise meaning to the notion of an uncertain outcome. While we can imagine in principle that the coin lands on its rim and this is one outcome, we agree on the outset that we are going to consider the (practically relevant cases) that it will land on one of the faces.\nThe collection of all possible outcomes of a practical or conceptual random experiment is called in probability theory a sample space. While the sample space of tossing a coin is an idealization it is exactly this idealization which simplifies the theory without affecting its applicability. The basic outcomes in the random experiment of tossing a coin are that the die lands such that the upward showing face shows Heads or Tails. Let us encode this outcome by 1 for “Heads” and 0 for “Tails”. In the theory the collection of basic outcomes is denoted as a set. Thus the sample space of tossing a coin is given as the set \\({\\cal S} = \\{1,0\\}\\).\nThe sample space \\({\\cal S}\\) is the set of all basic outcomes, which are in our case only two: 1 or 0.\nIn more complex random experiments there will usually be more than two outcomes. Subsets of the sample space containing more than one basic outcome are called events in the theory of probability.\n\n\n\n\n\n\nNow you try\n\n\n\nConsider another random experiment from games of chance: Throwing a six sided die. What are the basic outcomes in this random experiment? What is the sample space in this case? How would you describe the event that the outcome of the die shows an odd number in terms of a subset of the sample space? Consider yet a new random experiment where you throw two coins, instead of one. What are the basic outcomes in this random experiment? What is the sample space in this case? How do these concepts look like when you throw two six sided dice instead of two coins?\n\n\n\n\n1.1.2 The role and nature of idealizations in applications\nIdealizations of the kind we discussed for the toss of a coin are standard in probability and we will encounter them again and again. For example the movement of a stock price is often though of as a conceptual random experiment. When we try to agree on what is the appropriate sample space of this experiment, we can say that the price can not fall below 0 but it is hard to agree on what will be the highest possible price. In the probabilistic treatment of stock prices, which we will discuss later in our course, it is for instance common to assume that the sample space of this random experiment is the entire interval of non-negative real numbers \\({\\cal S} = [0, \\infty)\\).\nMany of us would hesitate to claim that the price might rise without bound. Yet many models in applied Finance are based on such an assumption. The models allow arbitrary price hikes but with arbitrary small probability as the price gets higher and higher. Practically it does not make sense to believe that a security price can become arbitrarily high. The use of arbitrarily small probabilities in a financial model might seem absurd but it does no practical harm and makes the model simple and convenient to use. Moreover, if we seriously introduced an upper bound on a security price at \\(x\\) it would be also awkward to assume that it is impossible that it could be just a cent higher, an assumption equally unappealing than assuming it can get in principle arbitrarily high.\n\n\n1.1.3 Classical Probability: Measuring uncertainty\nProbability is a measure of how likely an event of an experiment is. But how could we measure chance? Here is the first big idea of probability theory and how the originators thought about it.1 How do you measure anything? If you think of length, for example, you take an arbitrary standard you agree on and then count. The originators of probability theory pursued the same idea with chance: To measure probability you choose equally probable cases and then count.\n1 In this discussion I use chapter 1 in Diaconis and Skyrms (2019)The probability of an event \\(A\\) according to the originators of the theory of probability is then \\[\\begin{equation}\nP(A) = \\frac{\\text{Number of cases where $A$ occurs}}{\\text{Total number of cases}}\n\\end{equation}\\]\nThus, if we want to know the probability of the coin ending up Heads, we have to compute according to this notion \\(1/2\\), since the total number of cases is 2 (Heads or Tails).\n\n\n\n\n\n\nNow you try\n\n\n\nConsider another random experiment of throwing a six sided die: According to the probability notion explained above what would be the chance that the die lands on on a face such that an even number is shown?. What would be the chance that in the random experiment of throwing two dice the sum of points would be 7? What is the chance that when rolling two six sided dice the sum is 2?\n\n\nNote that this classical notion of probability has a few interesting consequences, which we will discuss in more detail later but which already now naturally flow from this basic idea of measuring chance.\n\nProbability is never negative.\nIf an event \\(A\\) occurs in all cases \\(P(A)=1\\).\nIf \\(A\\) and \\(B\\) never occur in the same case, then \\(P(A \\,\\text{or}\\, B) = P(A) + P(B)\\).\n\nWhile rule 1. and 2. are intuitively fairly obvious (try to think of examples to convince yourself!), rule 3 might need some concrete explanation. The case described by rule 3 is often referred to as mutually exclusive events, i.e. they can not occur together.\n\n\n\n\n\n\nExample for rule 3:\n\n\n\nSuppose you have a standard deck of 52 playing cards, and you are interested in the probability of drawing a King \\(A\\) or a Queen \\(B\\).\n\nThe probability of drawing a King is \\(P(A) = \\frac{4}{52}\\), since there are 4 Kings in the deck.\nThe probability of drawing a Queen is \\(P(B) = \\frac{4}{52}\\), since there are also 4 Queens.\n\nSince a card cannot be both a King and a Queen, \\(A\\) and \\(B\\) are mutually exclusive events.\nThus, the probability of drawing a King or a Queen is: \\(P(A \\,\\text{or}\\, B) = P(A) + P(B) = \\frac{4}{52} + \\frac{4}{52} = \\frac{8}{52} = \\frac{2}{13}\\)\nThis illustrates how probabilities of mutually exclusive events add up.\n\n\nIn particular then the probability that an event does not occur is 1 less the probability that it occurs: \\(P(\\text{not}\\, A) = 1 - P(A)\\).\nNow let me show you how you can make use of a large language model, using ChatGPT as a use case, to support learning new concepts such as we have just introduced them here.\nWe have discussed new two classical and famous random experiments you will probably find in every textbook on probability. Assume you would like to deepen your understanding of these concepts and also consider more complex examples in particular from Finance. This is something the LLM is very good at. You could - for instance - ask ChatGPT at the prompt something like shown in Figure 1.2 :\n\n\n\n\n\n\n\n\nFigure 1.2: Figure 2: The ChatGPT prompt\n\n\n\n\n\nHere is an answer I would get for this prompt:\n\n\n\n\n\n\nAnswer by ChatGPT40\n\n\n\nHere are three detailed examples from finance to illustrate the concepts of a random experiment, sample space, basic outcomes, and events:\n\nExample 1: Daily Price Movement of a Stock\nRandom Experiment: Observe the daily price movement of a particular stock (e.g., Apple Inc.) at the close of the trading day.\n\nSample Space \\({\\cal S}\\): The set of all possible outcomes of the price movement. For simplicity, we can represent the sample space as: \\({\\cal S} = \\{ \\text{price increase, price decrease, no change} \\}\\)\nBasic Outcomes:\n\n“Price increases” (e.g., the stock closes higher than it opened).\n“Price decreases” (e.g., the stock closes lower than it opened).\n“No change” (e.g., the stock closes at the same price it opened).\n\nEvents:\n\nEvent \\(A\\): “The stock price increases.” \\(\\{ \\text{price increase} \\}\\)\nEvent \\(B\\): “The stock price either increases or remains unchanged.” \\(\\{ \\text{price increase, no change} \\}\\)\n\n\n\nExample 2: Credit Card Default Risk\nRandom Experiment: Assess whether a randomly selected credit card holder defaults on their monthly payment.\n\nSample Space \\({\\cal S}\\):\n\\(S = \\{\\text{default, no default} \\}\\)\nBasic Outcomes:\n\n“Default” (e.g., the cardholder fails to make the minimum payment).\n“No default” (e.g., the cardholder pays at least the minimum required).\n\nEvents:\n\nEvent \\(A\\): “The cardholder defaults.” ({default})\nEvent \\(B\\): “The cardholder does not default.” ({no default})\nEvent \\(C\\): “Default occurs for a customer from a specific demographic (e.g., under 30 years old).” This is a subset of the sample space but is conditioned on additional information.\n\n\n\nExample 3: Bond Ratings Transition\nRandom Experiment: Observe the change in the credit rating of a corporate bond over a year.\n\nSample Space \\({\\cal S}\\): The set of possible credit rating transitions. For example, using a simple rating scale: \\({\\cal S} = \\{\\text{AAA}, \\text{AA}, \\text{A}, \\text{BBB}, \\text{BB}, \\text{B}, \\text{CCC}, \\text{default} \\}\\)\nOver a year, the bond can transition from its initial rating to any of these, or stay the same.\nBasic Outcomes:\n\n“AAA to AAA” (no change in the highest credit quality).\n“BBB to BB” (downgrade).\n“A to default” (significant deterioration).\n\nEvents:\n\nEvent \\(A\\): “The bond is downgraded by one or more notches.” (Any outcome where the final rating is lower than the initial rating, e.g., {AAA to AA, A to BB}).\nEvent \\(B\\): “The bond defaults.” ({default}).\nEvent \\(C\\): “The bond remains investment-grade.” (All transitions where the final rating is AAA, AA, A, or BBB).\n\n\n\nThese examples show how the concepts apply to finance, helping to bridge the theoretical framework of probability with practical applications in the field. Would you like to dive deeper into any of these examples or extend them to computations like probabilities of events?\n\n\nLet us interrupt here our discussion of probability for a moment and ask how we can make good on our promise to make these ideas tangible, so we can play with them.\nFor this we will need the computer. Since we will talk to the computer in R, it is now the right time to look at the die rolling example from the perspective of R and dive into some of its basic concepts.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#tossing-coin-on-computer",
    "href": "01-lecture1.html#tossing-coin-on-computer",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.2 Tossing a coin on the computer: First steps in R",
    "text": "1.2 Tossing a coin on the computer: First steps in R\n\n1.2.1 The R User Interface\nBefore we can ask our tool to do anything for us, we need to know how to talk to it. In our case RStudio allows us to talk to our computer. It works like any other application. When you launch RStudio on your computer, in figure Figure 1.3 you see a screen looking like this:\n\n\n\n\n\n\n\n\nFigure 1.3: The RStudio startup screen\n\n\n\n\n\nIn this picture you see a screenshot of my RStudio screen. Interacting with the app is easy. You type commands via your keyboard at the prompt, which is the &gt; symbol. You find this symbol in the RStudio pane called Console. You can see it in the left pane in the screenshot. You send the command to the computer by pressing enter. After you have pressed enter, RStudio sends the command to R and displays the result of your command with a new prompt to enter new commands, like this:\n\n1+1\n\n[1] 2\n\n\nLet me pause to explain what you see here in this code example. First you see a light-gray box containing the command 1+1. This is an instance of a so called code chunk. Moving the cursor to the right upper corner of the chunk, will display a copy icon and you can click this icon to copy the code to the computer’s clipboard and then paste it at the prompt of your console (or for that matter anywhere else) and run it in R studio, if you wish. In the code-chunk the R-prompt &gt; is not displayed. This symbol of the prompt is only shown in the Console itself.\nThe [1] means that the line begins with the first value of your result. For example, if you enter the command 20:60 at the prompt of your console which means in the R language, “list all the integers from 20 to 60” and press enter you get:\n\n20:60\n\n [1] 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\n[26] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\n\nmeaning that 20 is the first value displayed in your result. Then there is a line break because not all values can be displayed on the same line and R tells you that 45 is the 26-th value of the result.\nThe colon operator : is a very useful function in R which we will need often. It allows us to create sequences of every integer between two given integers.\nR needs a complete command to be able to execute it, when the return key is pressed. Lets see what happens, if a command is incomplete, like for instance &gt; 5*.\nIn this case R will show the expression followed by a + instead of showing a new prompt. This means that the expression is incomplete. It expects more input. If we complete the expression, say like\n&gt; 5*\n+ 4\nthe expression can be evaluated and a new prompt is shown in the console.\nIf you type a command that R does not understand, you will be returned an error message. Don’t worry if you see an error message. It just is a way the computer tells you that he does not understand what you want him to do.\nFor instance, if you type 5%3 you will get an error message like this\n&gt; 5%3\nError: unexpected input in \"5%3\"\n&gt;\nSometimes it is obvious why a mistake occurred. In this case, that R just does not know what to do with the symbol %. It has no meaning in this context. Sometimes it is not so obvious what the error message actually means and what you might do about it.\nA useful strategy in this case is to type the error message into a search engine and see what you can find. The chance is very high that others encountered the same problem before you and got helpful advice how to fix it from other users on the internet. One site, we find particularly helpful for all kinds of questions related to R and R programming is https://stackoverflow.com/. Try it at the next opportunity. You can also show the error to the LLM prompt and ask how to fix it. In most cases chatGPT will give you a useful answer.\nNow with this basic knowledge, we can already make the first step to create a coin on the computer using R. If you think of a physical coin, the essential thing that matters is that it can show Heads or Tails. Lets encode Heads by 1 and Tails by 0. If you toss the coin it will usually land on one of these faces and the upward showing side of the coin shows the outcome of the toss. The colon operator : gives us a way to create a group of numbers from 0 to 1. R gives us the result as a one dimensional set of numbers.\n\n0:1\n\n[1] 0 1\n\n\nLets use these first steps in R to recap the probability concepts we have learned using this example of the six sided die: A basic outcome of tossing the coin is for example 1 if the upper side after tossing the coin happens to be Heads. The sample space of the experiment of tossing a coin is the set \\({\\cal S} = \\{0,1\\}\\). In probability theory we often use the symbol \\({\\cal S}\\) or \\(S\\) for sample space. In many probability texts the sample space is also often denoted by the symbol \\(\\Omega\\) the Greek letter for (big) Omega. A random experiment in this example is the tossing of the coin. The outcome is uncertain but once the coin is tossed the outcome can be determined precisely. The event that the outcome is a display of 2 is the empty set \\(A = \\emptyset\\). The symbol \\(\\emptyset\\) comes from set theory and means the set containing no elements. This event can contain no elements because we can not get any other number than 0 or 1 by tossing the coin.\n\n\n1.2.2 Objects\nYou can save data in R by storing them in objects. An object is a name, you can choose yourself to store data. For example, if you choose to store the value 1 in an object called Heads, you would type:\n\nHeads &lt;- 1\n\nat the prompt. R will the store the value 1 in the object called Heads, which you can use to refer to the value. If you type the name of your object at the prompt, R will display the value you have assigned. A useful key combination for typing the assignment operator &lt;- is to use the key combination ALT _. At the R prompt R will automatically print an assignment operator.\nNow if you type the name of the object and press enter, R will display the value or values stored in it, like this:\n\nHeads\n\n[1] 1\n\n\nNow you can use the name of the object to refer to its value. For instance, you could divide Heads by 2 and get a meaningful result\n\nHeads/2\n\n[1] 0.5\n\n\nNow to make our coin more tangible and useful, let us store it in an R object by typing the following command at the prompt. This command creates an object with name coin and assigns the vector 0,1 to it.\n\ncoin &lt;- 0:1\n\n\n\n\n\n\n\n\n\nFigure 1.4: The RStudio Environment pane keeps track of the objects you have created\n\n\n\n\n\nYou can now see in the right upper Environment pane in figure Figure 1.4 that R shows you that there is an object with the name coin that it consists of integers 0,1. As you create more objects they will be stored in the Environment pane and are ready for your reference, unless you delete them. You can remove or delete an object by typing rm(object) or by assigning the value coin &lt;- NULL which would also remove the object from your environment or workspace.\nYou can name your objects almost anything with a few exceptions. An object name must not start with a number. There are some special symbols which can also not be used in object names, like ^, !, $, @, +, -, /, *. Note that R is case sensitive and distinguishes small and big letters. If you assign a new value for an object you have already created, R will overwrite the object without warning.\nYou can see which objects are currently created and available for you in the Environment pane of your session of by typing ls(). The UNIX users among you will recognize this command from the unix shell, where it displays the files in a directory.\nBefore we learn how we can actually roll our die and perform a random experiment with it, let us briefly use the opportunity to explain a few things about how R does computations. We have already explained that we can use the object name to refer to the value. So for instance if we type\n\ncoin*coin\n\n[1] 0 1\n\n\nThis might irritate some of you because we have called the object a vector. In linear algebra multiplication of vectors is only allowed if there is an inner product. What happens here, if we use * the multiplication operator is that R does an element-wise multiplication of the six numbers of our die. Of course R allows to take an inner product as well, but this needs a different operator. To compute an inner product, we would type\n\ncoin %*% coin\n\n     [,1]\n[1,]    1\n\n\nNow R displays the result as a vectors with one row and one column, which is denoted in the output by [ , 1] for the column and [1, ] for the row. We will learn later more about the use and the meaning of this notation in R.\nThe element wise execution R usually uses also means that when you, for example type\n\ncoin + 1\n\n[1] 1 2\n\n\nR would subtract 1 from every component in the vector coin.\nAnother specific behavior of R, you need to know about is called recycling. If you give R two vectors of different length in an operation, R will repeat the shorter vector as long as it is of equal length with the longer one. For example, if you have:\n\ncoin + 1\n\n[1] 1 2\n\n\nyou see that R adds 1 to 0 and then starts over again by adding 1 to 1.\nIf the longer vectors is not a multiple of the shorter one, R recycles but the cuts off.2\n2 As of R version 4.2.0 (released in April 2022), the behavior regarding the recycling rule has changed. In older versions of R, a warning was issued when the length of one vector was not a multiple of the length of the other vector during arithmetic operations. The reasoning behind this change was to reduce unnecessary noise in the output. Many users found the warnings redundant in cases where the recycling rule was intentional and understood. However, this change means you need to be more cautious, as unexpected behavior might go unnoticed without the warning.\ncoin + 1:4\n\n[1] 1 3 3 5\n\n\nWhile this might seem awkward to some of you, we will see that for data manipulation element-wise execution is often extremely useful. It allows to manipulate groups of values in a systematic yet easy way.\n\n\n1.2.3 Functions\nR contains many functions which we can use to manipulate data and compute things. The syntax for using a function is very simple: You type the function name and put the value of the function argument in parentheses. Here we use for illustrations the function of the square root sqrt():\n\nsqrt(4)\n\n[1] 2\n\n\nor rounding a number:\n\nround(3.1415)\n\n[1] 3\n\n\nThe data you write in the parentheses are called the function arguments. Arguments can be all sorts of things: raw data, R objects, results from other functions.\nIf functions are nested, R evaluates the innermost function first and then goes on to the outer functions. To see examples of all these instances you can take\n\nnumbers &lt;- 1:7\nmean(numbers)\n\n[1] 4\n\nround(mean(numbers))\n\n[1] 4\n\n\nfor example.\nFor simulating random experiments, R has the very useful function sample(). With this function we can - for example - toss a coin on the computer and conduct actual random experiments.\nThe function takes as arguments a vector names x and a number named size. sample will return size elements randomly chosen from the vector x. Lets say:\n\nsample(x = 0:1, size = 1)\n\n[1] 0\n\n\nIn this case sample has chosen either 0 or 1 from the vector x = (0,1) at random.\nIf we want to toss the coin in our computer we can thus pass the coin as an argument to sample and use the number 1 for the size argument. Lets do a few tosses with our die\n\nsample(x = coin, size = 1)\n\n[1] 1\n\nsample(x = coin, size = 1)\n\n[1] 1\n\nsample(x = coin, size = 1)\n\n[1] 0\n\nsample(x = coin, size = 1)\n\n[1] 1\n\n\nThese are the random outcomes of our consecutive tosses. It is as if we had thrown an actual coin but in this case we have done the same thing on the computer. Isn’t it cool that this is possible at all? The sample() function will remain our good friend throughout this course.\nR functions can have many arguments, but they need to be separated by a comma.\nEvery argument in every function has a name. We specify which data are assigned to the arguments by setting a mathematical equal sign = between the name and the data. Names help us to avoid passing the wrong data and thereby mixing up things or committing errors. But using names is not necessary. If we just wrote\n\nsample(coin,1)\n\n[1] 1\n\n\nR would also know what to do. It is not always clear which names to use for a function. If you are not sure, you can use the function args() to look it up. Here we take the function roundas one example.\n\nargs(round)\n\nfunction (x, digits = 0, ...) \nNULL\n\n\nNote that the digits argument in the round function is already set to 0. Frequently R functions come with optional arguments. These arguments are optional because the come with a default value, which is 0 in case of the round function.\nWe recommend that you write out argument names as a rule. It gives clearer code and avoids errors. If you don’t write argument names, R matches your values to the arguments of the function by order.\n\n\n1.2.4 Writing your own functions\nNow we are ready to write our own function to toss the coin in our computer. Each function in R has the same elements: A name, a function body of code and a set of arguments. To write your own function, you have to write up all of these parts and save them in an R object. The syntax is:\nmy_function &lt;- function() {}\n\nThe name here is my_function, next comes the expression function() which needs to be assigned. The names of the function arguments have to be written between the parentheses. Then we have to write the actual code within the braces {}.\nTo do this for the die, lets write a function named toss_coin.\n\ntoss_coin &lt;- function(){coin &lt;- 0:1 \n                         sample(coin, size = 1)}\n\nNow we can toss our coin for a few times to show how the function works\n\ntoss_coin()\n\n[1] 1\n\ntoss_coin()\n\n[1] 0\n\ntoss_coin()\n\n[1] 0\n\ntoss_coin()\n\n[1] 0\n\ntoss_coin()\n\n[1] 1\n\n\nNote that in our function toss_coin() has no arguments, just the function body. This is perfectly legitimate in R. It is important that when we call the function we have to call it with the parenthesis like toss_coin(). If we only call the name toss_coin, R will display the code in the function body.\nA final remark in the sample function is in place here. If we look at the arguments of sample using the args function we see\n\nargs(sample)\n\nfunction (x, size, replace = FALSE, prob = NULL) \nNULL\n\n\nLets do not discuss all the details of this output but concentrate for a moment on the replace argument. What does this mean?\nAs we saw previously we can use the sample function to model the rolling of our die. If we set the size argument to 1 we get the toss of one coin. If we set the size argument to n, we would simulate the tossing of n coins. But now the replace argument becomes crucial. As we can see in the output of the args function replace has a default value FALSE. This is a logical argument. It tells R, for example, that if we set size = 2, meaning that two coins are tossed, if the first coin shows, say Heads - a value of 1- the coin die cannot show Heads as well.\nThis is clearly not what we have in mind when we model the tossing of two coins. It should be possible that both coins show the same value. To enable this behavior of the sample function, we have to change the default value of the replace argument to TRUE. Then R chooses a random draw from all of the six possible values for all dice rolled.\nCongratulations ! You have written your first R function for conducting a simple random experiment. Let me remind you once again: Think of the parentheses as a trigger that tells R to run the function. If you omit the trigger R just prints the body of the function. When you run a function, all the code in the function body is executed and R returns the result of the last line of code. If the last line of code does not return a value neither will R.\n\n\n\n\n\n\nNow you try\n\n\n\nConsider another random experiment of throwing a six sided die. Use the concepts learned in this section to write a function which simulates the rolling of a six sided die. Write a function to simulate the throwing of two dice. Think about how to set the replace argument in the sample function in this case. Use R’s help function to learn about the role of the replace argument. Alternatively ask the LLM to explain the use of replace in R’s sample function. You can also ask for examples or demonstrations what goes wrong when this argument is parametrized in the wrong way.\n\n\n\n\n1.2.5 Arguments\nImagine we remove the first line of code in our function body and changed the name die in the sample function to “ball”.\n\ntoss_coin2 &lt;- function(){sample(ball, size = 1)}\n\nIf we call the function now, we will get an error. The function call roll_die2() will result in the error message Error in sample(ball, size = 1) : object 'ball' not found (try it!)\nWe could supply ball when we call toss_coin2 if we make ball an argument of the function. Lets do this:\n\ntoss_coin2 &lt;- function(ball){sample(ball, size = 1)}\n\nNow the function will work as long as we supply ball when we call the function.\n\ntoss_coin2(ball = 0:1)\n\n[1] 1\n\n\nNote that we still get an error, if we forget to supply ball argument. This could be avoided if we give the function a default argument\n\ntoss_coin2 &lt;- function(ball= 0:1){sample(ball, size = 1)}\n\nNow if we type:\n\ntoss_coin2()\n\n[1] 0\n\n\neverything works, just as intended.\n\n\n1.2.6 Scripts\nSo far we have worked by interacting with the console. But what if you want to edit your functions? It would be much easier, if you could use a draft of your code and work form there. This can be done by using a script.\nYou create a script by going to File &gt; New File &gt; R script in the menu bar of RStudio. Using scripts is the standard way to write code in R. It not only helps you to keep track of your code, save it and edit it later. It also makes your work reproducible. You can edit and proofread your code and share it with others. To save your script go to File &gt; Save As in the menu bar.\n\n\n\n\n\nThe RStudio Script\n\n\n\n\nRStudio has many useful features to help you work with scripts. You can for instance automatically execute a line in a code by using the run button. You can also execute sections of code or the entire script. The entire script is executed by running the Source button. For all these commands there are key short cuts which you will learn as you work more with RStudio and R.\nFrom now on you should write all your R-code for this course in scripts. Make a new folder for the scripts you write and store your R-code there from now on.\n\n\n1.2.7 Using Quarto Documents\nQuarto documents provide an elegant way to combine explanatory text, R code, and the resulting output in one cohesive file. This makes them especially useful for documenting your learning process, conducting reproducible research, or preparing assignments.\nLet’s walk through how to use a Quarto document to write down and experiment with your coin-tossing function.\n\nCreating a New Quarto Document: To begin, create a new Quarto document in RStudio by navigating to File &gt; New File &gt; Quarto Document.... You will see a popup window allowing you to type a title for the document and your name. It also allows you to select a format for your document. Choose the HTML format for now, as it allows easy preview in your browser, and click the Create button The popup window will look something like this:\n\n\n\n\n\n\nThe quarto pop up window\n\n\n\n\n\nUnderstanding the Quarto Layout: The new Quarto document will have a YAML header at the top, which might look like this:\n\n\n\n\n\n\nThe quarto yaml header\n\n\n\n\nBelow this header, you will see some example text and R code chunks. Replace the example content with your own text and code.\n\nAdding the Coin Tossing Function: In your Quarto document, you can explain your approach to creating the coin-tossing function, and include the code in a code chunk.\nHere’s an example:\n\n\n\n\n\n\nCombining text and code in quarto documents\n\n\n\n\n\nRunning and Compiling the Document: Once you have written your text and code, save your document. You can execute the R code directly within the Quarto document. To run a code chunk, click the green play button in the upper-right corner of the chunk or use the shortcut Ctrl + Shift + Enter (Windows) or Cmd + Shift + Enter (Mac).\nAfter executing your code, you can compile the document into a readable output format by clicking the Render button or using the shortcut Ctrl + Shift + K (Windows) or Cmd + Shift + K (Mac).\n\nThere is of course a lot you can do to enhance your quarto documents. For example the lecture notes you are reading now are all written and composed in quarto as are the lecture slides.\nBy using Quarto documents, you can create well-documented, interactive code files that are both functional and easy to share with others. You can use quarto indpendently from R and combine it with other languages like phyton or julia. Ceck out: https://quarto.org/\n\n\n1.2.8 Using packages and finding Help\nWe have now a function which we can use to simulate the tossing of a coin, coin_toss(). If the coin is fair it should be the case that if we toss the coin often, Heads and Tails should occur about equally often. The coin should not be weighted in favor of a particular value.\nOne way to learn whether our coin is fair are repetition and visualization. These are tools we will need all the time, when working with data and when doing probability. While R has many useful functions, one of the great powers is that R is constantly extended by a huge community of users by providing packages.\nPackages are add on functions, which will not be available when you install R. They need to be installed and loaded before you can use them. Since packages are such a powerful tool in R we need to introduce what they are and how to use them in the beginning.\n\n\n1.2.9 Packages\nThere are many visualization tools in R that come with the basic installation. Since the point we want to make here is about packages, we will use a visualization function which is part of the add on package ggplot2, a very popular package for making all kinds of graphs. ggplot2 is not part of the base-R distribution. It has to be therefore loaded before we can use it.\nThere are many additional functions provided with this package. Indeed you could run a whole course on just that 3\n3 A very good starting point is for instance Healy (2019), in case you are interested. Also a good source is the first chapter in Wickham and Grolemund (2017).Since we want to use functios now which are not in the base R distribution. we need to load the package which provides the functions we want. In this example we use the package ggplot2.\nWhen we use a package for the first time it needs to be installed. Once installed it does not have to be reinstalled when we use it at later coding sessions again.\nTo install a package you need to be connected to the internet. If you have internet connection go to the command line and run at the command line: install.packages(\"ggplot2\").\nR displays what is happening while executing the command. Don’t worry if you don not know what all of these messages exactly mean and don’t panic that they are displayed in red. All packages can be installed like this. You have just to enter the correct name in the function install.packages(). The lower right pane in the RStudio software alternatively provides a tab called Packages. Using this tab, you can also install R packages interactively by clicking the install button on the upper left corner of the Packages tab.\nAfter installation the package is on our hard-drive but it can not yet be used. To use the package it has to be loaded. This is done with the command library. To load the ggplot2 package we type\n\nlibrary(\"ggplot2\")\n\nand hit the return key. Many things could be said about the R package system and you will learn it in more detail as we go along in our course. For the moment the most important thing to remember is that a package needs to be newly loaded whenever you want to use it in a new R session.\nTo check whether our coin is fair, we need to toss it many times. R provides a function, that does this for us. This function is called replicate() and provides an easy way to repeat a command many times. The number of times we want to repeat something is given as an argument to the replicate function.\nNow lets roll our die 100 times and save the result in an object we call tosses:\n\nset.seed(123)\ntosses &lt;- replicate(100, toss_coin())\n\nThe function set.seed() I used here with the argument 123 is just a device to make this experiment reproduceable. If this function is not used, each new run of the 100 replications would show a different outcome.\nI now show you a code for visualizing this outcome. The code contains some concepts that we did not yet discuss. Don’t worry. We will learn them soon. The point here is to shwo you how we use the functions of the package to produce a visualization of the outcome of our 100 coin tosses.\n\n# Create a data frame for plotting\ntosses_df &lt;- data.frame(\n  Outcome = factor(tosses, levels = c(0, 1), labels = c(\"Tails\", \"Heads\"))\n)\n\n# Plot the results using ggplot2\nggplot(tosses_df, aes(x = Outcome)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(\n    title = \"Occurrences of Heads and Tails\",\n    x = \"Outcome\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nIt looks like every value occurred roughly 50 times but there is still quite some variation. Tail occured fewer times than Heads.\nMaybe we have to give it another trial with more replications. With the computer we can do this with a fingertip. Let us roll our die 1000 times and plot the result.\nHere is how we would code this by recycling the code used before.\n\nset.seed(123)\ntosses &lt;- replicate(1000, toss_coin())\n\n# Create a data frame for plotting\ntosses_df &lt;- data.frame(\n  Outcome = factor(tosses, levels = c(0, 1), labels = c(\"Tails\", \"Heads\"))\n)\n\n# Plot the results using ggplot2\nggplot(tosses_df, aes(x = Outcome)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(\n    title = \"Occurrences of Heads and Tails\",\n    x = \"Outcome\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nNow it looks much better: Each face comes up approximately 500 times. We will learn in our course why the picture get better as we increase the number of rolls of the die. For the moment, let us just state that at least for this case it seems that there is no significant visual evidence that our virtual die is loaded.\nBut wait a minute. We have introduced the idea of classical probability by constructing equally probable cases and then count. Here we have repeated a random experiment over and over again to draw some conclusion on the underlying probabilities by visualizing the frequency polts of outcomes? These ideas are connected. We have just informally introduced a new idea in probability, the relative frequency notion of probability. How the two concepts are related and why this notion makes sense we will learn more formally in the next lecture. For the moment let’s just stick with the idea that practitioners have used at all times to assess probabilities by looking at frequencies of particular events occurring. When and why this kind of reasoning about probability works we learn in the next lecture.\n\n\n\n\n\n\nTip for R novices: How to leverage the LLM to enhance understanding\n\n\n\nLet me give you a hint here how you could use the LLM to enhance your learning experience in another way. The students usually taking this bootcamp class have very different backgrounds. Some have much experience with programming but perhaps not necessarily in R. Many of you will - for example - know Python, because most of the MQF is taught and run with Python. In such a case you could use the LLM to translate the R code into Python and then compare.\nOr assume you are impatient and want to jump ahead by having somebody explaining you the ggplot2 code we used for the plotting function. Ask the LLM to explain you the R code and what it does, and I assure you you will get a pretty good and well explained answer.\nTry it!\n\n\n\n\n1.2.10 Getting Help\nWe have now learned a tiny number of R functions and we have written one function ourselves. We have learned how to make use of functions provided by packages.\nIt would be overwhelming to memorize and learn them all. In R, fortunately, every function comes with a detailed documentation and with its own help page. You need to learn how to use this source right from the beginning.\nTo access the help page of a function you type the function name preceded by a question mark at the prompt, like this\n\n?sample\n\nThen, after you have pressed the return key, a help page is opened in the right lower pane under the help tab as shown in Figure 1.5\n\n\n\n\n\n\n\n\nFigure 1.5: The Help-pane in RStudio\n\n\n\n\n\nThis help page has a particular structure that you will find for every other R function no matter whether it is provided by the base installation or by a package. In the upper left corner you see the name of the function (sample) and in curly brackets next to it the term base, which means that this is a function in the R base installation. Then you see a headline about what the function does.\nFrom the top of the page, you then first see the field Description. This is a short description what the function does. Here it says\nDescription\nsample takes a sample of the specified size from the elements of x using either with or without replacement.\nThe next field is Usage. It gives you the function description with the arguments. Here for example\nUsage\nsample(x, size, replace = FALSE, prob = NULL)\n\nsample.int(n, size = n, replace = FALSE, prob = NULL,\n           useHash = (!replace && is.null(prob) && size &lt;= n/2 && n &gt; 1e7))\n           \nThe first line in Usage should by now be familiar. Don’t worry about the second line. The function can obviously do more than we know so far.\nNext comes a list of arguments the function takes and what type of information R expects you to provide, as well as what R will do with this information. Here it says for example\nArguments\nx   \neither a vector of one or more elements from which to choose, or a positive integer. See ‘Details.’\n\nn   \na positive number, the number of items to choose from. See ‘Details.’\n\nsize    \na non-negative integer giving the number of items to choose.\n\nreplace \nshould sampling be with replacement?\n\nprob    \na vector of probability weights for obtaining the elements of the vector being sampled.\n\n...\n\nWe omit some information here.\nThen comes a field called Details which gives a more in-depth description of the function. The next field is called Value. It describes what the function returns when you run it. Then we have a reference to related R functions under the field See. Finally there is a field called Examples. This field contains example code that is guaranteed to work. It shows a couple of different cases how you can use the function in practice.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#introduction-real-world-importance-of-unique-identifiers-in-finance",
    "href": "01-lecture1.html#introduction-real-world-importance-of-unique-identifiers-in-finance",
    "title": "1  First probability ideas and first steps in R",
    "section": "2.1 Introduction: Real-World Importance of Unique Identifiers in Finance",
    "text": "2.1 Introduction: Real-World Importance of Unique Identifiers in Finance\nIn modern financial systems, every transaction is assigned a unique identifier, allowing stakeholders to track, verify, and manage transaction details efficiently. These identifiers are critical for maintaining transparency, accountability, and security across high-volume transaction systems. However, as the volume of transactions grows, the risk of identifier collisions—where two different transactions are assigned the same identifier—increases.\nThis issue is analogous to the birthday problem: as the number of transactions increases, the likelihood of collisions rises due to the combinatorial nature of the problem. A collision could result in processing errors or even security vulnerabilities, such as fraudulent transactions or misattribution of funds.\nTo mitigate such risks, many financial systems employ hash functions, such as the widely used SHA-256, to map data to a large space of possible outputs. These hash functions, with their vast output range (e.g., $2^{256}), make collisions extremely unlikely, even for billions of transactions. By understanding the principles behind collision probabilities, financial institutions can design systems that maintain transaction integrity even under high workloads.\nIn this project, we will explore this critical aspect of financial systems by simulating transaction identifiers and analyzing collision probabilities. This exercise demonstrates how theoretical probability concepts translate directly to practical challenges in computational finance.8\n8 For more information and details you might want to check this source: https://www.hostmerchantservices.com/articles/what-are-transaction-ids/?utm_source=chatgpt.comIn this project, you will:\n\nSimulate a system assigning transaction identifiers.\nInvestigate the probability of identifier collisions under different scenarios.\nDiscuss implications for system design and security.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#simulate-transaction-identifiers",
    "href": "01-lecture1.html#simulate-transaction-identifiers",
    "title": "1  First probability ideas and first steps in R",
    "section": "2.2 Simulate transaction identifiers",
    "text": "2.2 Simulate transaction identifiers\n\nWrite a function to simulate transaction identifiers, where each identifier is randomly chosen from a pool of size \\(M\\) (e.g. \\(M = 10^6\\) or \\(M = 10^9\\))\nUsing your function, simulate \\(n\\) transactions and check for duplicates using R’s duplicated() function.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#compute-collision-probabilities",
    "href": "01-lecture1.html#compute-collision-probabilities",
    "title": "1  First probability ideas and first steps in R",
    "section": "2.3 Compute collision probabilities",
    "text": "2.3 Compute collision probabilities\n\nSimulate nn transactions multiple times and estimate the collision probability as the fraction of simulations with at least one collision.\nUse this function to compute the collision probability for \\(n = 10^3, n = 10^6, n = 10^9\\) and \\(M = 10^6, M = 10^9\\)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#visualize-the-results",
    "href": "01-lecture1.html#visualize-the-results",
    "title": "1  First probability ideas and first steps in R",
    "section": "2.4 Visualize the results",
    "text": "2.4 Visualize the results\nPlot the collision probability as a function of nn for different values of \\(M\\). We did not cover Rs plotting functions in the lecture so far. We only showed some examples which we did not explain. But we explained how you could research R’s help system and how you could ask an LLM for help. With any of these resources you should be able to come up with some reasonable visualization.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#investigate-the-system-design",
    "href": "01-lecture1.html#investigate-the-system-design",
    "title": "1  First probability ideas and first steps in R",
    "section": "2.5 Investigate the system design",
    "text": "2.5 Investigate the system design\n\nReflect on how the size of the pool \\(M\\) influences the collision risk.\nWhat happens when the transaction volume \\(n\\) increases significantly?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#financial-implications",
    "href": "01-lecture1.html#financial-implications",
    "title": "1  First probability ideas and first steps in R",
    "section": "2.6 Financial implications",
    "text": "2.6 Financial implications\n\nImagine a financial institution processing transactions with \\(M=10^6\\) identifiers.\nIf the daily transaction volume grows to \\(n=10^5\\), what is the risk of a collision?\nDiscuss potential consequences of a collision (e.g., failed transactions, fraud risks) and propose ways to mitigate these risks (e.g., increasing \\(M\\), using hash functions).\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nHealy, Kirean. 2019. Data Visualization: A Practical Introduction. Princeton University Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://r4ds.had.co.nz/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#project-1-detecting-collisions-in-financial-transactions",
    "href": "01-lecture1.html#project-1-detecting-collisions-in-financial-transactions",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.5 Project 1: Detecting collisions in financial transactions",
    "text": "1.5 Project 1: Detecting collisions in financial transactions\n\n1.5.1 Introduction: Real-World Importance of Unique Identifiers in Finance\nIn modern financial systems, every transaction is assigned a unique identifier, allowing stakeholders to track, verify, and manage transaction details efficiently. These identifiers are critical for maintaining transparency, accountability, and security across high-volume transaction systems. However, as the volume of transactions grows, the risk of identifier collisions—where two different transactions are assigned the same identifier—increases.\nThis issue is analogous to the birthday problem: as the number of transactions increases, the likelihood of collisions rises due to the combinatorial nature of the problem. A collision could result in processing errors or even security vulnerabilities, such as fraudulent transactions or misattribution of funds.\nTo mitigate such risks, many financial systems employ hash functions, such as the widely used SHA-256, to map data to a large space of possible outputs. These hash functions, with their vast output range (e.g., $2^{256}), make collisions extremely unlikely, even for billions of transactions. By understanding the principles behind collision probabilities, financial institutions can design systems that maintain transaction integrity even under high workloads.\nIn this project, we will explore this critical aspect of financial systems by simulating transaction identifiers and analyzing collision probabilities. This exercise demonstrates how theoretical probability concepts translate directly to practical challenges in computational finance.8\n8 For more information and details you might want to check this source: https://www.hostmerchantservices.com/articles/what-are-transaction-ids/?utm_source=chatgpt.comIn this project, you will:\n\nSimulate a system assigning transaction identifiers.\nInvestigate the probability of identifier collisions under different scenarios.\nDiscuss implications for system design and security.\n\n\n\n1.5.2 Simulate transaction identifiers\n\nWrite a function to simulate transaction identifiers, where each identifier is randomly chosen from a pool of size \\(M\\) (e.g. \\(M = 10^6\\) or \\(M = 10^9\\))\nUsing your function, simulate \\(n\\) transactions and check for duplicates using R’s duplicated() function.\n\n\n\n1.5.3 Compute collision probabilities\n\nSimulate nn transactions multiple times and estimate the collision probability as the fraction of simulations with at least one collision.\nUse this function to compute the collision probability for \\(n = 10^3, n = 10^6, n = 10^9\\) and \\(M = 10^6, M = 10^9\\)\n\n\n\n1.5.4 Visualize the results\nPlot the collision probability as a function of nn for different values of \\(M\\). We did not cover Rs plotting functions in the lecture so far. We only showed some examples which we did not explain. But we explained how you could research R’s help system and how you could ask an LLM for help. With any of these resources you should be able to come up with some reasonable visualization.\n\n\n1.5.5 Investigate the system design\n\nReflect on how the size of the pool \\(M\\) influences the collision risk.\nWhat happens when the transaction volume \\(n\\) increases significantly?\n\n\n\n1.5.6 Financial implications\n\nImagine a financial institution processing transactions with \\(M=10^6\\) identifiers.\nIf the daily transaction volume grows to \\(n=10^5\\), what is the risk of a collision?\nDiscuss potential consequences of a collision (e.g., failed transactions, fraud risks) and propose ways to mitigate these risks (e.g., increasing \\(M\\), using hash functions).\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nHealy, Kirean. 2019. Data Visualization: A Practical Introduction. Princeton University Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://r4ds.had.co.nz/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#exercises-and-project",
    "href": "01-lecture1.html#exercises-and-project",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.5 Exercises and Project:",
    "text": "1.5 Exercises and Project:\n\n1.5.1 Exercises\n\n1.5.1.1 Exercise 1: Simulate Rolling Two Dice\n\nWrite a function to simulate rolling a pair of dice. Each die produces a random number between 1 and 6. The function should return the sum of the two dice.\nSimulate 10,000 rolls and store the results. Use table() to compute the frequencies of each sum and visualize the results with a histogram.\nCreate a histogram. Use the help function of R to find out how to do this.\n\n\n\n1.5.1.2 Exercise 2: Analyze the Fairness of Dice\n\nCompute the theoretical probabilities of all possible outcomes (sums from 2 to 12) for fair dice. Recall that each outcome corresponds to different combinations of the two dice.\nCompare the theoretical probabilities to the simulated frequencies. Are the dice fair? Justify your conclusion.\n\n\n\n1.5.1.3 Exercise 3: Simulate Loaded Dice\n\nAssume the dice are “loaded” such that numbers 1, 2, 3, 4, and 5 have probabilities of ( ), while 6 has a probability of ( ).\nModify your simulation using the prob argument in sample() to reflect these probabilities.\nSimulate 10,000 rolls of the loaded dice and visualize the results. How does the distribution of sums change compared to fair dice?\n\n\n\n1.5.1.4 Exercise 4: The Probability of Specific Sums\n\nUsing your theoretical understanding of the sample space, calculate the probabilities of:\n\nRolling a sum of 7.\nRolling a sum of 2.\nRepeat for both fair and loaded dice.\n\nVerify your theoretical results with your simulations.\n\n\n\n1.5.1.5 Exercise 5: Evaluating a Betting Strategy\n\nImagine you are at a casino with fair dice. You have €150 to spend, and each bet on the sum of 7 costs €0.15. If you win, the casino pays €1. Otherwise, you lose your bet.\nSimulate 1,000 bets on the sum of 7:\n\nCalculate the total amount you win or lose.\nRepeat the simulation 10,000 times to estimate the expected profit or loss.\n\n\n\nIs betting on 7 a good strategy? Why, why not?\n\n\n\n1.5.1.6 Exercise 6: Explore Alternative Scenarios\n\nAssume the casino uses loaded dice (as defined earlier) instead of fair dice. How does this change your betting strategy and expected profit? Perform the simulation again under these conditions.\n\n-Reflect on the importance of fairness in games of chance and how loaded dice impact the house advantage.\n\n\n\n1.5.2 Project 1: Detecting collisions in financial transactions\n\n1.5.2.1 Introduction: Real-World Importance of Unique Identifiers in Finance\nIn modern financial systems, every transaction is assigned a unique identifier, allowing stakeholders to track, verify, and manage transaction details efficiently. These identifiers are critical for maintaining transparency, accountability, and security across high-volume transaction systems. However, as the volume of transactions grows, the risk of identifier collisions—where two different transactions are assigned the same identifier—increases.\nThis issue is analogous to the birthday problem: as the number of transactions increases, the likelihood of collisions rises due to the combinatorial nature of the problem. A collision could result in processing errors or even security vulnerabilities, such as fraudulent transactions or misattribution of funds.\nTo mitigate such risks, many financial systems employ hash functions, such as the widely used SHA-256, to map data to a large space of possible outputs. These hash functions, with their vast output range (e.g., $2^{256}), make collisions extremely unlikely, even for billions of transactions. By understanding the principles behind collision probabilities, financial institutions can design systems that maintain transaction integrity even under high workloads.\nIn this project, we will explore this critical aspect of financial systems by simulating transaction identifiers and analyzing collision probabilities. This exercise demonstrates how theoretical probability concepts translate directly to practical challenges in computational finance.9\n9 For more information and details you might want to check this source: https://www.hostmerchantservices.com/articles/what-are-transaction-ids/?utm_source=chatgpt.comIn this project, you will:\n\nSimulate a system assigning transaction identifiers.\nInvestigate the probability of identifier collisions under different scenarios.\nDiscuss implications for system design and security.\n\n\n\n1.5.2.2 Simulate transaction identifiers\n\nWrite a function to simulate transaction identifiers, where each identifier is randomly chosen from a pool of size \\(M\\) (e.g. \\(M = 10^6\\) or \\(M = 10^9\\))\nUsing your function, simulate \\(n\\) transactions and check for duplicates using R’s duplicated() function.\n\n\n\n1.5.2.3 Compute collision probabilities\n\nSimulate nn transactions multiple times and estimate the collision probability as the fraction of simulations with at least one collision.\nUse this function to compute the collision probability for \\(n = 10^3, n = 10^6, n = 10^9\\) and \\(M = 10^6, M = 10^9\\)\n\n\n\n1.5.2.4 Visualize the results\nPlot the collision probability as a function of nn for different values of \\(M\\). We did not cover Rs plotting functions in the lecture so far. We only showed some examples which we did not explain. But we explained how you could research R’s help system and how you could ask an LLM for help. With any of these resources you should be able to come up with some reasonable visualization.\n\n\n1.5.2.5 Investigate the system design\n\nReflect on how the size of the pool \\(M\\) influences the collision risk.\nWhat happens when the transaction volume \\(n\\) increases significantly?\n\n\n\n1.5.2.6 Financial implications\n\nImagine a financial institution processing transactions with \\(M=10^6\\) identifiers.\nIf the daily transaction volume grows to \\(n=10^5\\), what is the risk of a collision?\nDiscuss potential consequences of a collision (e.g., failed transactions, fraud risks) and propose ways to mitigate these risks (e.g., increasing \\(M\\), using hash functions).\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nHealy, Kirean. 2019. Data Visualization: A Practical Introduction. Princeton University Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://r4ds.had.co.nz/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "index.html#using-an-llm-to-enhance-your-learning-experience",
    "href": "index.html#using-an-llm-to-enhance-your-learning-experience",
    "title": "An Introduction to Probability",
    "section": "Using an LLM to Enhance Your Learning Experience",
    "text": "Using an LLM to Enhance Your Learning Experience\nIn these lectures I try to help you building experience how to integrate large language models or LLMs into your learning and study process as well as to support you in coding and programming. There are several such models currently on the market. For this course I will use openAI’s chatGPT as a tool. ChatGPT is available in a free version and in an enhanced pay-version.\nThroughout this course, you’ll learn how to use ChatGPT to support your studies. As a tool, it offers capabilities that can make learning probability more interactive and engaging. Here’s how you can leverage it:\n\nClarify Concepts:\nAsk ChatGPT to explain concepts in simple terms or elaborate on topics you find difficult:\n\n“Explain the concept of a probability distribution with an example.”\n\nGenerate Examples:\nUse it to create additional examples for practice:\n\n“Can you give me an example of a random variable and how it applies in finance?”\n\nDebug R Code:\nIf you encounter issues with your R code, paste the code and ask:\n\n“Why does this R code not run, and how can I fix it?”\n\nPractice Exercises:\nRequest custom exercises:\n\n“Create three exercises to practice calculating probabilities for dice rolls.”\n\nSimulate Interactive Discussions:\nSimulate discussions with ChatGPT to test your understanding:\n\n“I think the variance of a constant is zero. Am I correct? Explain why or why not.”\n\nLearn Best Practices in R:\nAsk for tips to improve your coding practices:\n\n“What are the best practices for writing clean and efficient R code?”\n\n\nImportant Note:\nWhile ChatGPT is a powerful learning tool, remember to verify the outputs, especially for complex calculations, and always critically evaluate its suggestions. One such tool you might consider for cross checking is Wolfram | Alpha, which you can find here: https://www.wolframalpha.com/ in a free version.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01-lecture1.html#project-designing-transaction-identifyers-for-digital-payment-systems",
    "href": "01-lecture1.html#project-designing-transaction-identifyers-for-digital-payment-systems",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.5 Project: Designing transaction identifyers for digital payment systems",
    "text": "1.5 Project: Designing transaction identifyers for digital payment systems\n\n1.5.1 Introduction: Real-World Importance of Unique Identifiers in Finance\nIn modern financial systems, every transaction is assigned a unique identifier, allowing stakeholders to track, verify, and manage transaction details efficiently. These identifiers are critical for maintaining transparency, accountability, and security across high-volume transaction systems. However, as the volume of transactions grows, the risk of identifier collisions—where two different transactions are assigned the same identifier—increases.\nThis issue is analogous to the birthday problem: as the number of transactions increases, the likelihood of collisions rises due to the combinatorial nature of the problem. A collision could result in processing errors or even security vulnerabilities, such as fraudulent transactions or misattribution of funds.\nTo mitigate such risks, many financial systems employ hash functions, such as the widely used SHA-256, to map data to a large space of possible outputs. These hash functions, with their vast output range (e.g., \\(2^{256}\\)), make collisions extremely unlikely, even for billions of transactions. By understanding the principles behind collision probabilities, financial institutions can design systems that maintain transaction integrity even under high workloads.\nIn this project, we will explore this critical aspect of financial systems by simulating transaction identifiers and analyzing collision probabilities. This exercise demonstrates how theoretical probability concepts translate directly to practical challenges in computational finance.9\n9 For more information and details you might want to check this source: https://www.hostmerchantservices.com/articles/what-are-transaction-ids/?utm_source=chatgpt.comIn this project, you will:\n\nSimulate a system assigning transaction identifiers.\nInvestigate the probability of identifier collisions under different scenarios.\nDiscuss implications for system design and security.\n\n\n\n1.5.2 Simulate transaction identifiers\n\nWrite a function to simulate transaction identifiers, where each identifier is randomly chosen from a pool of size \\(M\\) (e.g. \\(M = 10^6\\) or \\(M = 10^9\\))\nUsing your function, simulate \\(n\\) transactions and check for duplicates using R’s duplicated() function.\n\n\n\n1.5.3 Compute collision probabilities\n\nSimulate nn transactions multiple times and estimate the collision probability as the fraction of simulations with at least one collision.\nUse this function to compute the collision probability for \\(n = 10^3, n = 10^6, n = 10^9\\) and \\(M = 10^6, M = 10^9\\)\n\n\n\n1.5.4 Visualize the results\nPlot the collision probability as a function of nn for different values of \\(M\\). We did not cover Rs plotting functions in the lecture so far. We only showed some examples which we did not explain. But we explained how you could research R’s help system and how you could ask an LLM for help. With any of these resources you should be able to come up with some reasonable visualization.\n\n\n1.5.5 Investigate the system design\n\nReflect on how the size of the pool \\(M\\) influences the collision risk.\nWhat happens when the transaction volume \\(n\\) increases significantly?\n\n\n\n1.5.6 Financial implications\n\nImagine a financial institution processing transactions with \\(M=10^6\\) identifiers.\nIf the daily transaction volume grows to \\(n=10^5\\), what is the risk of a collision?\nDiscuss potential consequences of a collision (e.g., failed transactions, fraud risks) and propose ways to mitigate these risks (e.g., increasing \\(M\\), using hash functions).\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nHealy, Kirean. 2019. Data Visualization: A Practical Introduction. Princeton University Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://r4ds.had.co.nz/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html",
    "href": "02-lecture2.html",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "",
    "text": "2.1 Terminology\nProbability is a mathematical theory that provides a rigorous framework for understanding uncertainty. It is particularly useful when analyzing real-world phenomena, such as random sampling in surveys or fluctuations in stock prices.\nLet us now formalize the foundational concepts of this theory:\nTo clarify this concept, we define uncertain outcomes in advance. We pin down the possible outcomes by agreeing on the outset what we want to consider as the possible outcomes. Take the simple example of considering whether the price of a stock is going to rise or fall at the next day. In a practical situations the outcome of a move in the stock price can be that it rises or falls but it could in principle also stay the same. Still when we think about the experiment of observing the stock price tomorrow in many applications in Finance we usually agree that rise and fall are the only possible outcomes of this experiment. When we want to consider the random experiment that includes the case that the price stays the same we need to agree upfront the the possible outcomes are rise, fall and unchanged.\nThis collection of all possible outcomes in probability theory is called the\nIn the example before when we look at rises and falls in the stock price we would have \\({\\cal S} = \\{rise, fall \\}\\)\nExample: For {S} = {rise,fall}$, the event \\(\\{\\text{rise}\\}\\) is a simple event, while the event \\(\\{\\text{rise, fall}\\}\\) includes all outcomes and corresponds to the entire sample space.\nIn the first lecture we learned about two approaches to measure probability. But the theory of probability actually does not depend on how we measure it precisely. In the theory of probability this measure is an abstract concept.\nThus when we talk about probability in a precise and meaningful sense we can only do so in relation to a given sample space or to a certain conceptual experiment. In theory, probability is an abstract measure of uncertainty that does not depend on how it is observed or estimated. While practical applications may involve approximating probabilities using data, the mathematical theory assumes probabilities are predefined and satisfy specific rules.\nI have itroduced here probabilities with relation to a discrete sample space. The sample spaces discussed in Lecture 1 include finite sets, which can be small or large, such as the extensive output space of the SHA-256 hash function.\nThere are also more complicated discrete sample spaces: Think of the random experiment of tossing a coin as often as necessary to see Heads for the first time. We can begin writing down the basic outcomes as: \\(E_1=H, E_2=TH, E_3 = TTH, E_4 = TTTH, ...\\). An event where Heads never appear, denoted \\(E0\\), may also be considered. In this case, when the basic events can be arranged into a simple sequence. A sample space is called discrete if it contains only finitely many points, or infinitely many points which can be arranged into a simple sequence.\nNot all sample spaces are discrete. Except for the technical tools required there is no essential difference between the two cases. In our discussion of probability in this lecture we consider mostly discrete sample spaces, however we will also discuss some basic non-discrete sample spaces later in the lectures. Now let us state more formally what we mean by probability.\nBefore we go on let me further clarify what we mean when we say that in the theory, probability is an abstract measure of uncertainty which we take as given.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#terminology",
    "href": "02-lecture2.html#terminology",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "",
    "text": "Random Experiment\n\nA process with a set of possible outcomes, where the specific outcome cannot be predicted with certainty beforehand.\n\n\n\n\n\nSample space\n\nThe collection of all possible outcomes of an experiment is called the sample space and is denoted as the set \\({\\cal S}\\)\n\n\n\n\nBasic outcome, event, simple event\n\nA basic outcome is a single possible result of a random experiment. An event is a subset of the sample space, representing one or more outcomes. A simple event is an event containing exactly one basic outcome.\n\n\n\n\n\nProbability\n\nFor a given (discrete) sample space ${S}, Probability is a function that assigns a value to each event, representing its likelihood. The function has to fulfill three properties: 1. \\(P({\\cal S}) = 1\\). 2. For any event \\(A \\in {\\cal S}\\), \\(0 \\leq P(A) \\leq 1\\). The probability of an event can never be negative or larger than 1. 3. For mutually exclusive events \\(A\\) and \\(B\\), \\(P(A \\cup B) \\leq P(A) + P(B)\\).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#probability-theory-and-applications",
    "href": "02-lecture2.html#probability-theory-and-applications",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.2 Probability in theory and applications of probability",
    "text": "2.2 Probability in theory and applications of probability\nProbabilities are expressed as numbers between 0 and 1. As mentioned by Feller (1968) in his famous probability textbook, these numbers are of the same nature as distances in geometry. In the theory we assume they are given to us.\nFrom the viewpoint of probability theory, we need not assume anything about how they are measured. In this sense probabilities in the theory of probability are an abstract measure of uncertainty.\nIn practical applications, determining probabilities or applying theory often requires sophisticated statistical methods. So, while the mathematical as well as the intuitive meaning of probability are clear only as we proceed with the theory we will get a better ability to see how we can apply this concept.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#basic-rules-of-probability",
    "href": "02-lecture2.html#basic-rules-of-probability",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.3 Basic rules of probability",
    "text": "2.3 Basic rules of probability\nWe already saw that the classical notion of probability directly lead to a few simple rules. In fact in the theory of probability we require these rules to hold more generally no matter how probability is measured in actual applications.\nWhen we talk of probabilities we mostly consider probabilities with relation to a discrete sample space. The sample spaces discussed in Lecture 1 include finite sets, which can be small or large, such as the extensive output space of the SHA-256 hash function..\nThere are also more complicated discrete sample spaces: Think of the random experiment of tossing a coin as often as necessary to see Heads for the first time. We can begin writing down the basic outcomes as: \\(E_1=H, E_2=TH, E_3 = TTH, E_4 = TTTH, ...\\). An event where Heads never appear, denoted \\(E0\\), may also be considered. In this case, when the basic events can be arranged into a simple sequence. A sample space is called discrete if it contains only finitely many points, or infinitely many points which can be arranged into a simple sequence.\nNot all sample spaces are discrete. Except for the technical tools required there is no essential difference between the two cases. In our discussion of probability in this lecture we consider mostly discrete sample spaces, however we will also discuss some basic non-discrete sample spaces later in the lectures. Now let us state more formally what we mean by probability.\n\nProbability\n\nGiven a (discrete) sample space \\({\\cal S}\\) the probability assigned to events in this sample space must always fulfill three rules:\n\n\n\n\\(P({\\cal S}) = 1\\), where \\({\\cal S}\\) is the sample space.\nFor any event \\(A \\in {\\cal S}\\), \\(0 \\leq P(A) \\leq 1\\). The probability of an event can never be negative or larger than 1.\nThe probability of the union of two events \\(A\\) and \\(B\\) is always smaller or equal to the sum of the probability of these events looked at in isolation: \\(P(A \\cup B) \\leq P(A) + P(B)\\).\n\nNote that these three properties resulted naturally from the classic idea to make equally probable cases and count. Property 3 looks slightly different but we will shortly see that it amounts to the same thing.\nIn the theory of probability we use the language of sets and set theory to describe relations among event. We have used one of these relations in rule three, where we expressed the relation between two sets as their union \\(\\cup\\). It is useful in studying probability to know a few of these set theoretic definitions.\nLet’s go through them and illustrate the concepts in the context of the examples we have already developed in lecture 1.\n\nUnion\n\nThe union of two events \\(A\\) and \\(B\\) is the set that contains all events that are either in \\(A\\) or in \\(B\\) or in both sets. Set union is written as \\(A \\cup B\\).\n\n\nLet us use the example of the experiment of rolling a die. The sample space \\({\\cal S}\\) is the set of all possible outcomes of rolling the dice \\({\\cal S}=\\{1,2,3,4,5,6\\}\\). Assume one event is that the outcome is 1, 2 or 3. In set notation, we would write \\(A = \\{1,2,3\\}\\). Let us also assume that the second event is that the outcome is some even number, i.e. 2, 4, 6. Again using set notation we would write \\(B = \\{2,4,6\\}\\). The event \\(A \\cup B\\) is then the set of all outcomes such that the outcome is in \\(A\\) or in \\(B\\) or in both or these sets. In such simple examples it is sometimes helpful to depict the situation graphically.\n\n\n\n\n\nThe meaning of set union\n\n\n\n\nThe sample space \\({\\cal S}\\) is the gray set containing all possible outcomes of our random experiment. Graphically the union of \\(A\\) and \\(B\\), \\(A \\cup B\\) is a subset of the sample space, the entire colored area.\nBy the way and as an aside: R provides functions for computing set operations. Let us use the occasion to show you briefly how to use these functions in the context of this example: We define the sets \\(A\\) and \\(B\\) first using the assignment operator:\n\nA &lt;- c(1,2,3)\nB &lt;- c(2,4,6)\n\nWe compute the union by using the function union()\n\nunion(A,B)\n\n[1] 1 2 3 4 6\n\n\nwhich gives us the result we have already derived graphically.\n\nIntersection\n\nThe intersection of two events is the set that contains all events that are both in \\(A\\) and in \\(B\\). Set intersection is written as \\(A \\cap B\\).\n\n\nWe can again illustrate this concept graphically\n\n\n\n\n\nThe meaning of set intersection\n\n\n\n\nThe intersection of \\(A\\) and \\(B\\), \\(A \\cap B\\) is the orange area containing the dice face with two points. Indeed two is both in \\(A\\) and in \\(B\\), which is exactly the meaning of set intersection.\nThe R function for computing intersections is called intersect(). We call this function for our example\n\nintersect(A,B)\n\n[1] 2\n\n\nwhich gives us the result we have already derived graphically.\n\nComplement\n\nThe complement of an event \\(A\\) with respect to an event \\(B\\) is the set of all elements that are in \\(B\\) but not in \\(A\\). Set difference is written as \\(A \\setminus B\\).\n\n\nLets say we want to get the complement, or the set difference of \\(A \\cup B\\) with respect to the sample space \\({\\cal S}\\). Let us show \\({\\cal S} \\setminus (A \\cup B)\\).\n\n\n\n\n\nThe meaning of complement\n\n\n\n\nThis complement is the dice shown in the light redish area, i.e. all the elements of \\({\\cal S}\\) which are not in \\(A \\cup B\\).\nThe R function for computing set complements is called setdiff(). You can try it with our example:\n\nS &lt;- c(1,2,3,4,5,6)\n\nsetdiff(S, union(A,B))\n\n[1] 5\n\n\nwhich is 5, as expected.\n\nMutually Exclusive\n\nTwo events \\(A\\) and \\(B\\) are said to be mutually exclusive if they have no basic outcomes in common. The notation is \\(A \\cap B = \\emptyset\\)\n\n\nAn example in our context is the set of even outcomes \\(B=\\{2,4,6\\}\\) and the set of odd outcomes, let us call it \\(C=\\{1,3,5\\}\\). If we intersect these sets\n\nB &lt;- c(2,4,6)\nC &lt;- c(1,3,5)\n\nintersect(B,C)\n\nnumeric(0)\n\n\nwe get the empty set, which is expressed by R by giving the data type, in this case numeric, because we are intersecting sets of numeric values, followed by (0). This means, there is no numeric value in the intersection of \\(B\\) and \\(C\\).\nLet us discuss probability rule 3 a bit further: Go to the picture we drew to illustrate the meaning of set union in figure @ref(fig:set-union). To compute the probability \\(P(A \\cup B)\\) we have to add the probabilities of all sample points that are contained either in \\(A\\) or in \\(B\\) but each point is to be counted only once. Therefore, probability rule 3, has a (weak) inequality: \\(P(A \\cup B) \\leq P(A) + P(B)\\).\nNow let \\(E\\) be a point contained both in \\(A\\) and in \\(B\\), in our example this would be \\(E = \\{2\\}\\), then \\(P(E)\\) occurs twice on the right hand side of our inequality but only once on the left. Therefore the right hand side exceeds the left by the amount \\(P(A \\cap B\\)). Thus we have \\(P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\\).\nThis reasoning holds for arbitrary pairs of events and not only in our example. In the case \\(A\\) and \\(B\\) are arbitrary events and \\(A\\) and \\(B\\) are mutually exclusive, i.e. \\(A \\cap B = \\emptyset\\) then our inequality in rule 3 becomes an equality and we have \\(P(A \\cup B) = P(A) + P(B)\\).\nNow you recognize property 3 in lecture 1, where we said that: ” If \\(A\\) and \\(B\\) never occur in the same case, then \\(P(A \\,\\text{or}\\, B) = P(A) + P(B)\\).” The meaning of \\(A\\) and \\(B\\) not occurring in the same case is in set theoretic terms exactly the requirement that they are mutually exclusive events.\nTherefore in many treatments of probability you will find rule 3 formulated as:\n3-a: The probability of the union of two mutually exclusive events \\(A\\) and \\(B\\) is \\(P(A \\cup B) =  P(A) + P(B)\\).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#frequency",
    "href": "02-lecture2.html#frequency",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.5 Probability and Frequency",
    "text": "2.5 Probability and Frequency\nNow it is time to explain a connection we made so far informally when we looked at visualizations and simulations, where we used connection between relative frequencies of probabilities in repetions of a random experiment.\nThe frequency interpretation of probability is a practical approach to understanding uncertainty. It defines the probability of an event \\(A\\) as:\n\\[\\begin{equation*}\nP(A) = \\frac{\\text{Number of times $A$ occurs in repeated identical trials}}{\\text{Total number of trials}}\n\\end{equation*}\\]\nThis interpretation is intuitive and often used in fields like engineering, finance, and natural sciences. However, it raises important questions about the connection between observed frequencies and theoretical probabilities.\nThe origins of this discussion reach back to the seventeenth century. The philosophers Gottfried Wilhelm Leibnitz (1646 - 1716) and Jacob Bernoulli (1655 - 1705) had great hopes for the new field of probability to find applications in fields like medicine, law, commerce and finance. This interest in exploring new fields of potential applications drove them to study frequency evidence of events. They felt that relying on intuitively equally probable cases might not be enough for these ambitious application attempts.\nJacob Bernoulli gave an answer which is among the great ideas in probability theory (see Diaconis and Skyrms (2019)), the weak law of large numbers. It establishes one of the most important connections between frequency and probability.\n\n2.5.1 The Weak Law of Large Numbers (WLLN)\nThe Weak Law of Large Numbers provides a rigorous mathematical foundation for the frequency interpretation of probability. It states:\nAs the number of independent and identically distributed (i.i.d.) trials increases, the relative frequency of an event converges to its true probability with high probability.\nNow let us pause here and restate what the weak law says: The law says that\n\nOver many trials, the observed frequencies of outcomes will get closer to their theoretical probabilities.\nThis convergence occurs with high likelihood as the number of trials increases.\n\nObserve also what the weak law does not say:\n\nFrequencies are not probabilities. Instead frequencies approximate probabilities as trials increase.\nThe weak law does not guarantee exact convergence in finite samples - it describes long run outcomes of repeating identical experiments many times.\n\nLet#s go back to the exmple of the fair coin we played with in lecture 1: There we constructed a fair coin toss where \\(P(\\text{Heads})=0.5\\). When we have just a few tosses, say 10 times, you might observe 6 Heads (60%), which is close to but not exactly 50%. As you increase the tosses, say to 100, the frequency might be 52 Heads (52%), closer to 50%. if you go to even more tosses, say 10,000 tosses, the frequency approaches 50%.\nThis demonstrates that, as the number of trials increases, the relative frequency converges to the theoretical probability.\nIt is crucial to understand that Bernoulli’s Law of Large Numbers does not assert that frequencies are probabilities. Rather, it describes how, under certain conditions, frequencies fall within specific bounds relative to probabilities. Specifically, given a theoretical probability, a desired margin of error, and a confidence level, Bernoulli’s result provides an upper bound on the number of trials required for the relative frequency of an event to approximate its true probability.\nThis distinction highlights an important limitation: the Weak Law of Large Numbers addresses the problem of inference from probabilities to frequencies, not the reverse. That is, it shows how probabilities can predict the behavior of frequencies in repeated trials, but it does not justify using observed frequencies as definitive probabilities. Instead, the theorem ensures that as the number of trials grows, the relative frequency of an event will converge to its probability, within specified bounds.\nAlthough we will frequently use frequency-based measures of probability in practical applications, it is essential to recognize the conceptual gap between the idealized mathematical theory and the empirical realities it seeks to describe. Probability theory relies on the concept of limiting relative frequencies, which exist only in an idealized framework of infinite trials. Real-world applications, however, involve finite data and inherently require interpretation, judgment, and domain expertise.\nThis distinction between theory and practice is more than a technical nuance—it addresses a fundamental challenge for any theory with practical ambitions: How does the idealized framework relate to the messy complexities of reality? In probability, as in other fields, there is no direct or naive application of theory to practice. Bridging this gap demands a sound understanding of the theory, along with careful consideration of real-world conditions and context.1\n1 For a formal statement of the weak law of large numbers, we need more concepts which we have not yet introduced, in particular the notion of a random variable. Let me give the formal statement here for those of you who are interested and know the concept of a random variable already: Let \\(X_1, X_2, \\dots, X_n\\) be \\(n\\) independently, identically distributed random variables with expected value \\(\\mu\\) and variance \\(\\sigma^2\\). Let \\(\\bar{X}_n\\) denote the sample mean. Then the weak law of large numbers states: \\(P(|\\bar{X}_n - \\mu | \\geq \\epsilon) \\to 0 \\quad \\text{as } n \\to \\infty\\). This means that the probability of the sample mean deviating significantly from the expected value diminishes as the number of trials increases.\n\n2.5.2 Exploring the Weak Law of Large Numbers with R\nIn the following code chunk we first define a coin as we did in lecture 1 with the understanding that 1 represents Heads and 0 represents Tails. Then we use the replicate function and the sample function to toss the coin 1000 times.\nNow in the next step we use the logical condition results == 1 to create a logical vector indicating whether each toss resulted in Heads. cumsum()then calculates the cumulative count of Heads after each toss. Dividing this cumulative count by (1:n) (the toss number) gives the cumulative relative frequency of Heads at each step.\nThen we plot these frequencies againts the number of tosses. The \\(x\\)-axis represents the number of tosses, while the \\(y\\)-axis represents the relative frequency of heads. We draw a red horizontal line where the relative frequency is identical to the theoretical probability of \\(0.5\\).\n\n# Define the coin\ncoin &lt;- c(1, 0)\n\n# Toss the coin n times\nn &lt;- 1000\nresults &lt;- replicate(n, sample(coin, size = 1))\n\n# Calculate cumulative frequency of Heads\n\nheads_freq &lt;- cumsum(results == 1) / (1:n)\n\n# Plot the convergence\nplot(1:n, heads_freq, type = \"l\", ylim = c(0.4, 0.6),\n     xlab = \"Number of Tosses\", ylab = \"Frequency of Heads\",\n     main = \"Convergence of Relative Frequency to True Probability\")\nabline(h = 0.5, col = \"red\", lty = 2)\n\n\n\n\n\n\n\n\nThis plot illustrates how the relative frequency of Heads approaches \\(P(\\text{Heads})=0.5\\) as the number of tosses increases.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#independence",
    "href": "02-lecture2.html#independence",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.6 Independence",
    "text": "2.6 Independence\nThe idealized thought experiment behind the Weak Law of Large Numbers assumes the idea of independence. Let us define this concept more precisely and explain its implications. While we have already used independence implicitly in earlier examples, it is important to formalize and understand it carefully.\n\n2.6.1 Intuition Behind Independence\nTwo events are said to be independent if the occurrence of one event does not influence the probability of the other event occurring. In other words, knowing that one event has occurred provides no information about the likelihood of the other event.\nFor example, consider rolling a fair six-sided die twice. The outcome of the first roll does not affect the outcome of the second roll because the rolls are independent. The probability of any number appearing on the second roll remains \\(1/6\\), regardless of what happened on the first roll.\n\n\n2.6.2 A Worked Example\nLet us calculate the probability of rolling a 5 on the first roll and a 6 on the second roll.\nThis is the probability of the event “5 on the first roll and 6 on the second roll,” which we write as \\(P(5 \\cap 6)\\).\nSince the rolls are independent: \\(P(5 \\cap 6) = P(5) \\times P(6)\\).\n\nThe probability of rolling a 5 on a fair six-sided die is \\(P(5) = 1/6\\).\nThe probability of rolling a 6 on a fair six-sided die is \\(P(6) = 1/6\\).\n\nThus: \\(P(5 \\cap 6) = \\frac{1}{6} \\cdot \\frac{1}{6} = \\frac{1}{36}\\).\nThis calculation uses the multiplication rule for independent events, which states that if two events \\(A\\) and \\(B\\) are independent, then the probability of both occurring is the product of their individual probabilities.\n\n\n2.6.3 Definition of Independence\nWe now formalize this concept:\nIndependence:\nTwo events \\(A\\) and \\(B\\) are independent if and only if: \\(P(A \\cap B) = P(A) \\times P(B)\\).\nThis definition formalizes the idea that the occurrence of one event does not affect the likelihood of the other. Independence is an assumption we often make in theoretical models like the Weak Law of Large Numbers and many other probabilistic frameworks.\n\n\n2.6.4 Important Note: Independence vs. Multiplication Rule\nWhile independence allows us to use the multiplication rule \\(P(A \\cap B) = P(A) \\times P(B)\\), it is critical to remember that the reverse is not true:\n- Just because you can multiply probabilities does not necessarily mean the events are independent.\n- For independence to hold, the probabilities of the events must truly be unaffected by one another.\n\n\n2.6.5 Why Is Independence Important Here?\nIndependence is a key assumption in the Weak Law of Large Numbers, where we consider a series of independent and identically distributed (i.i.d.) trials. Without independence, the law’s guarantees about the behavior of frequencies would not hold. As we move forward, we will see independence as a foundational concept in many probabilistic models and calculations.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#moreR",
    "href": "02-lecture2.html#moreR",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.7 Some more concepts from R: Reading Data, R Objects, Subsetting and Modifying Values",
    "text": "2.7 Some more concepts from R: Reading Data, R Objects, Subsetting and Modifying Values\nBut now enough of dices and coins. Let us try out and apply some of the new ideas we just have learned and use the opportunity to learn some more important R concepts in the context of an example with stock price data.\n\n2.7.1 Reading data in R\nIn financial analysis, the first step is often acquiring and loading data. This could be historical stock prices, economic indicators, or portfolio metrics. In this section, we’ll learn how to load a prepared dataset of Apple stock prices into R for analysis.\nWhy learn to load data? Loading data is the foundation for everything else we’ll do in this course. Whether you’re calculating probabilities or visualizing stock trends, understanding how to access and manipulate data is essential.\n\n2.7.1.1 Reading csv files\nFor this example, I’ve prepared a dataset recording daily stock price information for Apple in a CSV file (aapl_prices.csv). This file contains the opening, high, low, and closing prices, trading volume, and adjusted closing prices for each day starting in January 1990.\nTo load this file into R, we use the read.csv() function:\n\naapl_prices &lt;- read.csv(\"data/aapl_prices.csv\")\n\nHere, \"data/aapl_prices.csv\" specifies the path to the file relative to the working directory.2\n2 If you work with European-style decimals , instead of ., you might need read.csv2(). For now, we’ll stick to the default U.S. format.3 A great way to explore these options is to consult the R Data Import/Export Manual or experiment with sample datasets from various sources like Kaggle or the tidyverse’s guide.R is highly versatile when it comes to handling data formats. Beyond CSV files, R can read and write Excel files, JSON, XML, databases, and more. While many formats can be accessed using built-in functions with a syntax similar to read.csv(), others may require loading additional packages. For instance, the readxl package is excellent for Excel files, and the jsonlite package is ideal for JSON data.3\nTo check your current working directory, use the getwd() function:\n\ngetwd()\n\n[1] \"/home/martinsummer/Code/R/Probability_Introduction\"\n\n\nIf the file is not in the expected location, ensure the path is correct or adjust it as needed.\n\n\n2.7.1.2 Inspecting the data\nOnce the data is loaded, it’s important to inspect it. This helps you understand its structure and content. For example, we can use the head() function to view the first 10 rows:\n\nhead(aapl_prices, n = 10)\n\n   symbol       date     open     high      low    close    volume  adjusted\n1    AAPL 1990-01-02 0.314732 0.334821 0.312500 0.332589 183198400 0.2621293\n2    AAPL 1990-01-03 0.339286 0.339286 0.334821 0.334821 207995200 0.2638886\n3    AAPL 1990-01-04 0.341518 0.345982 0.332589 0.335938 221513600 0.2647689\n4    AAPL 1990-01-05 0.337054 0.341518 0.330357 0.337054 123312000 0.2656486\n5    AAPL 1990-01-08 0.334821 0.339286 0.330357 0.339286 101572800 0.2674077\n6    AAPL 1990-01-09 0.339286 0.339286 0.330357 0.335938  86139200 0.2647689\n7    AAPL 1990-01-10 0.335938 0.335938 0.319196 0.321429 199718400 0.2533336\n8    AAPL 1990-01-11 0.323661 0.323661 0.308036 0.308036 211052800 0.2427781\n9    AAPL 1990-01-12 0.305804 0.310268 0.301339 0.308036 171897600 0.2427781\n10   AAPL 1990-01-15 0.308036 0.319196 0.305804 0.305804 161739200 0.2410190\n\n\nThis reveals a table with columns such as the opening price, highest and lowest prices, and adjusted closing price for each day. While we won’t dive into the exact meaning of these financial terms just yet, this dataset will serve as the foundation for our analysis.\n\n\n2.7.1.3 Common pitfalls and tips\n\nIf you see an error like cannot open the connection, it likely means R can’t find the file. Use getwd() to confirm your working directory and ensure the file is in the specified location.\nExplore the dataset further! Try summary(aapl_prices) to get an overview of each variable or tail(aapl_prices, n = 10) to see the most recent rows.\n\nNow that we’ve successfully loaded and inspected the dataset, we’re ready to dive into analyzing it.\n\n\n\n2.7.2 R Objects and Stock Price Movements\nIn R, most data structures are built from atomic vectors, which are the simplest type of R objects. Atomic vectors store one-dimensional data, where all elements must be of the same type. Our stock price dataset contains examples of more complex structures made up of atomic vectors. Let’s explore atomic vectors using simplified stock price data to better understand how they work.\n\n2.7.2.1 Atomic Vectors in Stock Price Analysis\nTo introduce atomic vectors, consider a basic example of daily stock price movements. Suppose the price of a stock can change in one of three ways:\n\nDecrease by 1 (-1)\nStay the same (0)\nIncrease by 1 (+1)\n\nWe can represent these possible changes in price using an atomic vector:\n\nprice_changes &lt;- c(-1, 0, 1)\n\nAtomic vectors are one-dimensional and store data of a single type. In this case, price_changes is a numeric vector representing the possible daily price changes.\nYou can verify whether an object is an atomic vector using the is.vector() function:\n\nis.vector(price_changes)\n\n[1] TRUE\n\n\nThis will return TRUE since price_changes is indeed an atomic vector.\n\n\n2.7.2.2 Properties of Atomic Vectors\nEach atomic vector has several properties. For example:\n\nLength: The number of elements in the vector can be checked using length():\n\n\nlength(price_changes)\n\n[1] 3\n\n\nThis will return 3, as there are three possible price changes.\n\nData Type: Every atomic vector must have a single data type. You can determine the type using the typeof() function:\n\n\ntypeof(price_changes)\n\n[1] \"double\"\n\n\nIn this case, the type is double because the vector contains numeric data.\n\n\n2.7.2.3 Using Vectors in Simulations\nVectors are powerful tools for simulations. For example, we can simulate a week of stock price movements using the sample() function, which randomly selects elements from the vector:\n\nweek_movements &lt;- sample(price_changes, size = 7, replace = TRUE)\nweek_movements\n\n[1] -1  0 -1  1  0 -1  1\n\n\nHere, size = 7 simulates 7 days of movements, and replace = TRUE allows values to be selected more than once.\n\n\n2.7.2.4 Connection to Probability\nThis simulation ties into the concept of probability. Each price change (-1, 0, 1) can be treated as a basic outcome in a sample space defined by \\({\\cal S} = \\{-1,0,1\\}\\). By specifying probabilities, we can simulate scenarios where some outcomes are more likely than others. For example:\n\nweek_movements_weighted &lt;- sample(price_changes, \n                                  size = 7, \n                                  replace = TRUE, \n                                  prob = c(0.3, 0.4, 0.3))\nweek_movements_weighted\n\n[1] -1  1 -1 -1 -1 -1  0\n\n\nHere, the probabilities 0.3, 0.4, and 0.3 represent the likelihood of a decrease, no change, or an increase in price, respectively.\n\n\n2.7.2.5 More About Atomic Vectors\nR supports six basic types of atomic vectors:\n\nDouble: Numeric data with decimal precision (e.g., stock prices).\nInteger: Whole numbers (e.g., the number of shares traded).\nCharacter: Text strings (e.g., stock symbols like \"AAPL\").\nLogical: Boolean values (TRUE or FALSE, often used in comparisons).\nComplex: Numbers with imaginary components (not used in this course).\nRaw: Binary data (not used in this course).\n\nWe will primarily work with doubles, integers, characters, and logicals.We will primarily work with doubles, integers, characters, and logicals.4\n4 Why should we care for distinguishing integers from doubles? This has to do with how a computer performs computations. Sometimes, differences in precision can lead to surprising effects. In your computer, 64 bits of memory are allocated for each double in an R program. While this allows for precise representation of numbers, not all numbers can be exactly represented with 64 bits. For example, \\(\\pi\\) has an infinite sequence of digits and must therefore be rounded by the computer. Usually, rounding errors introduced into computations go unnoticed, but sometimes they become apparent. For instance, the expression \\(\\sqrt{2^2} - 2\\) results in a small floating-point error because the square root of 2 cannot be expressed precisely. These are called floating-point errors. While integers avoid floating-point errors, they are often impractical for many applications. Luckily, floating-point arithmetic is sufficiently precise for most use cases.For example, the stock price dataset contains variables of different types: - Prices (e.g., opening and closing prices) are stored as doubles. - Ticker symbols are stored as characters. - Logical vectors can be created by applying conditions to the data. For instance, finding days when the closing price was higher than the opening price:\n\naapl_prices$up_day &lt;- aapl_prices$close &gt; aapl_prices$open\nhead(aapl_prices$up_day, n = 10)\n\n [1]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE\n\n\n\n\n2.7.2.6 Attributes of Atomic Vectors\nAtomic vectors can have attributes, such as:\n\nNames: Metadata to describe each element.\nDimensions: Turning a vector into a matrix or array.\n\nFor example, we can assign names to the elements of price_changes:\n\nnames(price_changes) &lt;- c(\"Decrease\", \"No Change\", \"Increase\")\nprice_changes\n\n Decrease No Change  Increase \n       -1         0         1 \n\n\nThe names don’t affect the values but provide context for analysis. Here you see that the names are entered into R as a character vector stores, strings of text, which have to be put between quotation marks \"\". Strings are the individual elements of a character vector. We could use character vectors for instance in building our virtual coin earlier in the lecture in a more human readable form by using coin &lt;- c(\"H\", \"T\") isntead of coin &lt;- c(1,0).\nNote that a string can be more than just letters. If you type, for instance the number 1 with quotation marks, like \"1\" R would interpret the value as a string not as a number. Sometimes one can get confused in R because both objects and characters appear as text in R code. Object names are without quotation marks strings always are between quotation marks.\nWe can also reshape the vector into a matrix, which introduces dimensions:\n\ndim(price_changes) &lt;- c(3, 1)\nprice_changes\n\n     [,1]\n[1,]   -1\n[2,]    0\n[3,]    1\n\n\nThis transforms the vector into a matrix with 3 rows and 1 column.^[With the attribute system R allows you to represent more data types. R uses, for example a special class to represent dates and times. The data variable in our stock data is - for example - represents as a type of this kind.\nTo illustrate this we take the R-function Sys.time(). This function returns the current time on your computer. It looks like a character string when you display it but it is actually a double with class POSIXct, POSIXt (it has two classes):\n\nnow &lt;- Sys.time()\nnow\n\n[1] \"2024-12-30 16:28:40 CET\"\n\ntypeof(now)\n\n[1] \"double\"\n\nclass(now)\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nPOSIXct is a widely used framework for representing dates and times. But we will skip the details here.]\n\n\n\n2.7.3 Extending R Objects: Factors, Data Frames, and Lists\nIn the previous section, we explored atomic vectors, the foundation of many R objects. However, real-world data often requires more sophisticated structures. Let’s extend our understanding by examining factors, data frames, and lists, using examples from stock price analysis.\n\n2.7.3.1 Factors in Stock Price Analysis\nFactors are used to store categorical data, which can have a fixed set of possible values (called levels). In stock market data, factors are useful for categorizing data, such as trading days or stock types.\nFor example, suppose we want to represent the days of the working week in our dataset:\n\ndays &lt;- factor(c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"))\ndays\n\n[1] Monday    Tuesday   Wednesday Thursday  Friday   \nLevels: Friday Monday Thursday Tuesday Wednesday\n\n\nThis factor has unique levels (\"Monday\", \"Tuesday\", etc.) that categorize the data. Factors can also be ordered, which is useful when the order matters:\n\nordered_days &lt;- factor(days, levels = c(\"Monday\", \"Tuesday\", \n                                        \"Wednesday\", \"Thursday\", \n                                        \"Friday\"), ordered = TRUE)\n\nordered_days\n\n[1] Monday    Tuesday   Wednesday Thursday  Friday   \nLevels: Monday &lt; Tuesday &lt; Wednesday &lt; Thursday &lt; Friday\n\n\nFactors are internally stored as integers but behave like characters when displayed. You can inspect their attributes to see how they’re stored:\n\nattributes(ordered_days)\n\n$levels\n[1] \"Monday\"    \"Tuesday\"   \"Wednesday\" \"Thursday\"  \"Friday\"   \n\n$class\n[1] \"ordered\" \"factor\" \n\n\n\n\n2.7.3.2 Data Frames: Organizing Stock Price Data\nA data frame is a two-dimensional structure that organizes data into rows and columns, where each column can store a different type of data. The stock price dataset we loaded earlier is a perfect example of a data frame.\nLet’s revisit the aapl_prices dataset:\n\nhead(aapl_prices)\n\n  symbol       date     open     high      low    close    volume  adjusted\n1   AAPL 1990-01-02 0.314732 0.334821 0.312500 0.332589 183198400 0.2621293\n2   AAPL 1990-01-03 0.339286 0.339286 0.334821 0.334821 207995200 0.2638886\n3   AAPL 1990-01-04 0.341518 0.345982 0.332589 0.335938 221513600 0.2647689\n4   AAPL 1990-01-05 0.337054 0.341518 0.330357 0.337054 123312000 0.2656486\n5   AAPL 1990-01-08 0.334821 0.339286 0.330357 0.339286 101572800 0.2674077\n6   AAPL 1990-01-09 0.339286 0.339286 0.330357 0.335938  86139200 0.2647689\n  up_day\n1   TRUE\n2  FALSE\n3  FALSE\n4  FALSE\n5   TRUE\n6  FALSE\n\ntypeof(aapl_prices)\n\n[1] \"list\"\n\nclass(aapl_prices)\n\n[1] \"data.frame\"\n\n\nEach column in a data frame is an atomic vector, meaning it contains values of a single type:\n\nDoubles: Prices (e.g., opening, closing).\nCharacters: Ticker symbols (\"AAPL\").\nLogicals: New variables created based on conditions.\n\nFor example, we can create a logical column to indicate whether the stock closed higher than it opened:\n\naapl_prices$up_day &lt;- aapl_prices$close &gt; aapl_prices$open\nhead(aapl_prices[c(\"date\", \"close\", \"up_day\")], n = 5)\n\n        date    close up_day\n1 1990-01-02 0.332589   TRUE\n2 1990-01-03 0.334821  FALSE\n3 1990-01-04 0.335938  FALSE\n4 1990-01-05 0.337054  FALSE\n5 1990-01-08 0.339286   TRUE\n\n\nData frames are extremely flexible. You can subset them, filter rows, or add new columns:\n\n# Subset rows where the stock closed higher than it opened\n\nhigher_close &lt;- aapl_prices[aapl_prices$up_day == TRUE, ]\nhead(higher_close)\n\n   symbol       date     open     high      low    close    volume  adjusted\n1    AAPL 1990-01-02 0.314732 0.334821 0.312500 0.332589 183198400 0.2621293\n5    AAPL 1990-01-08 0.334821 0.339286 0.330357 0.339286 101572800 0.2674077\n9    AAPL 1990-01-12 0.305804 0.310268 0.301339 0.308036 171897600 0.2427781\n11   AAPL 1990-01-16 0.299107 0.312500 0.292411 0.311384 214244800 0.2454167\n14   AAPL 1990-01-19 0.301339 0.308036 0.299107 0.305804 265137600 0.2410190\n17   AAPL 1990-01-24 0.290179 0.305804 0.287946 0.303571 169792000 0.2392588\n   up_day\n1    TRUE\n5    TRUE\n9    TRUE\n11   TRUE\n14   TRUE\n17   TRUE\n\n\n\n\n2.7.3.3 Lists: Combining Multiple Data Types\nWhile data frames organize tabular data, lists allow us to group together objects of different types and structures. This makes lists a powerful tool for storing heterogeneous data.\nFor example, let’s create a list to summarize key information about Apple’s stock prices:\n\nstock_summary &lt;- list(\n  ticker = \"AAPL\",\n  price_summary = summary(aapl_prices$close),\n  highest_price = max(aapl_prices$high, na.rm = TRUE),\n  date_range = range(aapl_prices$date, na.rm = TRUE)\n)\nstock_summary\n\n$ticker\n[1] \"AAPL\"\n\n$price_summary\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  0.1155   0.3834   3.3300  30.5265  28.8950 259.0200 \n\n$highest_price\n[1] 260.1\n\n$date_range\n[1] \"1990-01-02\" \"2024-12-27\"\n\n\nYou can access elements in a list using double brackets ([[):\n\nstock_summary[[\"highest_price\"]]\n\n[1] 260.1\n\n\nLists can also contain nested lists or data frames, enabling complex data structures. For example:\n\nnested_list &lt;- list(\n  summary = stock_summary,\n  recent_data = head(aapl_prices, n = 5)\n)\nnested_list\n\n$summary\n$summary$ticker\n[1] \"AAPL\"\n\n$summary$price_summary\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  0.1155   0.3834   3.3300  30.5265  28.8950 259.0200 \n\n$summary$highest_price\n[1] 260.1\n\n$summary$date_range\n[1] \"1990-01-02\" \"2024-12-27\"\n\n\n$recent_data\n  symbol       date     open     high      low    close    volume  adjusted\n1   AAPL 1990-01-02 0.314732 0.334821 0.312500 0.332589 183198400 0.2621293\n2   AAPL 1990-01-03 0.339286 0.339286 0.334821 0.334821 207995200 0.2638886\n3   AAPL 1990-01-04 0.341518 0.345982 0.332589 0.335938 221513600 0.2647689\n4   AAPL 1990-01-05 0.337054 0.341518 0.330357 0.337054 123312000 0.2656486\n5   AAPL 1990-01-08 0.334821 0.339286 0.330357 0.339286 101572800 0.2674077\n  up_day\n1   TRUE\n2  FALSE\n3  FALSE\n4  FALSE\n5   TRUE\n\n\n\n\n2.7.3.4 Factors, Data Frames, and Lists in Practice\nTo see how these structures work together, consider this small example. We’ll summarize Apple’s stock price movements over a week and organize the results in a list:\n\n# Simulate weekly price movements\nweek_movements &lt;- sample(c(-1, 0, 1), size = 5, replace = TRUE, \n                         prob = c(0.3, 0.4, 0.3))\ndays &lt;- factor(c(\"Monday\", \"Tuesday\", \"Wednesday\", \n                 \"Thursday\", \"Friday\"), ordered = TRUE)\n\n# Create a data frame\nweekly_data &lt;- data.frame(\n  day = days,\n  price_change = week_movements\n)\n\n# Summarize the data\nsummary_list &lt;- list(\n  week_data = weekly_data,\n  positive_days = sum(weekly_data$price_change &gt; 0),\n  total_change = sum(weekly_data$price_change)\n)\n\nsummary_list\n\n$week_data\n        day price_change\n1    Monday            0\n2   Tuesday           -1\n3 Wednesday            1\n4  Thursday            0\n5    Friday            0\n\n$positive_days\n[1] 1\n\n$total_change\n[1] 0\n\n\nThis example combines:\n\nA factor (days) to represent the days of the week.\nA data frame (weekly_data) to organize daily price changes.\nA list (summary_list) to store the data frame and summary statistics.\n\n\n\n2.7.3.5 Why These Structures Matter\nFactors, data frames, and lists are essential for organizing and analyzing real-world data. In financial analysis, they allow us to:\n\nCategorize data efficiently (factors).\nAnalyze structured datasets (data frames).\nIntegrate heterogeneous data (lists).\n\nArmed with these tools, you’re ready to perform deeper analyses and connect R concepts to practical financial problems. Next, we’ll use this knowledge to explore probabilistic questions with our stock price data.\n\n\n\n2.7.4 Example: Will the Stock Price of Apple Move Up or Down?\nLet us revisit the first lines of our dataset:\n\nhead(aapl_prices, n = 10)\n\n   symbol       date     open     high      low    close    volume  adjusted\n1    AAPL 1990-01-02 0.314732 0.334821 0.312500 0.332589 183198400 0.2621293\n2    AAPL 1990-01-03 0.339286 0.339286 0.334821 0.334821 207995200 0.2638886\n3    AAPL 1990-01-04 0.341518 0.345982 0.332589 0.335938 221513600 0.2647689\n4    AAPL 1990-01-05 0.337054 0.341518 0.330357 0.337054 123312000 0.2656486\n5    AAPL 1990-01-08 0.334821 0.339286 0.330357 0.339286 101572800 0.2674077\n6    AAPL 1990-01-09 0.339286 0.339286 0.330357 0.335938  86139200 0.2647689\n7    AAPL 1990-01-10 0.335938 0.335938 0.319196 0.321429 199718400 0.2533336\n8    AAPL 1990-01-11 0.323661 0.323661 0.308036 0.308036 211052800 0.2427781\n9    AAPL 1990-01-12 0.305804 0.310268 0.301339 0.308036 171897600 0.2427781\n10   AAPL 1990-01-15 0.308036 0.319196 0.305804 0.305804 161739200 0.2410190\n   up_day\n1    TRUE\n2   FALSE\n3   FALSE\n4   FALSE\n5    TRUE\n6   FALSE\n7   FALSE\n8   FALSE\n9    TRUE\n10  FALSE\n\n\n\n2.7.4.1 Understanding the Structure of the Data\nTo begin, let’s confirm the type and structure of aapl_prices:\n\ntypeof(aapl_prices)\n\n[1] \"list\"\n\nclass(aapl_prices)\n\n[1] \"data.frame\"\n\n\nAs expected, the object is a list with the class data.frame. This means the dataset organizes data in rows and columns. We can use the dim() function to see how many trading days are recorded:\n\ndim(aapl_prices)\n\n[1] 8815    9\n\n\nThe dataset contains price information for 8815 trading days.\n\n\n\n2.7.4.2 Subsetting Data: Accessing Specific Elements\nTo analyze the dataset, we need to extract specific values or subsets of data. R provides a powerful and flexible notation system for subsetting:\naapl_prices[row_indices, column_indices]\nHere are the six main subsetting methods in R:\n\nPositive Integers:\n\nExample: Select the closing price on the first trading day:\n\n\n\naapl_prices[1, \"close\"]\n\n[1] 0.332589\n\n\n\nSelect the first 5 closing prices:\n\n\naapl_prices[1:5, \"close\"]\n\n[1] 0.332589 0.334821 0.335938 0.337054 0.339286\n\n\n\nNegative Integers:\n\nExclude the first observation (show first 3 entries after this operation):\n\n\n\n     head(aapl_prices[-1, \"close\"], 3)\n\n[1] 0.334821 0.335938 0.337054\n\n\n\nZero:\n\nCreates an empty object:\n\n\n\n     aapl_prices[0, 0]\n\ndata frame with 0 columns and 0 rows\n\n\n\nBlank Spaces:\n\nSelect all values in a dimension:\n\n\n\n     sel &lt;- aapl_prices[, \"close\"]\n     length(sel)\n\n[1] 8815\n\n\n\nLogical Values:\n\nExample: Use a logical vector to select the first closing price:\n\n\n\n     aapl_prices[1, c(FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE)]\n\n      high    close\n1 0.334821 0.332589\n\n\n\nNames:\n\nSelect using column names:\n\n\n\naapl_prices[1, \"close\"]\n\n[1] 0.332589\n\n\n\n\n2.7.4.3 Calculating Daily Price Differences\nLet us compute the day-to-day differences in closing prices. Using indexing, we can calculate these differences manually:\n\naux_1 &lt;- aapl_prices[2:8044, \"close\"]\naux_2 &lt;- aapl_prices[1:8043, \"close\"]\ndiff_close &lt;- aux_1 - aux_2\nhead(diff_close, n = 10)\n\n [1]  0.002231985  0.001117021  0.001116008  0.002231985 -0.003347993\n [6] -0.014508992 -0.013393015  0.000000000 -0.002231985  0.005579978\n\n\nAlternatively, the built-in diff() function simplifies this task:\n\naapl_prices$diff &lt;- c(NA, diff(aapl_prices$close))\nhead(aapl_prices, n = 5)\n\n  symbol       date     open     high      low    close    volume  adjusted\n1   AAPL 1990-01-02 0.314732 0.334821 0.312500 0.332589 183198400 0.2621293\n2   AAPL 1990-01-03 0.339286 0.339286 0.334821 0.334821 207995200 0.2638886\n3   AAPL 1990-01-04 0.341518 0.345982 0.332589 0.335938 221513600 0.2647689\n4   AAPL 1990-01-05 0.337054 0.341518 0.330357 0.337054 123312000 0.2656486\n5   AAPL 1990-01-08 0.334821 0.339286 0.330357 0.339286 101572800 0.2674077\n  up_day        diff\n1   TRUE          NA\n2  FALSE 0.002231985\n3  FALSE 0.001117021\n4  FALSE 0.001116008\n5   TRUE 0.002231985\n\n\nThe first observation is NA because there is no prior day to calculate a difference.\n\n\n2.7.4.4 Frequency-Based Probability of Upward Moves\nTo determine the probability of the stock moving up on any given day, we create a logical column that indicates whether the price difference is positive:\n\naapl_prices$diff_pos &lt;- aapl_prices$diff &gt; 0\nhead(aapl_prices, n = 5)\n\n  symbol       date     open     high      low    close    volume  adjusted\n1   AAPL 1990-01-02 0.314732 0.334821 0.312500 0.332589 183198400 0.2621293\n2   AAPL 1990-01-03 0.339286 0.339286 0.334821 0.334821 207995200 0.2638886\n3   AAPL 1990-01-04 0.341518 0.345982 0.332589 0.335938 221513600 0.2647689\n4   AAPL 1990-01-05 0.337054 0.341518 0.330357 0.337054 123312000 0.2656486\n5   AAPL 1990-01-08 0.334821 0.339286 0.330357 0.339286 101572800 0.2674077\n  up_day        diff diff_pos\n1   TRUE          NA       NA\n2  FALSE 0.002231985     TRUE\n3  FALSE 0.001117021     TRUE\n4  FALSE 0.001116008     TRUE\n5   TRUE 0.002231985     TRUE\n\n\nUsing the relative frequency approach, we calculate the probability of an upward move as:\n\nmean(aapl_prices$diff_pos, na.rm = TRUE)\n\n[1] 0.5073746\n\n\nor about 51 %.\nThis one line of code does several important things that are worth unpacking.\nFirst, R has an internal behavior known as type coercion, where logical values (TRUE and FALSE) are automatically converted into numerical values when used in numerical operations. Specifically:\n\nTRUE is coerced to 1\nFALSE is coerced to 0\n\nBy applying the mean() function to a logical vector, R computes the average of its numerical representation, effectively calculating the proportion of TRUE values. In this case, the mean gives the relative frequency of upward price movements in the dataset.\nAdditionally, this approach relies on the fact that the mean() function automatically divides the sum of the values by their count. Since TRUE values are coerced to 1, the sum of the vector corresponds to the total count of upward movements. 5\n5 In fact, using sum(aapl_prices$diff_pos, na.rm = TRUE) would provide the total number of days where the stock price increased, as sum() adds up the 1s in the binary vector.This step also highlights the flexibility and power of R’s vectorized operations, where simple functions like mean() and sum() can directly compute meaningful results for logical or binary data without additional loops or transformations.\n\n\n2.7.4.5 Applying Probability Concepts\nAssume that price movements are independent of one another. This means that the direction of the stock price movement today does not influence tomorrow’s movement. With this assumption, we can calculate compound probabilities over multiple days.\n\nProbability of Consecutive Increases: What is the probability that the stock price increases every day over a week (5 trading days)?\n\\(P(U \\cap U \\cap U \\cap U \\cap U) = P(U)^5 = 0.51^5 = 0.035\\)\nProbability of One Decrease and Four Increases: Consider the probability of a decrease on any one day, and increases on the other four:\n\\(P(D \\cap U \\cap U \\cap U \\cap U) = 0.49 \\cdot 0.51^4 = 0.033\\)\nSince there are 5 such (mutually exclusive) scenarios (one for each trading day), the total probability is:\n\\(5 \\cdot 0.033 = 0.132\\)\n\n\n\n2.7.4.6 Reflecting on Assumptions\nIs this analysis any good? How could we possibly judge this? Interestingly the relative frequencies of up and down moves look similar to a random experiment of a few thousand tosses of a fair coin. But can we learn anything from this? Are the up and down moves independent? Independence - of course - does not follow from the result we just got.\nThe idea that stock prices may fluctuate randomly was first discussed systematically by Louis Bachelier (1870 - 1946), a French mathematician who studied stock price movements mathematically. In 1965 the economist Samuelson (1965) published an article with the title “Proof that stock prices fluctuate randomly”. He argues in this paper that randomness comes about through the active participation of traders seeking to maximize their wealth. A huge army of investors would aggressively use the smallest informational advantage and in doing so, they incorporate the information into market prices, which quickly eliminates this profit opportunity. This lead to a cornerstone of modern Finance theory called the random walk hypothesis of stock price fluctuations.\nIf this theory was true, it would give an argument, why we might look at the up and down movements in the stock price of apple as if it was the outcome of tossing a fair coin. In this case the probability of an up or a down movement should be 1/2 and with the number of trials approaching infinity the frequency of ups and downs should approach this probability.\nThe literature on stock price fluctuations which came later, however, presented evidence that stock prices are predictable to a certain degree and do not fluctuate randomly. A good reference summarizing this evidence is Lo and MacKinlay (2019) In this case our approach would perhaps produce a misleading answer.\nWe cannot give a clear cut answer here. The point of this brief discussion is that you just cannot apply a theoretical machinery mechanically without giving it further thought and without maintaining a healthy amount of skepticism. It is fascinating that there are situations where abstract theories, like the theory of probability, show a robust relation to real world phenomena. But the nature, the precise meaning and the robustness of this relation has to be investigated for each single case.\nAs Louis Bachelier and Paul Samuelson noted, randomness in financial markets may emerge from the interplay of rational traders, yet this randomness is not absolute. A nuanced understanding of market dynamics is crucial for drawing meaningful conclusions.\n\n\n\n2.7.5 Example: Benford’s Law and Trading Volumes\nLet us conclude this lecture with an example that ties together our understanding of empirical probabilities and relative frequencies while also showcasing a surprising pattern in real-world data. This example will further strengthen your R skills and prepare you for the assigned project.\n\n2.7.5.1 The Curious Case of Leading Digits\nFirst, let us define leading digits: the leading digit of a number is simply its first non-zero digit. For instance: - The leading digit of 7829 is 7. - The leading digit of 0.00453 is 4. - The leading digit of 10892 is 1.\nYou might expect that in a random dataset, all leading digits from 1 to 9 occur with roughly equal frequencies (approximately 11% each). However, real-world datasets often show a very different pattern: smaller digits like 1 appear more frequently than larger digits like 9. This pattern follows a logarithmic distribution known as Benford’s Law, which states: \\(P(d) = \\log_{10}\\left(1 + \\frac{1}{d}\\right)\\)\nwhere \\(d \\in \\{1, 2, \\dots, 9\\}\\).\n\n\n2.7.5.2 Benford’s Law in Trading Volumes\nLet’s see if trading volumes follow Benford’s Law. First, we extract the trading volumes from the aapl_prices dataset:\n\nvolumes &lt;- aapl_prices$volume\n\nNext, we filter out invalid values (e.g., zeros or missing values) and extract the leading digits:\n\nvalid_volumes &lt;- volumes[volumes &gt; 0 & !is.na(volumes)]\n\nleading_digits &lt;- as.numeric(substr(as.character(valid_volumes), 1, 1))\n\nLet’s break down this code:\nHere’s an explanation of the two code lines tailored for students:\n1. Filter Valid Trading Volumes\n\nvalid_volumes &lt;- volumes[volumes &gt; 0 & !is.na(volumes)]\n\nThis line ensures that only valid trading volumes are included in the analysis. Let’s break it down:\n\nvolumes &gt; 0:\n\nThis condition filters out any non-positive values (e.g., 0 or negative numbers).\nThese values are not meaningful for analyzing leading digits because they do not have valid non-zero digits.\n\n!is.na(volumes):\n\nThe is.na() function checks if a value is missing (NA).\nThe ! operator negates this, keeping only non-missing values.\n\nCombining Conditions:\n\nThe & operator combines the two conditions. Only entries that satisfy both (i.e., are greater than 0 and not missing) are retained.\n\nSubsetting:\n\nvolumes[...] applies these conditions to the volumes vector. The result is a new vector, valid_volumes, containing only the valid trading volumes.\n\n\n2. Extract Leading Digits\n\nleading_digits &lt;- as.numeric(substr(as.character(valid_volumes), 1, 1))\n\nThis line extracts the leading digit of each valid trading volume. Here’s how it works:\n\nConvert to Character Strings:\n\n\nhead(as.character(valid_volumes),5)\n\n[1] \"183198400\" \"207995200\" \"221513600\" \"123312000\" \"101572800\"\n\n\n\nSince trading volumes are numeric, we need to treat them as text to extract specific characters.\nas.character() converts each number into a string representation.\n\n\nExtract the First Character:\n\n\nhead(substr(as.character(valid_volumes), 1, 1),5)\n\n[1] \"1\" \"2\" \"2\" \"1\" \"1\"\n\n\n\nThe substr() function extracts substrings from each string.\n1, 1 specifies that we extract the substring starting at position 1 and ending at position 1 (i.e., the first character of the string). This gives the leading digit as a character.\n\n\nConvert Back to Numeric:\nas.numeric(...): The extracted leading digit is initially a character. as.numeric() converts it back into a numeric value, allowing us to perform calculations like counting frequencies.\n\nNow we compute the empirical frequencies of the leading digits and compare them to the theoretical probabilities:\n\n# Tabulate empirical frequencies\nemp_freq &lt;- table(leading_digits) / length(leading_digits)\n\n# Create a data frame with empirical and Benford probabilities\nbenford &lt;- data.frame(\n  Digit = 1:9,\n  Empirical_Freq = as.numeric(emp_freq[1:9]), # Match digits 1 to 9\n  Benford_Prob = log10(1 + 1 / (1:9))\n)\n\nHere’s an explanation of the code chunk, step by step:\n1. Tabulate Empirical Frequencies\n\nemp_freq &lt;- table(leading_digits) / length(leading_digits)\n\n\ntable(leading_digits):\n\nThis function counts how many times each unique value appears in leading_digits.\nIn our case, leading_digits contains numbers between 1 and 9, so the output will have counts for each of these digits.\n\nlength(leading_digits):\n\nThis calculates the total number of entries in leading_digits, i.e., the total number of leading digits observed.\n\ntable(...) / length(...):\n\nDividing the counts from table(leading_digits) by the total count gives the relative frequencies of each digit.\nThese are the empirical probabilities of each digit appearing as the leading digit.\n\n\n\n\n2.7.5.3 2. Create a Data Frame for Comparison\n\nDigit = 1:9:\n\nThis creates a column in the data frame with the digits 1 through 9. These are the leading digits we’re analyzing.\n\nEmpirical_Freq = as.numeric(emp_freq[1:9]):\n\nSubsetting emp_freq[1:9]:\n\nThe table() function includes entries for all unique values in leading_digits. If there are missing digits (e.g., if leading_digits doesn’t include a certain number), emp_freq may not have all 9 entries.\nBy explicitly subsetting with [1:9], we ensure the frequencies for digits 1 through 9 are aligned with the Digit column, ignoring any gaps or extra entries (e.g., 0).\n\nas.numeric():\n\nThe table() output is a special type of object, not a standard numeric vector. Converting it ensures that the values can be used for computations and stored in the data frame.\n\n\nBenford_Prob = log10(1 + 1 / (1:9)):\n\nThis calculates the theoretical probabilities for digits 1 through 9 according to Benford’s Law: \\(P(d) = \\log_{10}\\left(1 + \\frac{1}{d}\\right)\\)\n1:9 provides the range of digits for which we compute probabilities.\n\nCombining into a Data Frame:\n\nThe data.frame() function organizes the information into a table with three columns:\n\nDigit: The digits 1 through 9.\nEmpirical_Freq: The observed relative frequencies of these digits from emp_freq.\nBenford_Prob: The theoretical probabilities predicted by Benford’s Law.\n\n\n\nWe can now display the results\n\n# Display the comparison\nknitr::kable(benford)\n\n\n\n\nDigit\nEmpirical_Freq\nBenford_Prob\n\n\n\n\n1\n0.3072036\n0.3010300\n\n\n2\n0.1674419\n0.1760913\n\n\n3\n0.1185479\n0.1249387\n\n\n4\n0.0976744\n0.0969100\n\n\n5\n0.0713556\n0.0791812\n\n\n6\n0.0670448\n0.0669468\n\n\n7\n0.0620533\n0.0579919\n\n\n8\n0.0584231\n0.0511525\n\n\n9\n0.0502552\n0.0457575\n\n\n\n\n\n\n\n2.7.5.4 Interpreting the Results\nThe table above compares the observed frequencies of leading digits in Apple’s trading volumes with the predictions of Benford’s Law. The match is stunningly close. The example illustrates how this surprising regularity applies even in financial datasets like trading volumes.\n\n\n2.7.5.5 Broader Applications\nBenford’s Law has been observed across diverse datasets, such as: - Market capitalization of companies, - GDP of countries or regions, - Population data of cities or counties.\nIts applicability hinges on datasets spanning multiple orders of magnitude and not being artificially bounded. Deviations from Benford’s Law have even been used to detect fraud in tax filings and financial records.\nFor your project, you will explore whether Benford’s Law holds for another financial dataset, allowing you to test this “law of leading digits” in a real-world context.\n\n\n\n2.7.6 Enhancing Your Learning with an LLM: Debugging and Exploring Data Analysis Pitfalls\nOne of the most powerful ways to use a Large Language Model (LLM), like ChatGPT, is as a debugging companion and a tool for uncovering potential pitfalls in your data analysis. This can be particularly valuable as you learn new concepts, such as the ones covered in this lecture on probability and data analysis with R.\nUse Case: Debugging R Code and Avoiding Common Mistakes\nWhen working with R, especially as a beginner, you might encounter errors, unexpected outputs, or difficulties understanding how certain functions behave. Here’s how you can use an LLM to enhance your learning:\n1. Explaining Error Messages\nWhen you run into an error message in R, an LLM can help you interpret it and suggest solutions. For example:\nError Message:\nError in table(leading_digits): all arguments must have the same length\nHow to Use an LLM: - Copy the error message and your code into the LLM, and ask:\n\n\n\n\n\n\nPrompt\n\n\n\nI encountered this error in R. Here is my code: [paste your code]. Can you explain what went wrong and suggest how to fix it?”\n\n\n2. Exploring Alternatives and Best Practices\nLLMs can also suggest alternative ways to achieve the same task or point out best practices you might not be aware of.\nExample: You might ask:\n\n\n\n\n\n\nPrompt\n\n\n\nI used substr(as.character(valid_volumes), 1, 1) to extract leading digits. Are there other, possibly better ways to do this in R?”\n\n\n3. Checking Your Understanding with “What-If” Questions\nLLMs are great for exploring “what-if” scenarios that test your understanding of concepts.\nExample Questions:\n\n\n\n\n\n\nPrompt\n\n\n\nWhat happens if I include zero or negative values in the dataset when applying Benford’s Law?“*\n\n\nor you might ask\n\n\n\n\n\n\nPrompt\n\n\n\nIf my dataset has fewer than 100 observations, how reliable are the empirical probabilities in approximating theoretical probabilities?”\n\n\nThis type of interaction helps you connect the theoretical content (e.g., the weak law of large numbers) with practical considerations.\n4. Summarizing and Synthesizing Knowledge\nYou can use an LLM to review and consolidate your learning by asking it to summarize key concepts or connect them in new ways.\n\n\n\n\n\n\nPrompt\n\n\n\nCan you summarize the main differences between empirical probabilities and theoretical probabilities, and explain how they relate to Benford’s Law?\n\n\nThis exercise reinforces your understanding while revealing gaps or misconceptions.\nDebugging and exploring potential pitfalls are essential skills for any data scientist or analyst. By leveraging an LLM, you not only solve immediate problems but also gain deeper insights into your learning process. This approach fosters independence and critical thinking, preparing you to tackle more complex challenges in the future.\nAs you work on the project for this lecture, try using an LLM to explain error messages, explore alternative solutions, and answer your “what-if” questions. You might be surprised at how much you can learn from this collaborative process!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#summary-lecture-2",
    "href": "02-lecture2.html#summary-lecture-2",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.8 Summary",
    "text": "2.8 Summary\nIn this lecture we have dived a bit deeper into probability. We made some of our introductory concepts more precise and more general and learned about the important concepts of independence and how probabilities and frequencies of events in series of identical independent experiments are and are not related. We also learned about tools to go back and forth between probability theory and data and encountered our first financial dataset, a data frame for the stock pirce of Apple.\nThese are the probability concepts we have covered in this lecture:\nIn this lecture we have given precise definitions of our basic concepts of sample space, basic outcome, events and probability. This time we gave an abstract definition of probability which shares the basic properties we required for classical probability. We explained what discrete probability means and explained how we can build events by set theoretic operations of union, intersection, complements. We have also explained the meaning of mutually exlusive. We have explained the notion of empirical probability or frequency probability. We have discussed the weak law of large numbers which establishes for a given probability the number of identical independent trials that are needed such that the relative frequency of an event falls within any given bound around this probability. While relative frequencies are not probabilities they approach given probabilities in the limit of a sequence of identical independent trials. We have finally learned about the definition of independence of events. If two events \\(A\\) and \\(B\\) are independent the probability that \\(A\\) and \\(B\\) occur is the product of their individual probabilities.\nThese are the R concepts covered in this lecture: We learned what R objects are and that R has six types of atomic vectors, namely double, integer, character, logical, complex and raw. We have learned how to subset R objects by positive integers, negative integers, zero, blank spaces, logicals and names.\nThese are the applications we have covered in this lecture. Tossing a fair coin by simulation. reading data from a stored csv files and also reading a csv file directly from the internet. Using R’s subsetting functions to analyze up and down movements of stock price data and use empirical probabilities together with an independence assumption to compute the probability of certain sequences of up and down moves. Benford’s law of leading digits.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#project2",
    "href": "02-lecture2.html#project2",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.9 Project 2: Should we trust European supervisory bank data?",
    "text": "2.9 Project 2: Should we trust European supervisory bank data?\nThe European Banking Authority EBA conducts a biannual stress testing exercise for the biggest European banks every two years. In the stress test bank exposure data are collected and then particular stress scenarios are applied to the reported data. The goal is to find out whether the banks would have enough capital to withstand an adverse scenario. EBA makes a huge effort to publish the data that are the base of the stress test on its web site: https://www.eba.europa.eu/risk-analysis-and-data/eu-wide-stress-testing\nIn this project you are asked to use the knowledge you learned about empirical probabilities, R and Benford’s law to check whether the EBA stress testing data show the distribution of leading digits, you would expect from Benford’s law.\n\nGo to the EBA website https://www.eba.europa.eu/risk-analysis-and-data/eu-wide-stress-testing and download the file Credit Risk IRB (https://www.eba.europa.eu/assets/st21/full_database/TRA_CRE_IRB.csv). You can do so by downloading the file, storing it locally and then read it into R or you can read it directly from the web.\nWe want to study the distribution of leading digits in the Amounts reported in the EBA file of credit risk exposures. Now the csv file contains many different data that all somehow belong to the EBA stress test. We would not like to check all data but only exposure data. We need first to filter the data to make sure we have a meaningful collection of exposure data for all the banks. The description of the data and the data dimensions is in the files Metadata_TR.xlsx and Data_Dictionary.xlsx. You are welcome to study these data in detail. It will probably need more time than you have available. They are also quite complicated. Since the aim of this project is not directly to understand the eba-data but to work with your R-concepts and probability concepts, let me guide you here how to filter these data in 10 sequential steps. Note that this sequencing is for didactical reasons only and for the purpose not to loose oversight. With routine and experience all these steps can be done in one go as well:\n\nExtract all variables names, using the names()function.\nSelect all rows where the Scenario variable has value 1. Note that the symbol you need in the R syntax for equal is ==, the syntax is therefore Scenario == 1. You might check out the R-help entry Comparison for further details.\nFrom the resulting data-frame select all rows where the Country variable is not equal to 0. (hint: The not equal operator in the R syntax is !=). If you look into the Metadata-File you will see that 0 are all the aggregate exposures not broken down by country. Excluding these will give us country exposures.\nFrom the resulting data frame select all rows where the Portfolio variable has value 1 or 2.These codes describe the accounting rules under which the exposure values are reported, internal rating based (IRB) or standard approach (SA). As a hint you can use R’s subset operator %in% here so Portfolio %in% c(1,2) written with the approprate subsetting rule will select all rows where the Porfolio variable has value 1 or 2.\nFrom the resulting data frame choose all the rows where the Exposure variable is not 0.This gives again disaggregated numbers.\nFrom the resulting data frame choose all the rows where the Status variable has value 0.\nFrom the resulting data frame choose all the rows where the IFRS9_Stages variable has value 1,2, or 3.\nFrom the resulting data frame choose all the rows where the CR_guarantees variable is 0\nFrom the resulting data frame choose all the rows where the CR_exp_moratoria variable is 0.\nFrom the resulting data frame, drop all rows where the Amount variable is 0.\n\nCheck the type of the Amount variable.\nTransform the Amount variable to type numeric()\nCheck for NA in the Amount variable in the resulting data frame and if you find any, remove them.\nChange the Amount variable from the actual unit of Million Euros to the unit of 1 Euro 1 Euro and throw away data smaller than 1 after this transformation.\nSelect the leading digits from the Amount variable, using R’s string functions and add a variable with name LD to your data frame.\nCompare the empirical frequencies in the data with the theoretical frequencies from Benford’s law by creating an appropriate data frame. What can you say from this evidence?\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nFeller, William. 1968. An Introduction to Probability Theory and Its Applications. 3rd ed. Vol. 1. Wiley.\n\n\nLo, Andrew, and Craig MacKinlay. 2019. A Non-Random Walk down Wallstreet. Princeton University Press.\n\n\nSamuelson, Paul. 1965. “Proof That Properly Anticipated Prices Fluctuate Randomly.” Industrial Management Review 6.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#probability-and-the-language-of-sets",
    "href": "02-lecture2.html#probability-and-the-language-of-sets",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.3 Probability and the language of sets",
    "text": "2.3 Probability and the language of sets\nProbability theory relies on the language of sets to describe relationships between events. Understanding key set operations is essential for working with probabilities effectively.\nLet’s go through them and illustrate the concepts in the context of the examples we have already developed in lecture 1.\n\nUnion\n\nThe union of two events \\(A\\) and \\(B\\) represents all outcomes that belong to \\(A\\), \\(B\\) or in both. It is written \\(A \\cup B\\).\n\n\nLet us use the example of the experiment of rolling a die. The sample space \\({\\cal S}\\) is the set of all possible outcomes of rolling the dice \\({\\cal S}=\\{1,2,3,4,5,6\\}\\). Assume one event is that the outcome is 1, 2 or 3. In set notation, we would write \\(A = \\{1,2,3\\}\\). Let us also assume that the second event is that the outcome is some even number, i.e. 2, 4, 6. Again using set notation we would write \\(B = \\{2,4,6\\}\\). The event \\(A \\cup B\\) is then the set of all outcomes such that the outcome is in \\(A\\) or in \\(B\\) or in both or these sets.\nYou can implement set operations in R because R provides functions for computing set operations. Let us use the occasion to show you briefly how to use these functions in the context of this example: We define the sets \\(A\\) and \\(B\\) first using the assignment operator:\n\nA &lt;- c(1,2,3)\nB &lt;- c(2,4,6)\n\nWe compute the union by using the function union()\n\nunion(A,B)\n\n[1] 1 2 3 4 6\n\n\nwhich gives us the union of both sets.\nTo understand this operation better we can visualize the set union in this example by looking at Figure 2.1\n\n\n\n\n\n\n\n\nFigure 2.1: The meaning of set union\n\n\n\n\n\nThe sample space \\({\\cal S}\\) is the gray set containing all possible outcomes of our random experiment. Graphically the union of \\(A\\) and \\(B\\), \\(A \\cup B\\) is a subset of the sample space, the entire colored area.\n\nIntersection\n\nThe intersection of two events are all outcomes that are both in \\(A\\) and in \\(B\\). It is written as \\(A \\cap B\\).\n\n\nIn R we would implement this operation by using the function intersect() and apply it to our sets \\(A\\) and \\(B\\) we have defined before.\n\nintersect(A,B)\n\n[1] 2\n\n\nFigure 2.2 visualizes this operation graphically\n\n\n\n\n\n\n\n\nFigure 2.2: The meaning of set intersection\n\n\n\n\n\nThe intersection of \\(A\\) and \\(B\\), \\(A \\cap B\\) is the orange area containing the dice face with two points. Indeed two is both in \\(A\\) and in \\(B\\), which is exactly the meaning of set intersection.\n\nComplement\n\nThe complement of an event \\(A\\) within the sample space \\({\\cal S}\\) is the set of all outcomes that are in \\({\\cal S}\\) but not in \\(A\\). It is written as \\({\\cal S} \\setminus A\\).\n\n\nLets say we want to get the complement, or the set difference of \\(A \\cup B\\) with respect to the sample space \\({\\cal S}\\).\nThe R implementation of the set differecne operation is the function setdiff(). This is how we would tell R to compute the setdifference of the union of \\(a\\) and \\(B\\) and the sample space \\({\\cal S}\\) in our example of the die:\n\nS &lt;- c(1,2,3,4,5,6)\n\nsetdiff(S, union(A,B))\n\n[1] 5\n\n\nThis can again be visualized in ?fig-set-minus\n\n\n\n\n\nThe meaning of complement\n\n\n\n\nThis complement is the dice shown in the light redish area, i.e. all the elements of \\({\\cal S}\\) which are not in \\(A \\cup B\\).\n\nMutually Exclusive\n\nTwo events \\(A\\) and \\(B\\) are mutually exclusive if they can not occur simultaneously. This means \\(A \\cap B = \\emptyset\\), their intersection is empty.\n\n\nAn example in our context is the set of even outcomes \\(B=\\{2,4,6\\}\\) and the set of odd outcomes, let us call it \\(C=\\{1,3,5\\}\\). If we intersect these sets\n\nB &lt;- c(2,4,6)\nC &lt;- c(1,3,5)\n\nintersect(B,C)\n\nnumeric(0)\n\n\nwe get the empty set, which is expressed by R by giving the data type, in this case numeric, because we are intersecting sets of numeric values, followed by (0). This means, there is no numeric value in the intersection of \\(B\\) and \\(C\\).\nLet us discuss set operations a bit further by thinking about the probability of the union of two events \\(A\\) and \\(B\\) within the context of our visual examples. Remember that we had \\(A = \\{1,2,3 \\}\\) and $B = { 2,4,6}. Look at Figure 2.3\n\n\n\n\n\n\n\n\nFigure 2.3: The meaning of set union\n\n\n\n\n\nWe would like to know what is the probability of \\(P(A \\cup B)\\)? Now if we add up \\(P(A)\\) and \\(P(B)\\) we would assign a probability to the outcome \\(2\\) twice. Such double counting must be avoided and thus we have to subtract \\(P(A \\cap B)\\) the intersection, so that: \\(P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\\). Now you see what the qualification mutually exclusive does in our probability rule 3. When \\(A\\) and \\(B\\) are mutually exclusive \\(A \\cap B = \\emptyset\\) and in this case \\(P(A \\union B) = P(A) + P(B)\\). We can add up the probabilities because when events are mutually exclusive we can not double count events by adding up individual probabilities.\n\n\n\n\n\n\nNow you try\n\n\n\nIf you drop the qualification that \\(A\\) and \\(B\\) must be mutually exclusive in point 3 in the definition of probability. How would rule 3 have to be changed?\n\n\nHere’s a tip you could share with your students to encourage effective use of a Large Language Model (LLM) for deepening their understanding of the concepts and definitions introduced in this section:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#using-an-llm-to-deepen-your-understanding-of-set-theory-in-probability",
    "href": "02-lecture2.html#using-an-llm-to-deepen-your-understanding-of-set-theory-in-probability",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.4 Using an LLM to Deepen Your Understanding of Set Theory in Probability",
    "text": "2.4 Using an LLM to Deepen Your Understanding of Set Theory in Probability\nAn LLM like ChatGPT can be an incredibly helpful tool to explore concepts and solidify your understanding. Here are some example of what you could do:\n\n2.4.1 Ask for Clarifications\nIf a definition or concept isn’t clear, ask the LLM to explain it in simpler terms or using different examples. For instance:\n\n\n\n\n\n\nPrompt\n\n\n\n“What is the difference between the union and intersection of sets in probability? Can you give examples?”\n\n\n\n\n\n\n\n\nFollow up\n\n\n\n“Can you compare this to a real-life scenario, like rolling a die or flipping a coin?”\n\n\n\n\n2.4.2 Generate Additional Examples\nUse the LLM to create new examples similar to the ones in the lecture. This will give you more practice applying the concepts.\n\n\n\n\n\n\nPrompt\n\n\n\n“Give me an example of mutually exclusive events involving sports outcomes.”\n\n\n\n\n\n\n\n\nPrompt\n\n\n\n“Can you show a sample space and events for tossing two coins?”\n\n\n\n\n2.4.3 Simulate Visualizations and Code Interpretation\nWhile the LLM doesn’t directly produce visuals, you can ask it to describe how a diagram or R output would look. This helps connect theoretical concepts to their graphical representations. For example:\n\n\n\n\n\n\nPrompt\n\n\n\n“Describe what a Venn diagram looks like for \\(A \\cup B\\), \\(A \\cap B\\), and \\(A \\setminus B\\).”\n\n\n\n\n\n\n\n\nPrompt\n\n\n\n“What does the R function union(A, B) compute? How is it related to \\(A \\cup B\\)?”\n\n\n\n\n2.4.4 Practice Applying Definitions\nUse the LLM to test your understanding by quizzing yourself.\n\n\n\n\n\n\nPrompt\n\n\n\n“Ask me questions about the definitions of sample spaces, union, intersection, and complement.”\n\n\n\n\n\n\n\n\nPrompt\n\n\n\n“Give me a scenario and ask which set operation applies.”\n\n\n\n\n2.4.5 Explore Real-World Applications\nUse the LLM to explore how these concepts apply in real-world contexts beyond the lecture.\n\n\n\n\n\n\nPrompt\n\n\n\n“How is the concept of set intersection used in data science or finance?”\n\n\n\n\n\n\n\n\nPrompt\n\n\n\n“Explain how mutually exclusive events are important in designing experiments.”\n\n\n\n\n2.4.6 Learn R Through Step-by-Step Guidance\nIf you’re new to R, ask the LLM to guide you through using functions like union(), intersect(), and setdiff() step by step.\n\n\n\n\n\n\nPrompt\n\n\n\n“Explain how to use setdiff() in R with an example involving dice rolls.”\n\n\n\n\n\n\n\n\nFollow up\n\n\n\n“How does this output relate to the complement of a set?”\n\n\n\nDive Deeper into Probability Rule 3:\n\nUse the LLM to generate explanations and examples that clarify how probabilities relate to set operations.\n\n\n\n\n\n\nFollow up\n\n\n\n“Explain why \\(P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\\).”\n\n\n\n\n\n\n\n\nFollow up\n\n\n\n“Can you provide a numerical example to illustrate this rule?”\n\n\n\n\n2.4.7 Simulate Discussions\nAsk the LLM to take the role of a peer or instructor to simulate a conversation about the material.\n\n\n\n\n\n\nPrompt\n\n\n\n“Pretend you are my study partner. Let’s discuss the complement of events and its significance in probability.”\n\n\nBy actively engaging with the LLM through these kinds of prompts, you can practice, explore, and deepen your understanding of the material beyond the lecture. Try it alone or with your group.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#summary",
    "href": "02-lecture2.html#summary",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.8 Summary",
    "text": "2.8 Summary\nIn this lecture, we explored foundational concepts in probability theory and developed practical skills for working with R. Here’s a summary of what we covered:\n\n2.8.0.1 Probability Concepts\n\nPrecise definitions of:\n\nSample space: The set of all possible outcomes of an experiment.\nBasic outcomes: Individual elements of the sample space.\nEvents: Subsets of the sample space.\nProbability: A numerical measure of the likelihood of an event, satisfying the key properties of non-negativity, normalization, and additivity.\n\nDiscrete probability:\n\nHow probabilities are assigned to events in a finite or countably infinite sample space.\nThe construction of events using set operations like union, intersection, and complement.\nThe concept of mutually exclusive events and its implications for probabilities.\n\nEmpirical probability (or frequency probability):\n\nThe relative frequency of an event in a series of repeated experiments.\nHow empirical probabilities approximate theoretical probabilities as the number of trials increases, as demonstrated by the weak law of large numbers.\n\nIndependence of events:\n\nDefinition: Two events (A) and (B) are independent if (P(A B) = P(A) P(B)).\nImplications for computing probabilities in repeated or combined experiments.\n\n\n\n\n2.8.0.2 R Concepts\n\nR Objects:\n\nOverview of atomic vectors and their six types: double, integer, character, logical, complex, and raw.\nAttributes of atomic vectors, such as names, dimensions, and classes.\nIntroduction to data frames, the primary data structure for organizing and analyzing tabular data in R.\n\nSubsetting in R:\n\nMethods for subsetting R objects using positive integers, negative integers, zero, blank spaces, logical vectors, and names.\nPractical examples to manipulate data frames and vectors efficiently.\n\nString manipulation in R:\n\nExtracting and processing information from character data.\n\n\n\n\n\n2.8.0.3 Applications\n\nSimulating coin tosses:\n\nUsing R to simulate repeated trials and compute relative frequencies.\n\nReading data:\n\nLoading datasets from stored CSV files and directly from online sources.\n\nStock price analysis:\n\nUsing subsetting techniques to analyze up and down movements in stock prices.\nComputing empirical probabilities of price movements and using independence assumptions to estimate probabilities of sequences of moves.\n\nBenford’s Law:\n\nExploring the surprising regularity of leading digits in real-world datasets.\nApplying Benford’s Law to trading volumes and comparing empirical distributions to theoretical predictions.\n\n\nThrough this lecture, we reinforced the connection between probability theory and data analysis, demonstrating how abstract concepts like empirical probabilities and independence can be applied in real-world scenarios using R. The integration of theoretical ideas with computational tools prepares you for more advanced analysis and real-world problem-solving.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "02-lecture2.html#project-2-financial-data-forensics-investigating-financial-reports-using-benfords-law",
    "href": "02-lecture2.html#project-2-financial-data-forensics-investigating-financial-reports-using-benfords-law",
    "title": "2  Probability: Basic Definitions and Rules",
    "section": "2.9 Project 2: Financial Data Forensics – Investigating Financial Reports Using Benford’s Law",
    "text": "2.9 Project 2: Financial Data Forensics – Investigating Financial Reports Using Benford’s Law\n\n2.9.1 Overview\nThis project challenges you to apply Benford’s Law to detect potential anomalies in financial data. By analyzing the leading digits of revenue and expenditure data for a set of companies, you will explore whether these datasets follow the natural logarithmic distribution predicted by Benford’s Law. Through this project, you will reinforce your understanding of empirical probabilities and their applications, while also practicing critical data analysis skills in R.\n\n\n2.9.2 Objectives\n\nAnalyze the distribution of leading digits in revenue and expenditure data.\nCompare empirical distributions with the theoretical predictions of Benford’s Law.\nIdentify and interpret deviations from Benford’s Law.\nReflect on the implications of your findings in the context of financial forensics.\n\n\n\n2.9.3 Steps\nStep 1: Understand the Research Question Your main tasks are: 1. To determine if the leading digits of revenues and expenditures conform to Benford’s Law. 2. To interpret deviations, particularly in expenditure data, which may suggest anomalies such as fraud or manipulation.\nStep 2: Obtain and Inspect the Dataset\n\nDownload the Dataset:\n\nMock Dataset: You will receive a CSV file named company_financials.csv, containing simulated data for revenues and expenditures of 200 companies. This dataset includes some subtle anomalies in the expenditures.\n\nInspect the Data:\n\nLoad the dataset in R and examine its structure using functions like head(), summary(), and str().\nEnsure you understand the data columns:\n\nCompanyID: A unique identifier for each company.\nRevenue: The revenue of the company (in dollars).\nExpenditure: The expenditure of the company (in dollars).\n\n\n\nStep 3: Prepare the Data\n\nFilter Valid Data:\n\nExclude invalid entries:\n\nNon-positive values (e.g., 0 or negative numbers).\nMissing values (NA).\n\n\nExtract Leading Digits:\n\nUse string manipulation to extract the first digit from each valid value:\n\n\nStep 4: Analyze the Data\n\nCompute Empirical Frequencies:\n\nTabulate the frequencies of the leading digits for revenues and expenditures:\n\nCompare with Benford’s Law:\n\nCreate data frames for comparison:\n\nVisualize the Results:\n\nPlot bar charts comparing empirical and theoretical distributions for revenues and expenditures.\n\n\nStep 5: Interpret the Results\n\nEvaluate Conformity:\n\nDoes the revenue data closely match Benford’s predictions?\nDo expenditures show significant deviations?\n\nHypothesize Causes:\n\nWhat might explain deviations in expenditures? Consider:\n\nRounded or artificial values.\nAnomalies such as fraud.\n\n\nProbability Context:\n\nRelate empirical frequencies to probabilities and discuss the implications of large sample sizes.\n\n\nStep 6: Submit Your Work\n\nA short report summarizing:\n\nYour approach to data preparation and analysis.\nA comparison of the revenue and expenditure distributions with Benford’s Law.\nYour interpretation of any anomalies.\n\nWell-commented R code for your analysis.\n\nDeliverables\n\nAnalysis Report:\n\nInclude plots and tables summarizing your findings.\n\nR Script:\n\nSubmit a clear and well-commented R script.\n\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nFeller, William. 1968. An Introduction to Probability Theory and Its Applications. 3rd ed. Vol. 1. Wiley.\n\n\nLo, Andrew, and Craig MacKinlay. 2019. A Non-Random Walk down Wallstreet. Princeton University Press.\n\n\nSamuelson, Paul. 1965. “Proof That Properly Anticipated Prices Fluctuate Randomly.” Industrial Management Review 6.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability: Basic Definitions and Rules</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html",
    "href": "03-lecture3.html",
    "title": "3  Conditional Probability",
    "section": "",
    "text": "3.1 Why neglecting conditional probability may be expensive: A case study.\nWith this motivation in mind let us turn to a historical example that demonstrates the importance of understanding conditional probability: the financial crisis of 2007-2008. This crisis revealed how wrong assumptions about independence and neglect of dependence in events and conditional probabilities can lead to systemic failures in structured finance.1\nTo understand the real world aspects of this example it is necessarry to understand some basic ideas of structured finance and the engineering of specific risk profiles from a portfolio of risky securities in the first place. I will explain the finance context with a simple and stylized example and then discuss how understanding conditional probability may help us to make better financial decisions.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#understanding-structured-finance-bonds-pools-and-tranches",
    "href": "03-lecture3.html#understanding-structured-finance-bonds-pools-and-tranches",
    "title": "3  The Concept of Conditional Probability",
    "section": "",
    "text": "3.1.1 Bonds and Credit Risk\nBond, face value, par value : A bond is a financial instrument where the issuer agrees to pay the holder a specific amount, the face value or par value, at maturity. Bonds are widely used as fixed-income securities but carry the risk of default if the issuer faces financial difficulties.\nTo quantify this risk, bonds are rated by agencies such as Moody’s and Standard & Poor’s. Investment-grade bonds are considered low-risk, while speculative or “junk” bonds are riskier and more likely to default. Here is a summary of their rating schemes and what the ratings mean in words:\n\n\n\nRating Category\nMoody’s\nStandard & Poor’s\n\n\n\n\nHigh grade\nAaa\nAAA\n\n\n\nAa\nAA\n\n\nMedium grade\nA\nA\n\n\n\nBaa\nBBB\n\n\nSpeculative grade\nBa\nBB\n\n\n\nB\nB\n\n\nDefault danger\nCaa\nCCC\n\n\n\nCa\nCC\n\n\n\nC\nC\n\n\n\n\nD\n\n\n\n\n\n3.1.2 Pooling and Tranching: The Innovation\nStructured finance emerged in the early 2000s as a way to manage risk through pooling and tranching. By pooling risky assets and dividing cash flows into “tranches” with distinct risk profiles, financial engineers created new bonds, including investment-grade securities, from portfolios of junk bonds. A major product of this innovation was the mortgage-backed security (MBS).\n\n3.1.2.1 An Illustrative Example: Building Structured Finance in Steps\nLet us develop an intuitive understanding of structured finance and its relation to probability through a simplified example, which I learned from Karl Schmedder’s course mentioned at the beginning.2\n2 See https://www.coursera.org/learn/introductiontoprobability\n3.1.2.1.1 A Simple Event Tree for One Bond\nConsider a single bond you can own today that pays €1 at maturity at some point in the future. Time is often abbreviated as \\(t\\) and the points in time are symbolized by letting \\(t\\) take different values like \\(t=0\\) for today and \\(t=1\\) for a future point in time, say a year from today.\nThis bond has a 10% chance of default, meaning there is a 90% chance it will not default. With a default probability of 10%, this bond would likely receive a speculative grade rating, such as ‘B’ or ‘B-’ in the rating tables presented earlier. This poor rating reflects the significant risk of non-payment associated with such a bond, which could deter risk-averse investors and highlight its ‘junk’ bond status. The payoff is structured as follows:\n\nIf the bond does not default (“N”), the payoff is €1.\nIf the bond defaults (“D”), the payoff is €0.\n\nThis situation can be represented as a simple probability tree of Figure 3.1\n\n\n\n\n\n\n\n\nFigure 3.1: Event tree for one bond\n\n\n\n\n\nThe graph above visualizes the outcomes of a single bond. Each node represents a possible state of the bond at different times:\n\n\\(t=0\\) is the starting point.\n\\(t=1\\) No Default \\(N\\) occurs with a probability of \\(P(N) = 0.9\\).\n\\(t=1\\) Default \\(D\\) occurs with a probability of \\(P(D) = 0.1\\).\n\nYou could see this in analogy to the toss of a coin with the difference that both sides of the coin show with different probability.\n\n\n\n3.1.2.2 Combining Two Bonds with Independence Assumption\nWe now combine two such bonds into a portfolio. The assumption of independence implies that the defaults of these bonds occur independently of each other.\nWhile this assumption simplifies calculations, it was historically used by financial engineers to justify creating tranches from risky portfolios. The reasoning was that diversification reduces the likelihood of joint defaults, making some tranches appear safer.\nAt the time, financial engineers relied on historical data and market conditions to argue for this independence. Defaults were often uncorrelated under normal economic conditions, and diversification was seen as a proven strategy for mitigating risk. For example, if bond defaults were driven by isolated events (such as company-specific issues), the assumption of independence seemed reasonable. Moreover, the packaging of diverse assets from different industries into portfolios strengthened the appearance of safety, as individual economic shocks were less likely to affect the entire portfolio simultaneously.\nHowever, this reasoning neglected systemic risks. During economic downturns or financial crises, defaults often become highly correlated due to shared macroeconomic pressures, such as declining housing markets or credit tightening. For instance, in the lead-up to the 2008 financial crisis, rising mortgage defaults were driven by broader economic factors that impacted many bonds simultaneously. WIth this in mind it would be not pausible to assume that bonds can be stacked together in a portfolio without the default risks of one being not pushed up by the default risk of others.\nEven without the formal use of probability theory, financial engineers could have questioned whether diversification truly guaranteed independence in the context of systemic risks.\nThe idea that junk plus junk could be transformed into investment-grade bonds through pooling should have raised skepticism. Careful critical thinking—considering broader economic dependencies—would have revealed that this transformation was too good to be true. By ignoring these dependencies, financial engineers failed to see how small cracks in the system could cascade into systemic failures.3\n3  A famous voice at the time warning about the flawed reasoning was Raghuram Rajan, former chief economist of the International Monetary Fund. He warned that rather than reducing risk through diversification, CDOs and other derivatives spread risk and uncertainty about the value of the underlying assets more widely. But let us not jump ahead and try to see how the tree for two bonds looks like when we assume independence in Figure 3.2.\n\n\n\n\n\n\n\n\nFigure 3.2: Event tree for two bonds with independent default risk\n\n\n\n\n\nThe outcome of combining two bonds can be represented as a double event tree, showing all possible combinations of defaults and no defaults at \\(t=1\\): picture here\n\n\n3.1.2.3 Pooling and Tranching\nWhen you look at this portfolio under the independence assumption there seems to be room for reengineering the risk profile of this portfolio. In all outcomes but in the one where both bonds default you can guarantee a payoff of 1. There remains an adverse outcome, where both bonds default in which case you can pay out nothing. But under independence this risk is small. The probability of this event - remember our treatment of independent events in the first lecture - would be: \\(P(D) \\times P(D) = 0.1 \\times 0.1 = 0.01\\) Pretty low. For example assume that the probability of default refer to the probability of the bond defaulting over a year, the usual time frame taken in ratings, this would be a one in a hundered years event. In \\(99%\\) we would get a sure payoff of 1.\nSo this is the idea. We pool the payoffs of both securities and define two new securities by changing their payoff profile. The first one pays always 1 except when both bonds default in which case this bond pays 0. The other one will always pay 0 except in the case where both bonds do not default. This is under independence an event with probability \\(P(N) \\times P(N) = 0.81\\). Rember the complementarity rule? This says that the second bond will thus have a default probability of \\(19\\) % instead of \\(10%\\) it would be close to toxic junk now.\nHere is picture how you can visualize this piece fo financial magic.\n\n\n\n\n\n\n\n\nFigure 3.3: Event tree for two bonds with independent default risk with pooling and tranching\n\n\n\n\n\nWhat is done here is that the aggregate payoffs of both bonds are collected in a pool and new securities - called P - in this picture are issued against the pool. One, the upper one is now an investment grade asset paying 1 in every state except one and the other is a toxic junk bond paying always 0 except in one state. Note that the investment grade status could be engineered under the assumption that the risks are independent.\nNow, let us consider a hypothetical question: How would the event tree change if the independence assumption does not hold? Dependence would alter the probabilities in a way that reflects the increased likelihood of joint defaults during systemic events.\nSuppose we now assume that the probability of Bond 2 defaulting changes rather than staying unchanged under the condition that Bond 1 has defaulted:\n\nIf Bond 1 does not default, Bond 2 defaults with probability 0.1 (as before).\nIf Bond 1 does default, Bond 2 defaults with a higher probability of 0.6 due to systemic dependence.\n\nThis dependence reflects a scenario where defaults are more likely to occur together, such as during an economic downturn. The resulting event tree can be visualized as follows:\n\n\n\n\n\n\n\n\nFigure 3.4: Event tree for two bonds with independent default risk with pooling and tranching with dependent default risk\n\n\n\n\n\nOn the first sight this looks almost identical to the picture before. Only the numbers on the edges of the second tree have changed. These changed numbers reflect the idea that the event that one bond has defaultet changes the probability of the second bond defualting as well. How could such a dependence occur?\nHere’s a real-world example to illustrate how dependence can occur: In the context of bonds, dependence in default probabilities can arise from shared exposure to systemic risks or interconnected factors. For instance, consider two companies that issue bonds and operate in the same industry, such as the energy sector. If oil prices plummet due to an economic downturn or geopolitical instability, both companies might experience financial stress, making it more likely that one default is followed by another.\nAnother example is during a financial crisis, such as the 2008 global financial meltdown. A bank’s default on its obligations can lead to cascading defaults in other institutions due to counterparty risks or a general loss of confidence in the financial system. In such cases, the probability of a second default is no longer independent of the first because the events are tied to the same underlying macroeconomic factors.\nThese examples highlight that the assumption of independence between bond defaults might hold under normal market conditions but breaks down during systemic crises. Such dependencies must be carefully modeled to avoid underestimating risk, as was the case in structured finance products leading up to the 2008 crisis.\nA prudent risk manager must keep such a scenario in mind when he analyzes a portfolio. Think about it in the context of the toy example. In the first case the default risk of the first asset created by pooling and tranching was \\(P(D) \\times P(D) = 0.1 \\times 0.1 = 0.01\\). Under a scenario with dependent risks this changes to \\(P(D) \\times P(D | D) = 0.1 \\times 0.6\\), a risk larger by a factor of 6! While the first bond would be rated as investment grade, the second would be rated as speculative grade and the magic from pooling and tranching suddenly disappears. Junk plus junk remains junk after all.\n\n\n\n3.1.3 Analysis of Dependence\nIn this dependent tree:\n\nThe likelihood of both bonds defaulting increases significantly when one bond defaults.\nThe probability of joint defaults is no longer the product of independent probabilities but instead reflects their dependence.\n\nThis dependence shows why pooling junk bonds into tranches and assuming independence can be misleading. Junk plus junk remains junk if defaults are correlated. The assumption of independence is critical for the logic of pooling and tranching to create investment-grade securities.\n\n\n3.1.4 Conditions for Pooling and Tranching to Work\nFor pooling and tranching to reduce overall risk and create safe tranches:\n\nDiversification: Assets must come from independent sectors with minimal systemic risk.\nStable Macroeconomic Conditions: Systemic risks must be low to maintain independence assumptions.\nTransparent Modeling: Dependence structures must be explicitly modeled and accounted for in risk assessments.\n\nThe neglect of these conditions led to a flawed sense of security in structured finance, which contributed to the 2008 financial crisis.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Concept of Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#motivating-conditional-probability",
    "href": "03-lecture3.html#motivating-conditional-probability",
    "title": "3  The Concept of Conditional Probability",
    "section": "3.2 Motivating Conditional Probability",
    "text": "3.2 Motivating Conditional Probability\nHaving seen the importance of independence and dependence in financial modeling, it is clear that these concepts directly relate to conditional probability. Conditional probability formalizes how the probability of one event changes when another event is known to occur, providing a framework for understanding dependencies quantitatively.\nWe now can give the\n\nFormal definition of conditional probability\n\nLet \\(A\\) and \\(B\\) be given events. We define the conditional probability of \\(A\\) given \\(B\\) as \\[\\begin{equation*}\nP(A\\,|\\,B) = \\frac{P(A \\cap B)}{P(B)}\\,\\,\\, \\text{provided}\\,\\,\\, P(B) \\neq 0\n\\end{equation*}\\]\n\n\nNote that for conditional probabilities we have for two events \\(A\\) and \\(B\\), that \\(P(A|B) \\neq P(B|A)\\). To see this assume that \\(P(A) \\neq P(B)\\) and \\(P(A) \\neq 0\\) and \\(P(B)\\neq 0\\).\nWe then get: \\[\\begin{equation*}\nP(A|B) = \\frac{P(A\\cap B)}{P(B)} = \\frac{P(B \\cap A)}{P(B)}\n\\end{equation*}\\] since \\(P(A \\cap B) = P(B \\cap A)\\). It follows that \\[\\begin{equation*}\n\\frac{P(B \\cap A)}{P(B)} \\neq \\frac{P(B \\cap A)}{P(A)} = P(B|A)\n\\end{equation*}\\] since we have assumed that \\(P(A) \\neq P(B)\\). Therefore \\(P(A|B) \\neq P(B|A)\\). You can check this with the stock example, we discussed before.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Concept of Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#the-multiplication-rule",
    "href": "03-lecture3.html#the-multiplication-rule",
    "title": "3  The Concept of Conditional Probability",
    "section": "3.3 The multiplication rule",
    "text": "3.3 The multiplication rule\nThe following formula is often called the multiplication rule and is just a rewritten form of the definition of conditional probability.\n\nMultiplication rule\n\nGiven events \\(A\\) and \\(B\\) it holds that \\[\\begin{equation*}\nP(A \\cap B) = P(A | B)\\times P(B)\n\\end{equation*}\\]\n\n\nThe multiplication rule can give us a deeper insight into the notion of independence, we discussed earlier. Remember that two events \\(A\\) and \\(B\\) are independent if \\(P(A \\cap B) = P(B \\cap A) = P(A) \\times P(B)\\).\nIf we combine this rule with the concept of conditional probability, we see that if two events \\(A\\) and \\(B\\) are independent, then \\[\\begin{equation*}\nP(A|B) = \\frac{P(A \\cap B)}{P(B)} = \\frac{P(A) \\times P(B)}{P(B)} = P(A)\n\\end{equation*}\\] and \\[\\begin{equation*}\nP(B|A) = \\frac{P(B \\cap A)}{P(A)} = \\frac{P(A) \\times P(B)}{P(A)} = P(B)\n\\end{equation*}\\]\nThis formula says that if two events are independent the probability of \\(A\\) is not influenced by the event \\(B\\) occurring and the probability of event \\(B\\) is not influenced by the event \\(A\\) occurring.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Concept of Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#law-of-total-probability",
    "href": "03-lecture3.html#law-of-total-probability",
    "title": "3  The Concept of Conditional Probability",
    "section": "3.4 Law of total probability",
    "text": "3.4 Law of total probability\nThe multiplication rule implies a further rule, which is often called the law of total probability in the literature. We state the law for a simple case for two disjoint events, which can be generalized in a straightforward way to \\(N\\) disjoint events.\n\nLaw of total probability\n\nSuppose the sample space \\({\\cal S }\\) is divided into two disjoint events \\(B_1\\) and \\(B_2\\), which cover the sample space then for any event \\(A\\) we have \\[\\begin{align}\nP(A)&= P(A\\cap B_1) + P(A\\cap B_2)\\\\\n&=P(A|B_1)P(B_1) + P(A|B_2)P(B_2)\n\\end{align}\\] Such covers of disjoint sets are called a partition of the sample space. It can abstractly be visualized as follows:\n\n\n\n\n\n\n\nA Visualization of total probability\n\n\n\n\nNote that in this picture \\(B_1 \\cap B_2 = \\emptyset\\) and \\(B_1 \\cup B_2 = {\\cal S}\\), hence \\(B_1\\) and \\(B_2\\) form a partition of the sample space. The probability of \\(A\\), the red set can then be determined by the law of total probability.\nAs an example, consider a stock analysis problem, where you learn that a company is planning to launch a new project that is likely to affect the companies stock price. There is a \\(60 \\%\\) probability that a project will be launched. If this happens there is \\(75 \\%\\) probability that the stock price will increase. In case the project is not launced this probability is only \\(30 \\%\\).\nYou might think of this situation in terms of a contingency table:\n\n\n\n\n\n\n\n\n\n\nLaunch Project\nDon’t Launch Project\n\n\n\n\n\nStock price rise\n0.45\n0.12\n0.57\n\n\nStock price not rising\n0.15\n0.28\n0.43\n\n\nTotal\n0.6\n0.4\n1\n\n\n\nSay we want to assess the probability that the stock price will rise, given these data. Then we can apply the law of total probability is: \\(0.45 + 0.12 = 0.57\\).\n\n\n\n\nTooze, Adam. 2018. Crashed. How a Decade of Financial Crisis Changed the World. Viking.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Concept of Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#why-neglecting-conditional-probability-may-be-expensive-a-case-study.",
    "href": "03-lecture3.html#why-neglecting-conditional-probability-may-be-expensive-a-case-study.",
    "title": "3  Conditional Probability",
    "section": "",
    "text": "1  See Tooze (2018): For an engaging and comprehensive exploration of the great financial crisis of 2007 - 2008 and its causes and aftermath. It is highly recommended for deeper study.\n\n3.1.1 Bonds and Credit Risk\nA bond is a financial instrument where the issuer agrees to pay the holder a specific amount, the face value or par value, at maturity. Bonds are widely used as fixed-income securities but carry the risk of default if the issuer faces financial difficulties.\nTo quantify this risk, bonds are rated by agencies such as Moody’s and Standard & Poor’s. Investment-grade bonds are considered low-risk, while speculative or “junk” bonds are riskier and more likely to default. Here is a summary of their rating schemes and what the ratings mean in words:\n\n\n\nRating Category\nMoody’s\nStandard & Poor’s\n\n\n\n\nHigh grade\nAaa\nAAA\n\n\n\nAa\nAA\n\n\nMedium grade\nA\nA\n\n\n\nBaa\nBBB\n\n\nSpeculative grade\nBa\nBB\n\n\n\nB\nB\n\n\nDefault danger\nCaa\nCCC\n\n\n\nCa\nCC\n\n\n\nC\nC\n\n\n\n\nD\n\n\n\n\n\n3.1.2 Pooling and Tranching: The Innovation\nStructured finance emerged in the early 2000s as a way to manage risk through pooling and tranching. By pooling risky assets and dividing cash flows into “tranches” with distinct risk profiles, financial engineers created new bonds, including investment-grade securities, from portfolios of bonds which individually would be rated as speculative grade or junk bonds. A major product of this innovation was the mortgage-backed security (MBS). Many other products were then invented using similar financial engineering ideas.\nLet us develop an intuitive understanding of structured finance and its relation to probability through a simplified example, which I learned from Karl Schmedder’s course.2\n2 See https://www.coursera.org/learn/introductiontoprobability\n\n3.1.3 A Simple Event Tree for One Bond\nConsider a single bond you can own today that pays €1 at maturity at some point in the future. Time is often abbreviated as \\(t\\) and the points in time are symbolized by letting \\(t\\) take different values like \\(t=0\\) for today and \\(t=1\\) for a future point in time, say a year from today.\nThis bond has a 10% chance of default, meaning there is a 90% chance it will not default. With a default probability of 10%, this bond would likely receive a speculative grade rating, such as ‘B’ or ‘B-’ in the rating tables presented earlier. This poor rating reflects the significant risk of non-payment associated with such a bond, which could deter risk-averse investors and highlight its ‘junk’ bond status. The payoff is structured as follows:\n\nIf the bond does not default (\\(N\\)), the payoff is €1.\nIf the bond defaults (\\(D\\)), the payoff is €0.\n\nThis situation can be graphically represented as a simple probability tree of Figure 3.1\n\n\n\n\n\n\n\n\nFigure 3.1: Event tree for one bond\n\n\n\n\n\nThe graph above visualizes the outcomes of a single bond. Each node represents a possible state of the bond at different times:\n\n\\(t=0\\) is the starting point.\n\\(t=1\\) No Default \\(N\\) occurs with a probability of \\(P(N) = 0.9\\).\n\\(t=1\\) Default \\(D\\) occurs with a probability of \\(P(D) = 0.1\\).\n\nYou could see this in analogy to the toss of a coin with the difference that both sides of the coin show with different probability. With this analogy - using the concepts of the last two lectures - you can understand the bond in probabilistic terms as a random experiment with a sample space consisting of two basic outcomes, \\(N\\) and \\(D\\) with given probabilities \\(P(N)\\) and \\(P(D)\\).\n\n\n3.1.4 Combining Two Bonds with Independence Assumption\nWe now combine two such bonds into a portfolio. The assumption of independence implies that the defaults of these bonds occur independently of each other. This means that the default of one bond has no influence on the probability of the other bond defaulting. Under the assumption of independence you would treat the default probability of one bond as unconnected with the default probability of the other.\nWhile this assumption simplifies calculations, it was historically used by financial engineers to justify creating tranches from risky portfolios. The reasoning was that diversification reduces the likelihood of joint defaults, making some tranches appear safer.\nAt the time, financial engineers relied on historical data and market conditions to argue for this independence. Defaults were often uncorrelated under normal economic conditions, and diversification was seen as a proven strategy for mitigating risk. For example, if bond defaults were driven by isolated events (such as company-specific issues), the assumption of independence seemed reasonable. Moreover, the packaging of diverse assets from different industries into portfolios strengthened the appearance of safety, as individual economic shocks were less likely to affect the entire portfolio simultaneously.\nHowever, this reasoning neglected systemic risks. During economic downturns or financial crises, defaults often become highly correlated due to shared macroeconomic pressures, such as declining housing markets or credit tightening. For instance, in the lead-up to the 2008 financial crisis, rising mortgage defaults were driven by broader economic factors that impacted many bonds simultaneously. With this in mind it would be not plausible to assume that bonds can be stacked together in a portfolio without the default risks of one being not pushed up by the default risk of others.\nEven without the formal use of probability theory, financial engineers could have questioned whether diversification truly guaranteed independence in the context of systemic risks.\nThe idea that junk plus junk could be transformed into investment-grade bonds through pooling should have raised skepticism. Careful critical thinking—considering broader economic dependencies—would have revealed that this transformation was too good to be true. By ignoring these dependencies, financial engineers failed to see how small cracks in the system could cascade into systemic failures.3\n3  A famous voice at the time warning about the flawed reasoning was Raghuram Rajan, former chief economist of the International Monetary Fund. He warned that rather than reducing risk through diversification, CDOs and other derivatives spread risk and uncertainty about the value of the underlying assets more widely. But let us not jump ahead and try to see how the tree for two bonds looks like when we assume independence in Figure 3.2.\n\n\n\n\n\n\n\n\nFigure 3.2: Event tree for two bonds with independent default risk\n\n\n\n\n\n\nThe outcome of combining two bonds can be represented as a double event tree, showing all possible combinations of defaults and no defaults at \\(t=1\\). Let me unpack this more complex tree for you.\nSince we have a portfolio of two bonds, instead of one as before, we have now two event trees combined. Since we have to take into account all of the possible combinations of basic outcomes this means that we have to attach a new bond event tree to each outcome of the initial tree.\nNote the time index. In the example the realizations of basic outcomes for the portfolio happen simultaneously. So the walk from the origin to the end of the tree along a path is taking place in one time step and only the outcomes at \\(t=1\\) are observed.\nAt the edges we write the probability of the outcomes. For example \\(P(N)\\) is the probability of the first bond (represented by the upper tree) is not defaulting whereas \\(P(D)\\) denotes the probability of the bond not defaulting. The assumption of independence is hidden in this tree by modelling the probabilities of \\(N\\) and \\(D\\) for the second bond in exactly the same way no matter whether the first bond defaults or not. It is modelled in anaology to the toss of two fair coins. The probability of the second coin showing Heads is \\(1/2\\) no matter whether the first coin shows Heads or Tails.\nAt the end of the tree we have written the outcome of each path in the notation \\[\\begin{equation*}\nB_{\\text{state of bond 1 at} \\, t = 1 \\, \\text{state of bond 2 at} \\, t=1} = \\binom{\\text{payoff of bond 1 at } \\, t= 1}{\\text{payoff of bond 2 at } \\, t = 1}\n\\end{equation*}\\] So, for example, \\(B_{NN} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\) means that bond 1 does not default and bond two does not default (\\(B_{NN}\\)). Bond 1 has in this case a payoff of 1 and bond 2 also has a payoff of 1.\n\n\n\n3.1.5 Pooling and Tranching\nWhen you look at this portfolio under the independence assumption there seems to be room for re-engineering the risk profile of this portfolio. In all outcomes but in the one where both bonds default you can guarantee a payoff of 1. There remains an adverse outcome, where both bonds default in which case you can’t pay out anything. But under the assumption of independence this risk is small. The probability of this event - remember our treatment of independent events in the first lecture - would be: \\(P(D) \\times P(D) = 0.1 \\times 0.1 = 0.01\\). Pretty low, actually. For example assume that the probability of default refer to the probability of the bond defaulting over a year, the usual time frame taken in ratings, this would be a one in a hundred years event. In \\(99%\\) we would get a sure payoff of 1. So under this restructuring the first restructured bond would qualify as an investment grade bond.\nSo this is the idea. We pool the payoffs of both securities and define two new securities by changing their payoff profile. The first one pays always 1 except when both bonds default in which case this bond pays 0. The other one will always pay 0 except in the case where both bonds do not default. This is under independence an event with probability \\(P(N) \\times P(N) = 0.81\\). Rember the complementarity rule? This says that the second restructured bond will thus have a default probability of \\(19\\) % instead of \\(10%\\) it would be speculative grade or close to toxic junk now.\nHere is picture how you can visualize this piece fo financial magic. This picture can be read in exactly the same way as the previous picture. There is only one additional element. We have written the payoff of the original bonds by \\(B\\). Underneath these original bonds we draw a black horizontal like, think of it as the financial engineering lab that does the restructuring and below we get new bonds, with different payout promises, which we denote by \\(R\\) (for restructured).\n\n\n\n\n\n\n\n\nFigure 3.3: Event tree for two bonds with independent default risk with pooling and tranching\n\n\n\n\n\nWhat is done here is that the aggregate payoffs of both bonds are collected in a pool and new securities - called R - in this picture are issued against the pool. One, the upper one is now an investment grade asset paying 1 in every state except one and the other is a toxic junk bond paying always 0 except in one state. Note that the investment grade status could be engineered under the assumption that the risks are independent.\n\n\n3.1.6 Pooling and Tranching without Independent Risks\nNow, let us consider a hypothetical question: How would the event tree change if the independence assumption does not hold? Dependence would alter the probabilities in a way that reflects the increased likelihood of joint defaults during systemic events.\nSuppose we now assume that the probability of Bond 2 defaulting changes rather than staying unchanged under the condition that Bond 1 has defaulted:\n\nIf Bond 1 does not default, Bond 2 defaults with probability 0.1 (as before).\nIf Bond 1 does default, Bond 2 defaults with a higher probability of 0.6 due to systemic dependence.\n\nTo express this formally we need a piece of new notation. The convention in probability theory is that the notation is - for example - \\(P(N | D)\\). This would read as * bond 2 does not default given bond 1 has defaulted *. The event we are interested in is written first separated by a \\(|\\) from the conditioning event, which is in our case the outcome that bond 1 defaults.\nThis dependence reflects a scenario where defaults are more likely to occur together, such as during an economic downturn. The resulting event tree can be visualized as follows:\n\n\n\n\n\n\n\n\nFigure 3.4: Event tree for two bonds with independent default risk with pooling and tranching with dependent default risk\n\n\n\n\n\nOn the first sight this looks almost identical to the picture before. Only the numbers on the edges of the second tree have changed. These changed numbers reflect the idea that the event that one bond has defaulted changes the probability of the second bond defaulting as well. How could such a dependence occur?\nHere’s a real-world example to illustrate how dependence can occur: In the context of bonds, dependence in default probabilities can arise from shared exposure to systemic risks or interconnected factors. For instance, consider two companies that issue bonds and operate in the same industry, such as the energy sector. If oil prices plummet due to an economic downturn or geopolitical instability, both companies might experience financial stress, making it more likely that one default is followed by another.\nAnother example is during a financial crisis, such as the 2008 global financial meltdown. A bank’s default on its obligations can lead to cascading defaults in other institutions due to counterparty risks or a general loss of confidence in the financial system. In such cases, the probability of a second default is no longer independent of the first because the events are tied to the same underlying macroeconomic factors.\nThese examples highlight that the assumption of independence between bond defaults might hold under normal market conditions but breaks down during systemic crises. Such dependencies must be carefully modeled to avoid underestimating risk, as was the case in structured finance products leading up to the 2008 crisis.\nA prudent risk manager must keep such a scenario in mind when he analyzes a portfolio. Think about it in the context of the toy example. In the first case the default risk of the first asset created by pooling and tranching was \\(P(D) \\times P(D) = 0.1 \\times 0.1 = 0.01\\). Under a scenario with dependent risks this changes to \\(P(D) \\times P(D | D) = 0.1 \\times 0.6 = 0.06\\), a risk larger by a factor of 6! While in the first case the first restructured bond would be rated as investment grade, in the second case the same restructured bond would be rated as speculative grade and the magic from pooling and tranching suddenly disappears. Junk plus junk remains junk after all.\nFor pooling and tranching to reduce overall risk and create safe tranches:\n\nDiversification: Assets must come from independent sectors with minimal systemic risk.\nStable Macroeconomic Conditions: Systemic risks must be low to maintain independence assumptions.\nTransparent Modeling: Dependence structures must be explicitly modeled and accounted for in risk assessments.\n\nThe neglect of these conditions led to a flawed sense of security in structured finance, which contributed to the 2008 financial crisis.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#conditional-probability",
    "href": "03-lecture3.html#conditional-probability",
    "title": "3  Conditional Probability",
    "section": "3.2 Conditional Probability",
    "text": "3.2 Conditional Probability\nConditional probability provides us with a concept to formalize how the probability of one event changes when another event is known to occur, providing a framework for understanding dependencies quantitatively.\nHere is the mathematical definition:\n\n\n\n\n\n\nDefinition: Conditional probability\n\n\n\nLet \\(B\\) be an event with positive probability. For an arbitrary event \\(A\\) we define the conditional probability of \\(A\\) given \\(B\\) as \\[\\begin{equation*}\nP(A\\,|\\,B) = \\frac{P(A \\cap B)}{P(B)}\\,\\,\\, \\text{provided}\\,\\,\\, P(B) \\neq 0\n\\end{equation*}\\]\n\n\nNote that conditional probabilities remain undefined when the conditioning event \\(B\\) has probability 0.4\n4 As pointed out in Feller (1968) p 115, this has no consequences in the case of discrete sample spaces but is important in the general theory.Let us clarify a few things about this concept. As in the example of the financial crisis, which we discussed before we really did not much more than introducing one piece of new notation to indicate that the probabilities now have changed.\n\n3.2.1 An illustration using old and new R concepts\nThis is an excellent moment in this lecture to make use of R to illustrate the concept and play with it. On the way we introduce some not yet covered R concepts.\nLet us stay with the example of defaultable bonds and use the freedom and the opprotunity of simulating probabilistic examples on the computer.\nLet us make use of the sample() function first to create a portfolio of bonds. The relevant data for this portfolio should be recorded in a dataframe.\nTo make the data reproducible we need to specify a random seed. Just like in Python, the set.seed() function in R ensures reproducibility of random numbers. When generating random data (like our simulated bond portfolio), R uses a pseudo-random number generator. By setting a “seed” value, you tell R to start its random number generator from a specific point. This guarantees that every time you run the code, you’ll get the same random results, which is crucial for debugging, sharing code, or teaching concepts.\nThe set.seed()functions requires and argument. We can for instance use a sequence of numbers, which can be arbitrary like 123or 42or 2025. What is important is that using the same seed will always give you the same numbers and thus make your example reproducible.\nHere is an example for illustration. Let’s go back to our old coin tossing example and let us toss our coin 10 times one time using the set.seed()function and one time not.\n\n# tossing a fair coin 10 times, two different runs without set.seed()\n\nexample_without_1 &lt;- sample(c(\"H\",\"T\"), size =10, replace = T)\nexample_without_2 &lt;- sample(c(\"H\",\"T\"), size =10, replace = T)\n\ncat(\"Without set.seed():\\n \")\n\nWithout set.seed():\n \n\nprint(example_without_1)\n\n [1] \"T\" \"H\" \"H\" \"T\" \"T\" \"H\" \"T\" \"H\" \"T\" \"T\"\n\nprint(example_without_2)\n\n [1] \"T\" \"H\" \"H\" \"H\" \"T\" \"H\" \"T\" \"T\" \"T\" \"T\"\n\n# tossing a fair coin 5 times, two different rund with set.seed()\n\nset.seed(123)\nexample_with_1 &lt;- sample(c(\"H\",\"T\"), size =10, replace = T)\nset.seed(123)\nexample_with_2 &lt;- sample(c(\"H\",\"T\"), size =10, replace = T)\n\ncat(\"With set.seed():\\n\")\n\nWith set.seed():\n\nprint(example_with_1)\n\n [1] \"H\" \"H\" \"H\" \"T\" \"H\" \"T\" \"T\" \"T\" \"H\" \"H\"\n\nprint(example_with_2)\n\n [1] \"H\" \"H\" \"H\" \"T\" \"H\" \"T\" \"T\" \"T\" \"H\" \"H\"\n\n\nNow let us go to our bind portfolio simulation. Let us simulate our data first:\n\n# set a random seed for reproduceability\nset.seed(123)\n\n# Number of bonds\n\nN &lt;- 5000 \n\n# Simulate portfolio data\n\nportfolio &lt;- data.frame(\n  BondID = 1:N,\n  CreditRating = sample(c(\"AAA\", \"BBB\", \"Junk\"), N, replace = TRUE, prob = c(0.5, 0.3, 0.2)),\n  Sector = sample(c(\"Finance\", \"Energy\", \"Real Estate\"), N, replace = TRUE),\n  Defaulted = NA  # Initialize with NA for later assignment\n)\n\nLet me unpack this a bit:\nFirst we create a dataframe using the data.frame()function of R.\nIt is used to create a structured dataset in R, similar to a table in Excel or a DataFrame in Python’s pandas library. Here, we are simulating a dataset called portfolio, which represents a collection of financial bonds. Each row corresponds to a bond, and each column represents an attribute (or variable) of that bond.\nIn the first column of our dataframe we store unique bond IDs by just assigning them a sequence of integers starting at 1 and counting to \\(N\\), the total number of bonds in the portfolio. Remember the colon operator : we have already used before to create such sequences.\nIn the next column of our dataframe we assign a credit rating randomly using a probability of 0.5 that the rating will be “AAA”, 0.3 that it will be “BBB” and 0.2 that it will be “Junk”. You know already how to do this using the sample function. Note that we have set replace = TRUE: This allows sampling with replacement, so the same credit rating can appear multiple times\nFinally we imagine that the bonds are issued by different sectors, Finance, Energy and Real Estate in the economy which we also assign randomly with equal probability for each sector using the sample function.\nThe final column creates a vector of unknown values, because we would like to assign these values in a separate step to be consistent with actual rating probabilities.\nThe way we do this is to assign the value NA to the variable Defaultedfor the moment. What does this variable mean in R?\nThe NA character is a special symbol in R. It stands for “not available” and can be used as a placeholder for missing information. R will treat NA exactly as you should want missing information treated. For example, what result would you expect if you add 1 to a piece of missing information?\n\n1 + NA\n\n[1] NA\n\n\nR will return a second piece of missing information. It would not be correct to say that 1 + NA = 1 because there is a good chance that the missing quantity is not zero. You do not have enough information to determine the result.\nThere are two functions which are very useful to know about, when working with data that contain NA which will be the case in almost all practical circumstances.\nWhile NA is useful for indicating missing information it can be annoying in practical data work. Assume you had a vector of 100 numbers and only one value, say at the beginning is NA.\n\nc(NA, 1:100)\n\n  [1]  NA   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35\n [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53\n [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71\n [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89\n [91]  90  91  92  93  94  95  96  97  98  99 100\n\nmean(c(NA,1:100))\n\n[1] NA\n\n\nThis is clearly annoying and we would like to enforce a different behavior. Most R functions, such as mean() and others come with the option na.rm that controls R’s behavior when data contain missing information. Here is how it works in the case of mean:\n\nmean(c(NA,1:100), na.rm = TRUE)\n\n[1] 50.5\n\n\nA second useful function when working with missing data is is.na(). This is the case because the identity operator == used in logical subsetting does not work with NA.\n\nc(1,2,3,NA) == NA\n\n[1] NA NA NA NA\n\nis.na(c(1,2,3,NA))\n\n[1] FALSE FALSE FALSE  TRUE\n\n\nSo while the first approach will just yield NA, the second will identify which value in our vector is missing.\nNow putting it all together this will give us a dataframe where the data.frame() function combines these columns into a structured dataset, where: - BondID is an integer sequence labeling each bond. - CreditRating is a randomly assigned credit rating, weighted by the specified probabilities. - Sector is a randomly assigned economic sector. - Defaulted a vector with missing values yet to be determined.\nYou can inspect the first rows of this dataframe by\n\nhead(portfolio)\n\n  BondID CreditRating      Sector Defaulted\n1      1          AAA Real Estate        NA\n2      2          BBB      Energy        NA\n3      3          AAA      Energy        NA\n4      4         Junk      Energy        NA\n5      5         Junk     Finance        NA\n6      6          AAA Real Estate        NA\n\n\nNow we assign different default probabilities for the different credit ratings such that the simulated data show similar values than with actual ratings.\n\ndefault_probabilities &lt;- data.frame(\n  CreditRating = c(\"AAA\", \"BBB\", \"Junk\"),\n  DefaultProb = c(0.0001, 0.002, 0.05)  # Default probabilities\n)\n\n\ndefault_probabilities &lt;- data.frame(\n  CreditRating = c(\"AAA\", \"BBB\", \"Junk\"),\n  DefaultProb = c(0.0001, 0.002, 0.05)  # Default probabilities\n)\n\nWe do this in a separate rating dataframe, organizing compactly our rating information. To see what is happening here observe that a data.frame is created to store default probabilities for each credit rating. CreditRating is a character column containing the categories: \"AAA\", \"BBB\", and \"Junk\". DefaultProb is a numeric column with the corresponding default probabilities: AAA: \\(0.01\\%\\), BBB: \\(0.2\\%\\), Junk: \\(5\\%\\) This dataframe organizes the default probabilities in a clear and structured way, making the probabilities easy to reference if needed later.\nNow we can use the power of R’s subsetting rules to fill the last column in our portfolio dataframe such that we get realistic values. Let me show you the code and then unpack the elements step by step:\n\nportfolio$Defaulted[portfolio$CreditRating == \"AAA\"] &lt;- \n  sample(c(TRUE, FALSE), sum(portfolio$CreditRating == \"AAA\"), replace = TRUE, \n         prob = c(0.0001, 0.9999))\n\nportfolio$Defaulted[portfolio$CreditRating == \"BBB\"] &lt;- \n  sample(c(TRUE, FALSE), sum(portfolio$CreditRating == \"BBB\"), replace = TRUE, \n         prob = c(0.002, 0.998))\n\nportfolio$Defaulted[portfolio$CreditRating == \"Junk\"] &lt;- \n  sample(c(TRUE, FALSE), sum(portfolio$CreditRating == \"Junk\"), replace = TRUE, \n         prob = c(0.05, 0.95))\n\nHere’s a step-by-step explanation of the code, unpacking the logic and reinforcing R subsetting rules: Let’s look at the AAA bonds first.\nHere we see the code line portfolio$CreditRating == \"AAA\". This line checks each row in the CreditRating column to see if the value is \"AAA\". It returns a logical vector (e.g., TRUE for \"AAA\" rows, FALSE otherwise). Here you see two important R concepts at work. To check whether two expressions are equal the appropriate symbol is ==. It returns a logical TRUE when the equality holds and FALSEotherwise.\nWe use this logical vector created by the assignment to assign a probability to the Defaultedcolumn whenever the rating is AAA. So the operation selects the Defaulted column for rows where CreditRating is \"AAA\" and default status to these rows based on a random sample.\nNow for the random sample we use the sample() function we encountered before. It generates random values TRUEfor default and FALSEfor non-default, the two possible outcomes. It samples with replacement as many times as we have an AAArating. This count is achieved by sum(portfolio$CreditRating == \"AAA\") using R’s coercion rules. It returns the count because each TRUE is forced to 1 and contributes one count to the total whereas FALSEis forced to 0 and contributes nothing to the count. Finally prob = c(0.0001, 0.9999) specifies the probabilities for for this class. Note that here we could also have used the complement rule by writing prob = c(0.0001, 1 - 0.0001)\nNow we do the same thing for BBB bonds and the Junkbonds, which have each different probabilities from the AAAbinds and from each other.\nHere you have in one example the General Rules for R Subsetting reviewed\n\nLogical Conditions:\n\nUse conditions like == to create logical vectors.\nExample: portfolio$CreditRating == \"AAA\" checks for equality and returns a logical vector.\n\nRow Selection:\n\nLogical vectors are used to select rows in a data frame.\nExample: portfolio$Defaulted[...] updates only the rows where the condition is TRUE.\n\nColumn Access:\n\nUse $ to access specific columns in a data frame.\nExample: portfolio$Defaulted.\n\nCombining Logical Subsetting and Assignment:\n\nSubset rows using logical conditions, then assign values to those rows.\nExample: portfolio$Defaulted[portfolio$CreditRating == \"AAA\"] &lt;- sample(...)\n\n\n\n\n\n\n\n\nNow you try\n\n\n\nHere are some more assignment exercises for you to try:\n\nExplore Subsetting:\n\nPrint all AAA bonds using:\nportfolio[portfolio$CreditRating == \"AAA\", ]\nVerify the number of rows using:\nsum(portfolio$CreditRating == \"AAA\")\n\nCheck Assigned Values:\nConfirm that Defaulted is only updated for the relevant rows:\ntable(portfolio$Defaulted[portfolio$CreditRating == \"AAA\"])\n\n\n\nLet’s check how our portfoliodataframe looks now after the assignment.\n\nhead(portfolio)\n\n  BondID CreditRating      Sector Defaulted\n1      1          AAA Real Estate     FALSE\n2      2          BBB      Energy     FALSE\n3      3          AAA      Energy     FALSE\n4      4         Junk      Energy     FALSE\n5      5         Junk     Finance     FALSE\n6      6          AAA Real Estate     FALSE\n\n\nNow let us go on to the illustration of the conditional probability concept. If we choose a bond at random from this portfolio we should get a probability of\n\\(P(D) = \\frac{\\text{number of defaultet bonds}}{\\text{total number of bonds}}\\) and \\(P(N) = \\frac{\\text{number of non-defaultet bonds}}{\\text{total number of bonds}}\\)\nLet’s check these numbers in our sample, using the R subsetting rules and a new operator, the $ sign, which plays an important role in R data manipulation. Let me do the calculation and then explain:\n\nPD &lt;- mean(portfolio$Defaulted == TRUE)\nPN &lt;- 1 - PD\n\nPD\n\n[1] 0.0108\n\nPN\n\n[1] 0.9892\n\n\nLet me explain this bit of code. The name of our dataframe is portfolio. We may refer to this as an R-object in the R language. An operator that is frequently used in R to select a column from a dataframe is the colon operator $. If we tell R portfolio$Defaulted, R will select the column Defaultedfrom the dataframe portfolio. The same operator is used to select elements in an R list. This is no coincidence, since a dataframe is formally a list in the R language. You can see this by\n\ntypeof(portfolio)\n\n[1] \"list\"\n\nclass(portfolio)\n\n[1] \"data.frame\"\n\n\nIf you look at the type of a data frame, you will see that it is a list. In fact, each data frame is a list with class data.frame. You can see what types of objects are grouped together by a list (or data frame) with the str() function:\n\nstr(portfolio)\n\n'data.frame':   5000 obs. of  4 variables:\n $ BondID      : int  1 2 3 4 5 6 7 8 9 10 ...\n $ CreditRating: chr  \"AAA\" \"BBB\" \"AAA\" \"Junk\" ...\n $ Sector      : chr  \"Real Estate\" \"Energy\" \"Energy\" \"Energy\" ...\n $ Defaulted   : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n\n\nNow the numbers of the unconditional probabilities of a bind defaulting or not defaulting (note that we applied the complement rule here to compute this probability) is as it should be given the parametrisation of our example.\nWe now want to restrict our attention to the subset of our portfolio consisting of junk bonds. What is the probability that a bond chosen from this sub-population is in default?\n\n# Calculate conditional probability: P(Default | CreditRating = \"Junk\")\n\njunk_bonds &lt;- portfolio[portfolio$CreditRating == \"Junk\", ]\n\nP_Default_given_Junk &lt;- mean(junk_bonds$Defaulted)\n\ncat(\"P(Default | CreditRating = 'Junk'):\", P_Default_given_Junk, \"\\n\")\n\nP(Default | CreditRating = 'Junk'): 0.05353535 \n\n\nNow you see perhaps with your own hands how conditional probability works in terms of R’s subsetting rules. Among the subset of bonds which are classified as junk, how many are also defaulted and what is their relative frequency among the junk bonds? This would be in set notation: \\[\\begin{equation*}\n\\frac{P(\\text{set of all defaulted bonds} \\cap \\text{set of all junk bonds})}{P(\\text{set of all junk bonds})}\n\\end{equation*}\\] To provide an appropriate notation for this we have used: \\(P(\\text{defaulted} \\, | \\,\\text{junk})\\) This is read as the probability of event \\(A\\) (the bond is defaulted) assuming the event \\(B\\) (the bond is a junk bond).\nThus taking a conditional probability of various events with respect to a particular event \\(B\\) amounts to choosing \\(B\\) as a new sample sapce with the probabilities proportional to the original ones. The proportionality factor \\(P(B)\\) is necessary in order to make the probabilities in the new sample space sum up to 1. All general theorems on probabilities are valid also for conditional probabilities with respect to any particular event \\(B\\).\nNote that for conditional probabilities we have for two events \\(A\\) and \\(B\\), that \\(P(A|B) \\neq P(B|A)\\). To see this assume that \\(P(A) \\neq P(B)\\) and \\(P(A) \\neq 0\\) and \\(P(B)\\neq 0\\).\nWe then get: \\[\\begin{equation*}\nP(A|B) = \\frac{P(A\\cap B)}{P(B)} = \\frac{P(B \\cap A)}{P(B)}\n\\end{equation*}\\] since \\(P(A \\cap B) = P(B \\cap A)\\). It follows that \\[\\begin{equation*}\n\\frac{P(B \\cap A)}{P(B)} \\neq \\frac{P(B \\cap A)}{P(A)} = P(B|A)\n\\end{equation*}\\] since we have assumed that \\(P(A) \\neq P(B)\\). Therefore \\(P(A|B) \\neq P(B|A)\\).\nLet’s illustrate this remark with the example of our bond portfolio.\n\n# Calculate conditional probability: P(CreditRating = \"Junk\" | Default)\n\ndefaulted_bonds &lt;- portfolio[portfolio$Defaulted == TRUE, ]\n\nP_Junk_given_Default &lt;- mean(defaulted_bonds$CreditRating == \"Junk\")\n\ncat(\"P(Junk | Default):\", P_Junk_given_Default, \"\\n\")\n\nP(Junk | Default): 0.9814815 \n\n\nNow you can see clearly that \\(P(\\text{Default} \\, |\\, \\text{Junk} ) =\\) 0.0535354 which is clearly different from \\(P(\\text{Junk} \\, |\\, \\text{Default} ) =\\) 0.9814815.\nThe formula for conditional probability which we wrote down in the definition of Conditional Probability is often used in the form of the multiplication rule:\n\n\n\n\n\n\nDefinition: Multiplication rule\n\n\n\nGiven events \\(A\\) and \\(B\\), it holds that: \\(P(A \\cap B) = P(A \\mid B)\\times P(B)\\)\n\n\nwhich is just an equivalent way to write the formula for conditional probability. The multiplication rule can be thought of the AND rule of probability theory.\nWith the multiplication rule we can gain a deeper insight into the meaning of independence. Remember that two events \\(A\\) and \\(B\\) are independent if \\[\\begin{equation*}\nP(A \\cap B) = P(B \\cap A) = P(A) \\times P(B).\n\\end{equation*}\\]\nIf we combine this rule with the concept of conditional probability, we see that if two events \\(A\\) and \\(B\\) are independent, then \\[\\begin{equation*}\nP(A|B) = \\frac{P(A \\cap B)}{P(B)} = \\frac{P(A) \\times P(B)}{P(B)} = P(A)\n\\end{equation*}\\] and \\[\\begin{equation*}\nP(B|A) = \\frac{P(B \\cap A)}{P(A)} = \\frac{P(A) \\times P(B)}{P(A)} = P(B)\n\\end{equation*}\\]\nThis formula says that if two events are independent the probability of \\(A\\) is not influenced by the event \\(B\\) occurring and the probability of event \\(B\\) is not influenced by the event \\(A\\) occurring.\nHere’s a proposal for a draft subsection devoted to introducing advanced R concepts (Environments, Scoping Rules, Closures) while reinforcing conditional probability ideas. The examples are tied to a financial and conditional probability context, ensuring continuity with your lecture themes.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#conditional-probability-1",
    "href": "03-lecture3.html#conditional-probability-1",
    "title": "3  Conditional Probability",
    "section": "3.3 Conditional probability",
    "text": "3.3 Conditional probability\nLet \\(B\\) be an event with positive probability. For an arbitrary event \\(A\\) we define the conditional probability of \\(A\\) given \\(B\\) as \\[\\begin{equation*}\nP(A\\,|\\,B) = \\frac{P(A \\cap B)}{P(B)}\\,\\,\\, \\text{provided}\\,\\,\\, P(B) \\neq 0\n\\end{equation*}\\]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#advanced-r-concepts-environments-scoping-rules-and-closures",
    "href": "03-lecture3.html#advanced-r-concepts-environments-scoping-rules-and-closures",
    "title": "3  Conditional Probability",
    "section": "3.3 Advanced R Concepts: Environments, Scoping Rules, and Closures",
    "text": "3.3 Advanced R Concepts: Environments, Scoping Rules, and Closures\nIn this section, we will explore some advanced R programming concepts that are essential for understanding how R evaluates and stores variables, as well as how you can create reusable and dynamic functions. We will demonstrate these concepts through examples related to conditional probability and financial modeling.\n\n3.3.1 Introduction to Environments\nAn environment in R is where objects (variables, functions, etc.) are stored and looked up. R uses environments to determine where a variable exists and what its value is. The most common environment is the global environment, where user-created variables and functions are stored.\nExample: Setting Global and Local Variables\nSuppose we are modeling interest rates in a financial portfolio. Globally, we set the baseline interest rate. Locally, we may override this rate for specific calculations.\n\n# Global interest rate\ninterest_rate &lt;- 0.05  # 5%\n\n# Function to calculate interest payments\ncalculate_interest &lt;- function(principal, rate = interest_rate) {\n  interest &lt;- principal * rate  # Uses the rate passed to the function\n  return(interest)\n}\n\n# Global calculation\nglobal_interest &lt;- calculate_interest(1000)  # Uses global interest_rate\ncat(\"Global Interest:\", global_interest, \"\\n\")\n\nGlobal Interest: 50 \n\n# Local override\nlocal_interest &lt;- calculate_interest(1000, rate = 0.07)  # Overrides global interest_rate\ncat(\"Local Interest:\", local_interest, \"\\n\")\n\nLocal Interest: 70 \n\n\nGlobal variables are available everywhere, but local variables (like rate) take precedence within a function. Understanding this behavior is crucial for writing clear and predictable code.\n\n\n3.3.2 Scoping Rules\nR follows specific scoping rules to determine where and how to find variables. These rules become important when working with nested functions.\nExample: Variable Lookup in Nested Functions\nLet’s calculate conditional probabilities using nested functions. We simulate a financial scenario where we compute probabilities of default for different credit ratings.\n\n# Define global default rates for credit ratings\n\ndefault_rates &lt;- c(\n  AAA = 0.01,  # Global default rate for AAA bonds\n  BBB = 0.02,  # Global default rate for BBB bonds\n  Junk = 0.05  # Global default rate for Junk bonds\n)\n\n# Function to calculate conditional default probability\nconditional_default &lt;- function(rating) {\n  \n  # Lookup table for default rates\n  local_default_rates &lt;- c(\n    AAA = default_rates[\"AAA\"],  # Local default for AAA\n    BBB = default_rates[\"BBB\"],  # Local default for BBB\n    Junk = default_rates[\"Junk\"] # Local default for Junk\n  )\n  \n  # Return the default rate using vectorized subsetting\n  \n  return(local_default_rates[rating])\n}\n\n# Test the function\ncat(\"Default rate for Junk bonds:\", conditional_default(\"Junk\"), \"\\n\")\n\nDefault rate for Junk bonds: NA \n\ncat(\"Default rate for BBB bonds:\", conditional_default(\"BBB\"), \"\\n\")\n\nDefault rate for BBB bonds: NA \n\ncat(\"Default rate for AAA bonds:\", conditional_default(\"AAA\"), \"\\n\")\n\nDefault rate for AAA bonds: NA \n\n\nHer you see how R is using Lexical scoping. This ensures that R looks for variables in the closest environment first, then moves outward (from local to global). Nested functions can use both local and global variables.\nThis example uses a concept you might find useful in many other contexts: The lookup table. The concept of a lookup table is a simple yet powerful way to map input values to corresponding outputs. In R, we can create a lookup table using a named vector, where each element has a name (the input) and a value (the corresponding output). This allows us to retrieve the correct value by directly referencing the name.\nIn the example, we used a named vector local_default_rates to store the default probabilities for different credit ratings: “AAA”, “BBB”, and “Junk”. Each credit rating serves as a key, and the corresponding default probability serves as the value. When we pass the rating (e.g., “Junk”) to the function, R uses it to subset the vector and directly return the associated probability. This approach is efficient and avoids the need for verbose or complex conditional statements.\nBy using a lookup table, we also demonstrate an important principle of programming: separation of data and logic. The mapping of ratings to probabilities is encapsulated in a single data structure (local_default_rates), making the function simpler and easier to modify. For instance, if the default probabilities change, you only need to update the values in the vector—no changes to the function logic are required. This approach is especially useful in financial modeling, where mappings like these are common and can evolve over time.\n\n\n3.3.3 Closures\nA closure is a function that remembers the environment in which it was created. Closures are powerful for creating dynamic, reusable functions, such as calculators for different conditional probabilities.\nExample: Probability Calculator Factory\nLet’s create a function factory that generates specific probability calculators based on a given event.\n\n# Function factory for conditional probability calculators\n\nprobability_calculator_factory &lt;- function(event_probability) {\n  function(conditional_probability) {\n    joint_probability &lt;- event_probability * conditional_probability\n    return(joint_probability)\n  }\n}\n\n# Create calculators for different events\n\njunk_calculator &lt;- probability_calculator_factory(0.05)  # Junk bonds\nbbb_calculator &lt;- probability_calculator_factory(0.02)   # BBB bonds\n\n# Calculate joint probabilities\n\njunk_joint &lt;- junk_calculator(0.1)  # P(Default | Junk) * P(Junk)\nbbb_joint &lt;- bbb_calculator(0.2)    # P(Default | BBB) * P(BBB)\n\ncat(\"Joint probability for Junk bonds:\", junk_joint, \"\\n\")\n\nJoint probability for Junk bonds: 0.005 \n\ncat(\"Joint probability for BBB bonds:\", bbb_joint, \"\\n\")\n\nJoint probability for BBB bonds: 0.004 \n\n\nHere’s a detailed explanation of the code chunk, formatted for easy inclusion in your Quarto document:\n\n\n\n3.3.4 Function Factory for Conditional Probability Calculators\nThis code demonstrates a powerful concept in R: closures. A closure is a function that “remembers” the environment in which it was created, allowing you to dynamically generate new functions with specific behaviors. Let’s unpack the code step by step:\n\n3.3.4.1 Code\n# Function factory for conditional probability calculators\nprobability_calculator_factory &lt;- function(event_probability) {\n  function(conditional_probability) {\n    joint_probability &lt;- event_probability * conditional_probability\n    return(joint_probability)\n  }\n}\n\n# Create calculators for different events\njunk_calculator &lt;- probability_calculator_factory(0.05)  # Junk bonds\nbbb_calculator &lt;- probability_calculator_factory(0.02)   # BBB bonds\n\n# Calculate joint probabilities\njunk_joint &lt;- junk_calculator(0.1)  # P(Default | Junk) * P(Junk)\nbbb_joint &lt;- bbb_calculator(0.2)    # P(Default | BBB) * P(BBB)\n\ncat(\"Joint probability for Junk bonds:\", junk_joint, \"\\n\")\ncat(\"Joint probability for BBB bonds:\", bbb_joint, \"\\n\")\nThe probability_calculator_factory is a function factory. It takes one argument, event_probability, and returns a new function that calculates the joint probability for a given conditional probability:\n\nInput:\n\nevent_probability: The probability of the event (e.g., the probability of a bond being “Junk”).\nThe returned function takes conditional_probability as its argument (e.g., the probability of default given the bond is “Junk”).\n\nOutput:\n\nThe joint probability, \\(P(A \\cap B) = P(A | B) \\times P(B)\\).\n\n\nThis structure encapsulates the logic for joint probability into a reusable framework.\nThe junk_calculator and bbb_calculator are functions created by the factory. Each calculator “remembers” the event_probability it was initialized with: - junk_calculator: \\(P(Junk) = 0.05\\). - bbb_calculator: \\(P(BBB) = 0.02\\).\nThese calculators are then used to compute joint probabilities by providing the corresponding conditional probabilities: - junk_joint &lt;- junk_calculator(0.1): - \\(P(\\text{Default} \\cap \\text{Junk}) = P(\\text{Default | Junk}) \\times P(\\text{Junk})\\). - \\(0.1 \\times 0.05 = 0.005\\) (0.5%). - bbb_joint &lt;- bbb_calculator(0.2): - \\(P(\\text{Default} \\cap \\text{BBB}) = P(\\text{Default | BBB}) \\times P(\\text{BBB})\\). - \\(0.2 \\times 0.02 = 0.004\\) (0.4%).\nThe cat() function displays the results:\nA closure allows you to “lock in” parameters (like event_probability) when the function is created, while still allowing flexibility for additional inputs.\n\n\n\n\n\n\nNow you try\n\n\n\n\nModify the calculate_interest function to add a penalty rate for overdue payments using local variables.\nExtend the conditional_default function to include an additional credit rating (e.g., “CC”).\nUse the probability_calculator_factory to compute joint probabilities for a new event, such as “Real Estate Sector Default.”",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Conditional Probability</span>"
    ]
  },
  {
    "objectID": "03-lecture3.html#updating-beliefs-bayes-rule",
    "href": "03-lecture3.html#updating-beliefs-bayes-rule",
    "title": "3  Conditional Probability",
    "section": "3.4 Updating beliefs: Bayes rule",
    "text": "3.4 Updating beliefs: Bayes rule\n\n\n\n\nFeller, William. 1968. An Introduction to Probability Theory and Its Applications. 3rd ed. Vol. 1. Wiley.\n\n\nTooze, Adam. 2018. Crashed. How a Decade of Financial Crisis Changed the World. Viking.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Conditional Probability</span>"
    ]
  }
]