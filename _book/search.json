[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to Probability",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what-are-these-lecture-notes-about",
    "href": "index.html#what-are-these-lecture-notes-about",
    "title": "An Introduction to Probability",
    "section": "What are these lecture notes about ?",
    "text": "What are these lecture notes about ?\nThese lecture notes support the course An Introduction to Probability - with Applications to Computational Finance using R. The course introduces essential probability concepts that every finance practitioner must understand. As probability is crucial for solving financial problems computationally, we will use computational finance as the context to develop these ideas. The focus will be hands-on learning, enabling you to understand and internalize concepts by applying them yourself.\nTo make abstract concepts like randomness, chance, and probability more accessible, we will leverage computational tools, in our course this will be R, and visualizations built by using R. By actively engaging with these tools, you’ll not only deepen your understanding of probability but also enhance your ability to apply it to real-world finance problems.\n\n\n\n\n\n\nKey learning objectives\n\n\n\n\nUnderstand foundational probability concepts.\nApply probability principles to solve computational finance problems.\nGain hands-on experience using R for probability and finance applications.\nDevelop proficiency in interpreting and visualizing probabilistic data.\n\n\n\nBut how can we build abstract concepts such as probability, random phenomena and chance by our own hands? While probability is a mathematical theory, it gains practical value and an intuitive meaning in connection with real or conceptual experiments such as, the future change in a stock price index, the future value of a portfolio of securities, the chance that a creditor is not going to be able to pay back your loan.\nMany of these experiments we can nowadays simulate on the computer. We can can construct, build and simulate a huge variety of random phenomena. We can - for instance - implement models of random fluctuations of asset prices. We can model financial risks and contemplate possible future scenarios through simulation.\nThe arrival of the computer has been indeed a sea change for the mathematics of probability because it allows both reflecting about probability through theorems and proofs as well as by making use of computer simulation. We can approach our understanding of abstract concepts by building them with our own hands on the computer. This is the approach to teaching you probability in this course.\nLet me give you one example right away. Don’t worry if you do not understand precisely what the following snippet of code is doing. We will learn the syntax of the R language as we go along. This is just to demonstrate you what I explained in words before by a simple example highlighting simulation of random processes and visualization.\n\n\n\n\n\n\nAn R example for illustration\n\n\n\nSimulate stock prices with normally distributed random daily returns.\n\n# Simulate daily returns for a stock\n\nset.seed(123)  # Ensure reproducibility\nn &lt;- 100       # Number of days\ndaily_returns &lt;- rnorm(n, mean = 0.001, sd = 0.02)  # Normal distribution\n\n# Compute cumulative returns\nprice &lt;- cumprod(1 + daily_returns) * 100  # Starting price = 100\nprice\n\n  [1]  98.97905  98.62237 101.79547 102.04081 102.40670 106.02179 107.10516\n  [8] 104.50237 103.17132 102.35490 104.96307 105.82338 106.77742 107.12056\n [15] 106.03684 109.93245 111.13699 106.87684 108.48290 107.56558 105.37593\n [22] 105.02192 102.97188 101.57374 100.40557  97.11890  98.84332  99.24536\n [29]  97.08551  99.61714 100.56642 100.07351 101.96515 103.85789 105.66830\n [36] 107.22932 108.52447 108.49862 107.94319 107.22975 105.84711 105.51281\n [43] 102.94801 107.51675 110.22179 107.85619 107.09498 106.20254 107.96543\n [50] 107.89338 108.54790 108.59447 108.60996 111.69144 111.29880 114.78573\n [57] 111.34502 112.75824 113.15031 113.75214 114.72959 113.69169 113.04772\n [64] 110.85782 108.59235 109.36016 110.44984 110.67738 112.82954 117.56857\n [71] 116.53154 111.26625 113.61561 112.11770 110.68706 113.06810 112.53719\n [78] 109.90221 110.41062 110.21433 110.33725 111.29781 110.58403 112.11977\n [85] 111.73747 112.59066 115.17313 116.29072 115.64896 118.42177 120.89325\n [92] 122.34009 123.04656 121.62437 125.05577 123.67950 129.21375 133.30365\n [99] 132.80856 130.21502\n\n\nVisualize the distribution of daily returns:\n\nhist(daily_returns, \n     main = \"Distribution of daily stock returns\",\n     xlab = \"Returns\",\n     ylab = \"Number of Days\")\n\n\n\n\n\n\n\n\nNow visualize the price dynamics:\n\n# Visualize the stock price\nplot(price, type = \"l\", col = \"blue\", lwd = 2,\n     main = \"Simulated Stock Price\",\n     xlab = \"Days\", ylab = \"Price\")\n\n\n\n\n\n\n\n\n\n\nThis example highlights:\n\nHow randomness influences stock price movements\nR’s usefulness in simulations and visualization.\n\nIt is, however important to always keep in mind that the real world is different from the theory world as well as from the simulated world. The real world is both richer and more complex than both theory and simulation. It may contain features which need to be be taken into account for the explanation of phenomena which are absent in theory or in the simulation. We will try our best to develop your feeling for the difference, between theoretical concepts, simulations and applications as well as for the interdependence of these three areas.\nThere are many ways to build virtual objects and to run simulations to manipulate them. For this we will need a programming language. The language we choose for this course is R and the integrated development environment RStudio. This is one of the main languages used in data analysis, statistics and data science and is widely used in industry and academia. It will be our tool to do probability in this course.\nSince this course was being taught the first time in 2021, new AI tools such as large language models (LLMs) like chatGPT, Claude or Gemini have been introduced. These new powerful tools create new opportunities for learning and reinforcing knowledge such as the concepts learned in this course. In this year I will show you throughout the course, how you can leverage AI tools like ChatGPT for enhancing your learning experience. I encourage you to use these tools to generate examples, explain concepts, and debug R code or perhaps translate R code into a language you might be more familiar with on the fly to help you understand how things are expressed in R.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#using-an-llm-to-enhance-your-learning-experience",
    "href": "index.html#using-an-llm-to-enhance-your-learning-experience",
    "title": "An Introduction to Probability",
    "section": "Using an LLM to Enhance Your Learning Experience",
    "text": "Using an LLM to Enhance Your Learning Experience\nIn these lectures I try to help you building experience how to integrate large language models or LLMs into your learning and study process as well as to support you in coding and programming. There are several such models currently on the market. For this course I will use openAI’s chatGPT as a tool. ChatGPT is available in a free version and in an enhanced pay-version.\nThroughout this course, you’ll learn how to use ChatGPT to support your studies. As a tool, it offers capabilities that can make learning probability more interactive and engaging.\nHere’s are some example for interesting use cases:\n\nClarify Concepts:\nAsk ChatGPT to explain concepts in simple terms or elaborate on topics you find difficult:\n\n“Explain the concept of a probability distribution with an example.”\n\nGenerate Examples:\nUse it to create additional examples for practice:\n\n“Can you give me an example of a random variable and how it applies in finance?”\n\nDebug R Code:\nIf you encounter issues with your R code, paste the code and ask:\n\n“Why does this R code not run, and how can I fix it?”\n\nPractice Exercises:\nRequest custom exercises:\n\n“Create three exercises to practice calculating probabilities for dice rolls.”\n\nSimulate Interactive Discussions:\nSimulate discussions with ChatGPT to test your understanding:\n\n“I think the variance of a constant is zero. Am I correct? Explain why or why not.”\n\nLearn Best Practices in R:\nAsk for tips to improve your coding practices:\n\n“What are the best practices for writing clean and efficient R code?”\n\n\nImportant Note:\nWhile ChatGPT is a powerful learning tool, remember to verify the outputs, especially for complex calculations, and always critically evaluate its suggestions. One such tool you might consider for cross checking is Wolfram | Alpha, which you can find here: https://www.wolframalpha.com/ in a free version.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#downloading-and-installing-r",
    "href": "index.html#downloading-and-installing-r",
    "title": "An Introduction to Probability",
    "section": "Downloading and installing R",
    "text": "Downloading and installing R\nSo lets start by downloading and installing R first. R is an open source project maintained by an international team of developers. The software is made available through a website called the comprehensive R archive network (http://cran.r-project.org).\nAt the top of this website, in a box named “Download and install R” you will find three links for downloading R. Choose the link that describes your operating system, Windows, Mac or Linux. These links will lead you to the necessary information you need to install a current version of R. The easiest install option is to install R from precompiled binaries. There is also the option to built R from source on all operating systems if you have the tools and the expertise to do so. R also comes both in a 32-bit and a 64-bit version. It does not make a substantial difference which version you use. 64-bit versions can handle larger files and data sets with fewer memory management problems.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#downloading-and-installing-rstudio",
    "href": "index.html#downloading-and-installing-rstudio",
    "title": "An Introduction to Probability",
    "section": "Downloading and installing RStudio",
    "text": "Downloading and installing RStudio\nRStudio is an application that helps you write and develop R code. It makes using R much easier for you than using it in isolation. The interface of RStudio looks the same across all operating systems.\nYou can download RStudio for free from https://www.rstudio.com/products/rstudio/. Select the box RStudio Desktop and follow the download instructions. RStudio Desktop is free. Note that you need to have a version of R installed to use RStudio.\nIf you have successfully installed R and RStudio, we are ready to start.\nThroughout this course I will use R with RStudio and when I do code demonstrations I will use this environment. R can be used in many other ways of course. Some of you might be accustomed to work with Jupyter Notebooks. I will just mention here that with some minor tweaks R can be used with Jupyter notebooks as well. I will not go into the details here. Those of you who are interested in such a setup are encouraged to ask chatGPT:\n\n“Please give me a step by step instruction how to set up the system to use R through Jupyter notebooks instead of RStudio.”",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#signing-up-for-chatgpt-free-version",
    "href": "index.html#signing-up-for-chatgpt-free-version",
    "title": "An Introduction to Probability",
    "section": "Signing up for ChatGPT (Free Version)",
    "text": "Signing up for ChatGPT (Free Version)\nTo access ChatGPT, follow these steps:\n\nGo to https://chat.openai.com in your web browser.\nClick on the “Creat a free account” button to create an account. You can sign up using an email address or your existing Google or Microsoft account.\nFollow the prompts to verify your email address and complete the registration process.\nOnce registered, log in to access ChatGPT. You can start using it immediately for your learning needs.\n\nUsing ChatGPT is free, but note that certain features or advanced versions (e.g., GPT-40) may require a paid subscription. The free version (GPT-3.5) is sufficient for getting a feeling of what the LLM can do. They payed version is more powerful.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "An Introduction to Probability",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis course is built as an intuitive and elementary introduction to the field. No knowledge of probability or R is assumed and all concepts are built from scratch. You should be able to study for this course by relying on the slides and these lecture notes only without having to consult a textbook or further literature.\nMany of you will have heard or studied probability at some stage in college or at university. I hope the course will appeal to the newcomers as well as to the experienced. While it should allow the first group to quickly learn some of the most important concepts and raise your curiosity and excitement about a field of knowledge which is both beautiful and immensely practical, I hope it will open a new perspective for the more experienced among you and thus help deepening your understanding of concepts you might already have heard elsewhere.\nThe lectures develop probability concepts and R concepts in parallel. This follows the idea underlying this course to develop your knowledge of probability concepts by building them on the computer yourself and play with them. In this way we hope to build your R skills more thoroughly because they appear in a natural context and that this context also reinforces your understanding of probability.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#structure-of-the-notes",
    "href": "index.html#structure-of-the-notes",
    "title": "An Introduction to Probability",
    "section": "Structure of the Notes",
    "text": "Structure of the Notes\nThe notes are structured into five main chapters. The idea is to cover each main chapter topic in one of the five double units allocated to this course.\nEach of the main chapters or lectures are followed by a so called project. The projects are meant to be worked on by you in the assigned groups between the lectures and should help you to practice and to deepen what you have learned. We will discuss the project questions at the end of each lecture. We will also distribute a worked problem after you have worked on it yourself.\nWe begin the first lecture, lecture 1 by discussing some of the main basic probability fundamentals by putting them in their historical context where the first ideas appear of how you could measure something such elusive as chance at all. Surprisingly these first simple ideas are already very rich and lead us quite far into the field and its problems.\nIn this lecture we will also give a first panoramic run down of what you can do with R. In this lecture the first application will be a simple game of chance, the tossing of a coin. Already this very elementary example has direct relevance for computational financial modelling of security prices as we will learn throughout the course.\nEven the very basic ideas of probability and R enable us, already at this early stage, to take on a serious real world problem as well. In fact, with only a few intuitive concepts we can study and understand problems of the chance of coincidences. This class of problems is at the heart of the science of constructing cryptographically safe finger prints, so called hash-functions, which are at the heart of crypto-currencies such as Bitcoin.\nThe first project will deal with engineering secure transaction indentifiers for a digital payment system and study how the construction of such identifiers has to take into account key system paramaters such as transaction volume and number of participants in the payment system.\nLecture 2 will introduce the first basic intuitive ideas a bit more formally and also generalize them. In particular it explains the basic ideas of how probability and frequencies of chance events are related. We will discuss the power as well as the limits of these ideas for applied work in probability.\nIn this lecture we will go deeper into the R language, explain its many data types and how to reference and change data in more complext data structures.\nProject 2 will help you to train and practice your understanding of data manipulation in R by useing a really cool empirical probability pattern on the empirical frequency of leading digits - Benford’s law - for checking whether the data could be trusted or do look fishy on purely probabilistic grounds.\nIn Lecture 3 we will learn about the key concept of conditional probability. This lecture contains lots of concepts but it is also of key importance for understanding many problems in Finance and the management of financial risks. We will explain how the misunderstanding or perhaps willful ignorance of the concept of dependence is at the root of the big financial crisis of 2007-2008. We will also learn, how updating your probability assessments in the light of new data is important for investment decisions.\nOn top of this directly practical considerations, we will also learn how this particular problem of updating probability assessments in the light of new information helps us close a conceptual gap in the pure frequency interpretations of probability.\nIn terms of R this lecture gives you a bit of a break in the sense that it applies what we have learned before and thereby reinforces what we have already learned. It will introduce some useful techniques and functions along the way.\nLecture 4 will introduce you more precisely to the key probabilistic model of random returns and other random phenomena in Finance: The concept of a random variable and the concepts of expected value, variance, standard deviation, covariance and correlation. We will discuss at length the modelling of random returns and learn about the basic workhorse model of asset price dynamics, the binomial lattice.\nThis discussion gives us also the appropriate context to discuss how to write programs in R and some of the principles and constructions that are most useful for this task.\nIn terms of R this lecture will teach you how to write more complex programs by using R’s control structures and by modularizing code.\nThe final Lecture 5 discusses the concept of continuous random variables, which is very important for a large body of applied work. You will be introduced to the normal distribution and its power and limits for modelling random returns and financial risks.\nIn terms of R this lecture will provide a good context for discussing what matters when you want to make your R code fast and efficient.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "An Introduction to Probability",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nI would like to thank my friend and colleague Branko Urošević that he entrusted me to develop this course for his new and innovative program in computational finance.\nI am very grateful for the opportunity to make a contribution to this effort and for all the encouragement, support and advice I got from him for this project. Of course he bears no responsibility whatsoever for any shortcomings of these lecture notes.\nI would also like to sincerely thank the former students of the bootcamp probability course who gave me feedback and studied from the lecture. They were a fantastic and enthusiastic audience from who I learned a lot.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "An Introduction to Probability",
    "section": "References",
    "text": "References\nWhen you teach such a fundamental field as probability theory and its applications in Finance you teach from a core knowledge that has been built by many pioneers, experts and other teachers in this area. In this sense nothing contained in this course is original work. The only contribution a teacher can make is the way how the material is presented and combined. In this sense these lecture notes are nothing but a collection of well known and time tested material as well as an experiment in yet one more, hopefully innovative exposition.\nBut even in this field I have copied and recycled a lot from the teaching materials and collective wisdom of other colleagues whose examples and problems I found particularly helpful. Without any claim to completeness let me briefly go through the sources I have relied on most strongly when developing this course.\nWith respect to probability theory two sources have influenced me most and I have followed their example extensively in this course: William Fellers “An introduction to probability theory and its applications volume 1.” which first appeared in 1957. (Feller (1968)). While really old by now it is still in my view one of the most outstanding reference with respect to exposition and clarity of explanation as well as an inspiring source of enthusiasm for the subject. I just would like to mention as an aside that Feller (born Vilibald Srećko Feller) was a Croatian emigrant to first Germany and then the US in the 1930ies. You might claim him as a citizen of Croatia, former Yugoslavia or even Austria, since when he was born in 1906, what is now Croatia was still a part of the Austrian-Hungarian empire.\nMy second most important source for this course in terms of probability was Karl Schmedder’s course “An intuitive introduction to probabiliy”, which Karl developed for the online platform Coursera. I consider this course an outstanding didactical achievement and masterpiece. If you find this lectures fun, I can only encourage you to also do the course on Coursera, when you find time. It is for a reason that Karl’s course is the mostly viewed Coursera course from Switzerand.1\n1 See https://www.coursera.org/learn/introductiontoprobabilityIn terms of R and R programming I have followed and copied a lot from Garett Grolemund’s excellent book “Hands on programming with R”.(Grolemund (2014)) I encourage you to study this book. From it I have not only learned about one of the most excellent explanations of R concepts but also the insight that these concepts are best explained within a very concrete and non trivial application context rather than in a patchy series of toy examples.\nWith respect to Finance and investments I have relied on the excellent book by David Luenberger, “Investment Science”. (Luenberger (2009)) If you can get a hold of this fantastic work, I can only encourage you to get one and have it on your shelf. It is a role model of clarity of exposition and has much more to offer than we can cover in this book.\nFinally with respect to the history and the interpretations of probability, I have learned the most form the excellent book “10 great ideas about chance”, by Persi Diaconis and Brian Skyrms. (Diaconis and Skyrms (2019)) If you find probability interesting or even fascinating I encourage you to read this book at some stage, if you find time. It is full of highly interesting philosophical, mathematical, historical and fun facts and ideas about this very rich subject.\nBut now, lets get straight down to the matter at hand.\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nFeller, William. 1968. An Introduction to Probability Theory and Its Applications. 3rd ed. Vol. 1. Wiley.\n\n\nGrolemund, Garrett. 2014. Hands on Programming with R. O’Reilly. https://rstudio-education.github.io/hopr/.\n\n\nLuenberger, David. 2009. Investment Science. Oxford University Press.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01-lecture1.html",
    "href": "01-lecture1.html",
    "title": "1  First probability ideas and first steps in R",
    "section": "",
    "text": "1.1 Tossing a fair coin: First Probability ideas.\nLets start with a classic and basic example of a probability model: Tossing a fair coin. When probability theorists talk of a fair coin they mean that the coin has equal chances of coming up heads as coming up tails. When the coin is tossed it is uncertain whether it will ultimately come up Heads or Tails.\nFigure 1.1: Figure 1: Tossing a coin\nFigure 1.1 visualizes such a process.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#tossing-a-coin",
    "href": "01-lecture1.html#tossing-a-coin",
    "title": "1  First probability ideas and first steps in R",
    "section": "",
    "text": "1.1.1 Random experiments, sample space, events\nIn the theory of probability a process leading to an uncertain outcome is called a random experiment. The example of tossing a coin helps us to give a precise meaning to the notion of an uncertain outcome. While we can imagine in principle that the coin lands on its rim and this is one outcome, we agree on the outset that we are going to consider the (practically relevant cases) that it will land on one of the faces.\nThe collection of all possible outcomes of a practical or conceptual random experiment is called in probability theory a sample space. While the sample space of tossing a coin is an idealization it is exactly this idealization which simplifies the theory without affecting its applicability. The basic outcomes in the random experiment of tossing a coin are that the die lands such that the upward showing face shows Heads or Tails. Let us encode this outcome by 1 for “Heads” and 0 for “Tails”. In the theory the collection of basic outcomes is denoted as a set. Thus the sample space of tossing a coin is given as the set \\({\\cal S} = \\{1,0\\}\\).\nThe sample space \\({\\cal S}\\) is the set of all basic outcomes, which are in our case only two: 1 or 0.\nIn more complex random experiments there will usually be more than two outcomes. Subsets of the sample space containing more than one basic outcome are called events in the theory of probability.\n\n\n\n\n\n\nNow you try\n\n\n\nConsider another random experiment from games of chance: Throwing a six sided die. What are the basic outcomes in this random experiment? What is the sample space in this case? How would you describe the event that the outcome of the die shows an odd number in terms of a subset of the sample space? Consider yet a new random experiment where you throw two coins, instead of one. What are the basic outcomes in this random experiment? What is the sample space in this case? How do these concepts look like when you throw two six sided dice instead of two coins?\n\n\n\n\n1.1.2 The role and nature of idealizations in applications\nIdealizations of the kind we discussed for the toss of a coin are standard in probability and we will encounter them again and again. For example the movement of a stock price is often though of as a conceptual random experiment. When we try to agree on what is the appropriate sample space of this experiment, we can say that the price can not fall below 0 but it is hard to agree on what will be the highest possible price. In the probabilistic treatment of stock prices, which we will discuss later in our course, it is for instance common to assume that the sample space of this random experiment is the entire interval of non-negative real numbers \\({\\cal S} = [0, \\infty)\\).\nMany of us would hesitate to claim that the price might rise without bound. Yet many models in applied Finance are based on such an assumption. The models allow arbitrary price hikes but with arbitrary small probability as the price gets higher and higher. Practically it does not make sense to believe that a security price can become arbitrarily high. The use of arbitrarily small probabilities in a financial model might seem absurd but it does no practical harm and makes the model simple and convenient to use. Moreover, if we seriously introduced an upper bound on a security price at \\(x\\) it would be also awkward to assume that it is impossible that it could be just a cent higher, an assumption equally unappealing than assuming it can get in principle arbitrarily high.\n\n\n1.1.3 Classical Probability: Measuring uncertainty\nProbability is a measure of how likely an event of an experiment is. But how could we measure chance? Here is the first big idea of probability theory and how the originators thought about it.1 How do you measure anything? If you think of length, for example, you take an arbitrary standard you agree on and then count. The originators of probability theory pursued the same idea with chance: To measure probability you choose equally probable cases and then count.\n1 In this discussion I use chapter 1 in Diaconis and Skyrms (2019)The probability of an event \\(A\\) according to the originators of the theory of probability is then \\[\\begin{equation}\nP(A) = \\frac{\\text{Number of cases where $A$ occurs}}{\\text{Total number of cases}}\n\\end{equation}\\]\nThus, if we want to know the probability of the coin ending up Heads, we have to compute according to this notion \\(1/2\\), since the total number of cases is 2 (Heads or Tails).\n\n\n\n\n\n\nNow you try\n\n\n\nConsider another random experiment of throwing a six sided die: According to the probability notion explained above what would be the chance that the die lands on on a face such that an even number is shown?. What would be the chance that in the random experiment of throwing two dice the sum of points would be 7? What is the chance that when rolling two six sided dice the sum is 2?\n\n\nNote that this classical notion of probability has a few interesting consequences, which we will discuss in more detail later but which already now naturally flow from this basic idea of measuring chance.\n\nProbability is never negative.\nIf an event \\(A\\) occurs in all cases \\(P(A)=1\\).\nIf \\(A\\) and \\(B\\) never occur in the same case, then \\(P(A \\,\\text{or}\\, B) = P(A) + P(B)\\).\n\nWhile rule 1. and 2. are intuitively fairly obvious (try to think of examples to convince yourself!), rule 3 might need some concrete explanation. The case described by rule 3 is often referred to as mutually exclusive events, i.e. they can not occur together.\n\n\n\n\n\n\nExample for rule 3:\n\n\n\nSuppose you have a standard deck of 52 playing cards, and you are interested in the probability of drawing a King \\(A\\) or a Queen \\(B\\).\n\nThe probability of drawing a King is \\(P(A) = \\frac{4}{52}\\), since there are 4 Kings in the deck.\nThe probability of drawing a Queen is \\(P(B) = \\frac{4}{52}\\), since there are also 4 Queens.\n\nSince a card cannot be both a King and a Queen, \\(A\\) and \\(B\\) are mutually exclusive events.\nThus, the probability of drawing a King or a Queen is: \\(P(A \\,\\text{or}\\, B) = P(A) + P(B) = \\frac{4}{52} + \\frac{4}{52} = \\frac{8}{52} = \\frac{2}{13}\\)\nThis illustrates how probabilities of mutually exclusive events add up.\n\n\nIn particular then the probability that an event does not occur is 1 less the probability that it occurs: \\(P(\\text{not}\\, A) = 1 - P(A)\\).\nNow let me show you how you can make use of a large language model, using ChatGPT as a use case, to support learning new concepts such as we have just introduced them here.\nWe have discussed new two classical and famous random experiments you will probably find in every textbook on probability. Assume you would like to deepen your understanding of these concepts and also consider more complex examples in particular from Finance. This is something the LLM is very good at. You could - for instance - ask ChatGPT at the prompt something like shown in Figure 1.2 :\n\n\n\n\n\n\n\n\nFigure 1.2: Figure 2: The ChatGPT prompt\n\n\n\n\n\nHere is an answer I would get for this prompt:\n\n\n\n\n\n\nAnswer by ChatGPT40\n\n\n\nHere are three detailed examples from finance to illustrate the concepts of a random experiment, sample space, basic outcomes, and events:\n\nExample 1: Daily Price Movement of a Stock\nRandom Experiment: Observe the daily price movement of a particular stock (e.g., Apple Inc.) at the close of the trading day.\n\nSample Space \\({\\cal S}\\): The set of all possible outcomes of the price movement. For simplicity, we can represent the sample space as: \\({\\cal S} = \\{ \\text{price increase, price decrease, no change} \\}\\)\nBasic Outcomes:\n\n“Price increases” (e.g., the stock closes higher than it opened).\n“Price decreases” (e.g., the stock closes lower than it opened).\n“No change” (e.g., the stock closes at the same price it opened).\n\nEvents:\n\nEvent \\(A\\): “The stock price increases.” \\(\\{ \\text{price increase} \\}\\)\nEvent \\(B\\): “The stock price either increases or remains unchanged.” \\(\\{ \\text{price increase, no change} \\}\\)\n\n\n\nExample 2: Credit Card Default Risk\nRandom Experiment: Assess whether a randomly selected credit card holder defaults on their monthly payment.\n\nSample Space \\({\\cal S}\\):\n\\(S = \\{\\text{default, no default} \\}\\)\nBasic Outcomes:\n\n“Default” (e.g., the cardholder fails to make the minimum payment).\n“No default” (e.g., the cardholder pays at least the minimum required).\n\nEvents:\n\nEvent \\(A\\): “The cardholder defaults.” ({default})\nEvent \\(B\\): “The cardholder does not default.” ({no default})\nEvent \\(C\\): “Default occurs for a customer from a specific demographic (e.g., under 30 years old).” This is a subset of the sample space but is conditioned on additional information.\n\n\n\nExample 3: Bond Ratings Transition\nRandom Experiment: Observe the change in the credit rating of a corporate bond over a year.\n\nSample Space \\({\\cal S}\\): The set of possible credit rating transitions. For example, using a simple rating scale: \\({\\cal S} = \\{\\text{AAA}, \\text{AA}, \\text{A}, \\text{BBB}, \\text{BB}, \\text{B}, \\text{CCC}, \\text{default} \\}\\)\nOver a year, the bond can transition from its initial rating to any of these, or stay the same.\nBasic Outcomes:\n\n“AAA to AAA” (no change in the highest credit quality).\n“BBB to BB” (downgrade).\n“A to default” (significant deterioration).\n\nEvents:\n\nEvent \\(A\\): “The bond is downgraded by one or more notches.” (Any outcome where the final rating is lower than the initial rating, e.g., {AAA to AA, A to BB}).\nEvent \\(B\\): “The bond defaults.” ({default}).\nEvent \\(C\\): “The bond remains investment-grade.” (All transitions where the final rating is AAA, AA, A, or BBB).\n\n\n\nThese examples show how the concepts apply to finance, helping to bridge the theoretical framework of probability with practical applications in the field. Would you like to dive deeper into any of these examples or extend them to computations like probabilities of events?\n\n\nLet us interrupt here our discussion of probability for a moment and ask how we can make good on our promise to make these ideas tangible, so we can play with them.\nFor this we will need the computer. Since we will talk to the computer in R, it is now the right time to look at the coin tossing example from the perspective of R and dive into some of its basic concepts.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#tossing-coin-on-computer",
    "href": "01-lecture1.html#tossing-coin-on-computer",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.2 Tossing a coin on the computer: First steps in R",
    "text": "1.2 Tossing a coin on the computer: First steps in R\n\n1.2.1 The R User Interface\nBefore we can ask our tool to do anything for us, we need to know how to talk to it. In our case RStudio allows us to talk to our computer. It works like any other application. When you launch RStudio on your computer, in figure Figure 1.3 you see a screen looking like this:\n\n\n\n\n\n\n\n\nFigure 1.3: The RStudio startup screen\n\n\n\n\n\nIn this picture you see a screenshot of my RStudio screen. Interacting with the app is easy. You type commands via your keyboard at the prompt, which is the &gt; symbol. You find this symbol in the RStudio pane called Console. You can see it in the left pane in the screenshot. You send the command to the computer by pressing enter. After you have pressed enter, RStudio sends the command to R and displays the result of your command with a new prompt to enter new commands, like this:\n\n1+1\n\n[1] 2\n\n\nLet me pause to explain what you see here in this code example. First you see a light-gray box containing the command 1+1. This is an instance of a so called code chunk. Moving the cursor to the right upper corner of the chunk, will display a copy icon and you can click this icon to copy the code to the computer’s clipboard and then paste it at the prompt of your console (or for that matter anywhere else) and run it in R studio, if you wish. In the code-chunk the R-prompt &gt; is not displayed. This symbol of the prompt is only shown in the Console itself.\nThe [1] means that the line begins with the first value of your result. For example, if you enter the command 20:60 at the prompt of your console which means in the R language, “list all the integers from 20 to 60” and press enter you get:\n\n20:60\n\n [1] 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\n[26] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\n\nmeaning that 20 is the first value displayed in your result. Then there is a line break because not all values can be displayed on the same line and R tells you that 45 is the 26-th value of the result.\nThe colon operator : is a very useful function in R which we will need often. It allows us to create sequences of every integer between two given integers.\nR needs a complete command to be able to execute it, when the return key is pressed. Lets see what happens, if a command is incomplete, like for instance &gt; 5*.\nIn this case R will show the expression followed by a + instead of showing a new prompt. This means that the expression is incomplete. It expects more input. If we complete the expression, say like\n&gt; 5*\n+ 4\nthe expression can be evaluated and a new prompt is shown in the console.\nIf you type a command that R does not understand, you will be returned an error message. Don’t worry if you see an error message. It just is a way the computer tells you that he does not understand what you want him to do.\nFor instance, if you type 5%3 you will get an error message like this\n&gt; 5%3\nError: unexpected input in \"5%3\"\n&gt;\nSometimes it is obvious why a mistake occurred. In this case, that R just does not know what to do with the symbol %. It has no meaning in this context. Sometimes it is not so obvious what the error message actually means and what you might do about it.\nA useful strategy in this case is to type the error message into a search engine and see what you can find. The chance is very high that others encountered the same problem before you and got helpful advice how to fix it from other users on the internet. One site, we find particularly helpful for all kinds of questions related to R and R programming is https://stackoverflow.com/. Try it at the next opportunity. You can also show the error to the LLM prompt and ask how to fix it. In most cases chatGPT will give you a useful answer.\nNow with this basic knowledge, we can already make the first step to create a coin on the computer using R. If you think of a physical coin, the essential thing that matters is that it can show Heads or Tails. Lets encode Heads by 1 and Tails by 0. If you toss the coin it will usually land on one of these faces and the upward showing side of the coin shows the outcome of the toss. The colon operator : gives us a way to create a group of numbers from 0 to 1. R gives us the result as a one dimensional set of numbers.\n\n0:1\n\n[1] 0 1\n\n\nLets use these first steps in R to recap the probability concepts we have learned using this example of the six sided die: A basic outcome of tossing the coin is for example 1 if the upper side after tossing the coin happens to be Heads. The sample space of the experiment of tossing a coin is the set \\({\\cal S} = \\{0,1\\}\\). In probability theory we often use the symbol \\({\\cal S}\\) or \\(S\\) for sample space. In many probability texts the sample space is also often denoted by the symbol \\(\\Omega\\) the Greek letter for (big) Omega. A random experiment in this example is the tossing of the coin. The outcome is uncertain but once the coin is tossed the outcome can be determined precisely. The event that the outcome is a display of 2 is the empty set \\(A = \\emptyset\\). The symbol \\(\\emptyset\\) comes from set theory and means the set containing no elements. This event can contain no elements because we can not get any other number than 0 or 1 by tossing the coin.\n\n\n1.2.2 Objects\nYou can save data in R by storing them in objects. An object is a name, you can choose yourself to store data. For example, if you choose to store the value 1 in an object called Heads, you would type:\n\nHeads &lt;- 1\n\nat the prompt. R will the store the value 1 in the object called Heads, which you can use to refer to the value. If you type the name of your object at the prompt, R will display the value you have assigned. A useful key combination for typing the assignment operator &lt;- is to use the key combination ALT _. At the R prompt R will automatically print an assignment operator.\nNow if you type the name of the object and press enter, R will display the value or values stored in it, like this:\n\nHeads\n\n[1] 1\n\n\nNow you can use the name of the object to refer to its value. For instance, you could divide Heads by 2 and get a meaningful result\n\nHeads/2\n\n[1] 0.5\n\n\nNow to make our coin more tangible and useful, let us store it in an R object by typing the following command at the prompt. This command creates an object with name coin and assigns the vector 0,1 to it.\n\ncoin &lt;- 0:1\n\n\n\n\n\n\n\n\n\nFigure 1.4: The RStudio Environment pane keeps track of the objects you have created\n\n\n\n\n\nYou can now see in the right upper Environment pane in figure Figure 1.4 that R shows you that there is an object with the name coin that it consists of integers 0,1. As you create more objects they will be stored in the Environment pane and are ready for your reference, unless you delete them. You can remove or delete an object by typing rm(object) or by assigning the value coin &lt;- NULL which would also remove the object from your environment or workspace.\nYou can name your objects almost anything with a few exceptions. An object name must not start with a number. There are some special symbols which can also not be used in object names, like ^, !, $, @, +, -, /, *. Note that R is case sensitive and distinguishes small and big letters. If you assign a new value for an object you have already created, R will overwrite the object without warning.\nYou can see which objects are currently created and available for you in the Environment pane of your session of by typing ls(). The UNIX users among you will recognize this command from the unix shell, where it displays the files in a directory.\nBefore we learn how we can actually roll our die and perform a random experiment with it, let us briefly use the opportunity to explain a few things about how R does computations. We have already explained that we can use the object name to refer to the value. So for instance if we type\n\ncoin*coin\n\n[1] 0 1\n\n\nThis might irritate some of you because we have called the object a vector. In linear algebra multiplication of vectors is only allowed if there is an inner product. What happens here, if we use * the multiplication operator is that R does an element-wise multiplication of the six numbers of our die. Of course R allows to take an inner product as well, but this needs a different operator. To compute an inner product, we would type\n\ncoin %*% coin\n\n     [,1]\n[1,]    1\n\n\nNow R displays the result as a vectors with one row and one column, which is denoted in the output by [ , 1] for the column and [1, ] for the row. We will learn later more about the use and the meaning of this notation in R.\nThe element wise execution R usually uses also means that when you, for example type\n\ncoin + 1\n\n[1] 1 2\n\n\nR would subtract 1 from every component in the vector coin.\nAnother specific behavior of R, you need to know about is called recycling. If you give R two vectors of different length in an operation, R will repeat the shorter vector as long as it is of equal length with the longer one. For example, if you have:\n\ncoin + 1\n\n[1] 1 2\n\n\nyou see that R adds 1 to 0 and then starts over again by adding 1 to 1.\nIf the longer vectors is not a multiple of the shorter one, R recycles but the cuts off.2\n2 As of R version 4.2.0 (released in April 2022), the behavior regarding the recycling rule has changed. In older versions of R, a warning was issued when the length of one vector was not a multiple of the length of the other vector during arithmetic operations. The reasoning behind this change was to reduce unnecessary noise in the output. Many users found the warnings redundant in cases where the recycling rule was intentional and understood. However, this change means you need to be more cautious, as unexpected behavior might go unnoticed without the warning.\ncoin + 1:4\n\n[1] 1 3 3 5\n\n\nWhile this might seem awkward to some of you, we will see that for data manipulation element-wise execution is often extremely useful. It allows to manipulate groups of values in a systematic yet easy way.\n\n\n1.2.3 Functions\nR contains many functions which we can use to manipulate data and compute things. The syntax for using a function is very simple: You type the function name and put the value of the function argument in parentheses. Here we use for illustrations the function of the square root sqrt():\n\nsqrt(4)\n\n[1] 2\n\n\nor rounding a number:\n\nround(3.1415)\n\n[1] 3\n\n\nThe data you write in the parentheses are called the function arguments. Arguments can be all sorts of things: raw data, R objects, results from other functions.\nIf functions are nested, R evaluates the innermost function first and then goes on to the outer functions. To see examples of all these instances you can take\n\nnumbers &lt;- 1:7\nmean(numbers)\n\n[1] 4\n\nround(mean(numbers))\n\n[1] 4\n\n\nfor example.\nFor simulating random experiments, R has the very useful function sample(). With this function we can - for example - toss a coin on the computer and conduct actual random experiments.\nThe function takes as arguments a vector names x and a number named size. sample will return size elements randomly chosen from the vector x. Lets say:\n\nsample(x = 0:1, size = 1)\n\n[1] 1\n\n\nIn this case sample has chosen either 0 or 1 from the vector x = (0,1) at random.\nIf we want to toss the coin in our computer we can thus pass the coin as an argument to sample and use the number 1 for the size argument. Lets do a few tosses with our die\n\nsample(x = coin, size = 1)\n\n[1] 0\n\nsample(x = coin, size = 1)\n\n[1] 1\n\nsample(x = coin, size = 1)\n\n[1] 0\n\nsample(x = coin, size = 1)\n\n[1] 0\n\n\nThese are the random outcomes of our consecutive tosses. It is as if we had thrown an actual coin but in this case we have done the same thing on the computer. Isn’t it cool that this is possible at all? The sample() function will remain our good friend throughout this course.\nR functions can have many arguments, but they need to be separated by a comma.\nEvery argument in every function has a name. We specify which data are assigned to the arguments by setting a mathematical equal sign = between the name and the data. Names help us to avoid passing the wrong data and thereby mixing up things or committing errors. But using names is not necessary. If we just wrote\n\nsample(coin,1)\n\n[1] 0\n\n\nR would also know what to do. It is not always clear which names to use for a function. If you are not sure, you can use the function args() to look it up. Here we take the function roundas one example.\n\nargs(round)\n\nfunction (x, digits = 0, ...) \nNULL\n\n\nNote that the digits argument in the round function is already set to 0. Frequently R functions come with optional arguments. These arguments are optional because the come with a default value, which is 0 in case of the round function.\nWe recommend that you write out argument names as a rule. It gives clearer code and avoids errors. If you don’t write argument names, R matches your values to the arguments of the function by order.\n\n\n1.2.4 Writing your own functions\nNow we are ready to write our own function to toss the coin in our computer. Each function in R has the same elements: A name, a function body of code and a set of arguments. To write your own function, you have to write up all of these parts and save them in an R object. The syntax is:\nmy_function &lt;- function() {}\n\nThe name here is my_function, next comes the expression function() which needs to be assigned. The names of the function arguments have to be written between the parentheses. Then we have to write the actual code within the braces {}.\nTo do this for the die, lets write a function named toss_coin.\n\ntoss_coin &lt;- function(){coin &lt;- 0:1 \n                         sample(coin, size = 1)}\n\nNow we can toss our coin for a few times to show how the function works\n\ntoss_coin()\n\n[1] 0\n\ntoss_coin()\n\n[1] 0\n\ntoss_coin()\n\n[1] 1\n\ntoss_coin()\n\n[1] 0\n\ntoss_coin()\n\n[1] 1\n\n\nNote that in our function toss_coin() has no arguments, just the function body. This is perfectly legitimate in R. It is important that when we call the function we have to call it with the parenthesis like toss_coin(). If we only call the name toss_coin, R will display the code in the function body.\nA final remark in the sample function is in place here. If we look at the arguments of sample using the args function we see\n\nargs(sample)\n\nfunction (x, size, replace = FALSE, prob = NULL) \nNULL\n\n\nLets do not discuss all the details of this output but concentrate for a moment on the replace argument. What does this mean?\nAs we saw previously we can use the sample function to model the rolling of our die. If we set the size argument to 1 we get the toss of one coin. If we set the size argument to n, we would simulate the tossing of n coins. But now the replace argument becomes crucial. As we can see in the output of the args function replace has a default value FALSE. This is a logical argument. It tells R, for example, that if we set size = 2, meaning that two coins are tossed, if the first coin shows, say Heads - a value of 1- the coin die cannot show Heads as well.\nThis is clearly not what we have in mind when we model the tossing of two coins. It should be possible that both coins show the same value. To enable this behavior of the sample function, we have to change the default value of the replace argument to TRUE. Then R chooses a random draw from all of the six possible values for all dice rolled.\nCongratulations ! You have written your first R function for conducting a simple random experiment. Let me remind you once again: Think of the parentheses as a trigger that tells R to run the function. If you omit the trigger R just prints the body of the function. When you run a function, all the code in the function body is executed and R returns the result of the last line of code. If the last line of code does not return a value neither will R.\n\n\n\n\n\n\nNow you try\n\n\n\nConsider another random experiment of throwing a six sided die. Use the concepts learned in this section to write a function which simulates the rolling of a six sided die. Write a function to simulate the throwing of two dice. Think about how to set the replace argument in the sample function in this case. Use R’s help function to learn about the role of the replace argument. Alternatively ask the LLM to explain the use of replace in R’s sample function. You can also ask for examples or demonstrations what goes wrong when this argument is parametrized in the wrong way.\n\n\n\n\n1.2.5 Arguments\nImagine we remove the first line of code in our function body and changed the name die in the sample function to “ball”.\n\ntoss_coin2 &lt;- function(){sample(ball, size = 1)}\n\nIf we call the function now, we will get an error. The function call roll_die2() will result in the error message Error in sample(ball, size = 1) : object 'ball' not found (try it!)\nWe could supply ball when we call toss_coin2 if we make ball an argument of the function. Lets do this:\n\ntoss_coin2 &lt;- function(ball){sample(ball, size = 1)}\n\nNow the function will work as long as we supply ball when we call the function.\n\ntoss_coin2(ball = 0:1)\n\n[1] 0\n\n\nNote that we still get an error, if we forget to supply ball argument. This could be avoided if we give the function a default argument\n\ntoss_coin2 &lt;- function(ball= 0:1){sample(ball, size = 1)}\n\nNow if we type:\n\ntoss_coin2()\n\n[1] 1\n\n\neverything works, just as intended.\n\n\n1.2.6 Scripts\nSo far we have worked by interacting with the console. But what if you want to edit your functions? It would be much easier, if you could use a draft of your code and work form there. This can be done by using a script.\nYou create a script by going to File &gt; New File &gt; R script in the menu bar of RStudio. Using scripts is the standard way to write code in R. It not only helps you to keep track of your code, save it and edit it later. It also makes your work reproducible. You can edit and proofread your code and share it with others. To save your script go to File &gt; Save As in the menu bar.\n\n\n\n\n\nThe RStudio Script\n\n\n\n\nRStudio has many useful features to help you work with scripts. You can for instance automatically execute a line in a code by using the run button. You can also execute sections of code or the entire script. The entire script is executed by running the Source button. For all these commands there are key short cuts which you will learn as you work more with RStudio and R.\nFrom now on you should write all your R-code for this course in scripts. Make a new folder for the scripts you write and store your R-code there from now on.\n\n\n1.2.7 Using Quarto Documents\nQuarto documents provide an elegant way to combine explanatory text, R code, and the resulting output in one cohesive file. This makes them especially useful for documenting your learning process, conducting reproducible research, or preparing assignments.\nLet’s walk through how to use a Quarto document to write down and experiment with your coin-tossing function.\n\nCreating a New Quarto Document: To begin, create a new Quarto document in RStudio by navigating to File &gt; New File &gt; Quarto Document.... You will see a popup window allowing you to type a title for the document and your name. It also allows you to select a format for your document. Choose the HTML format for now, as it allows easy preview in your browser, and click the Create button The popup window will look something like this:\n\n\n\n\n\n\nThe quarto pop up window\n\n\n\n\n\nUnderstanding the Quarto Layout: The new Quarto document will have a YAML header at the top, which might look like this:\n\n\n\n\n\n\nThe quarto yaml header\n\n\n\n\nBelow this header, you will see some example text and R code chunks. Replace the example content with your own text and code.\n\nAdding the Coin Tossing Function: In your Quarto document, you can explain your approach to creating the coin-tossing function, and include the code in a code chunk.\nHere’s an example:\n\n\n\n\n\n\nCombining text and code in quarto documents\n\n\n\n\n\nRunning and Compiling the Document: Once you have written your text and code, save your document. You can execute the R code directly within the Quarto document. To run a code chunk, click the green play button in the upper-right corner of the chunk or use the shortcut Ctrl + Shift + Enter (Windows) or Cmd + Shift + Enter (Mac).\nAfter executing your code, you can compile the document into a readable output format by clicking the Render button or using the shortcut Ctrl + Shift + K (Windows) or Cmd + Shift + K (Mac).\n\nThere is of course a lot you can do to enhance your quarto documents. For example the lecture notes you are reading now are all written and composed in quarto as are the lecture slides.\nBy using Quarto documents, you can create well-documented, interactive code files that are both functional and easy to share with others. You can use quarto indpendently from R and combine it with other languages like phyton or julia. Ceck out: https://quarto.org/\n\n\n1.2.8 Using packages and finding Help\nWe have now a function which we can use to simulate the tossing of a coin, coin_toss(). If the coin is fair it should be the case that if we toss the coin often, Heads and Tails should occur about equally often. The coin should not be weighted in favor of a particular value.\nOne way to learn whether our coin is fair are repetition and visualization. These are tools we will need all the time, when working with data and when doing probability. While R has many useful functions, one of the great powers is that R is constantly extended by a huge community of users by providing packages.\nPackages are add on functions, which will not be available when you install R. They need to be installed and loaded before you can use them. Since packages are such a powerful tool in R we need to introduce what they are and how to use them in the beginning.\n\n\n1.2.9 Packages\nThere are many visualization tools in R that come with the basic installation. Since the point we want to make here is about packages, we will use a visualization function which is part of the add on package ggplot2, a very popular package for making all kinds of graphs. ggplot2 is not part of the base-R distribution. It has to be therefore loaded before we can use it.\nThere are many additional functions provided with this package. Indeed you could run a whole course on just that 3\n3 A very good starting point is for instance Healy (2019), in case you are interested. Also a good source is the first chapter in Wickham and Grolemund (2017).Since we want to use functios now which are not in the base R distribution. we need to load the package which provides the functions we want. In this example we use the package ggplot2.\nWhen we use a package for the first time it needs to be installed. Once installed it does not have to be reinstalled when we use it at later coding sessions again.\nTo install a package you need to be connected to the internet. If you have internet connection go to the command line and run at the command line: install.packages(\"ggplot2\").\nR displays what is happening while executing the command. Don’t worry if you don not know what all of these messages exactly mean and don’t panic that they are displayed in red. All packages can be installed like this. You have just to enter the correct name in the function install.packages(). The lower right pane in the RStudio software alternatively provides a tab called Packages. Using this tab, you can also install R packages interactively by clicking the install button on the upper left corner of the Packages tab.\nAfter installation the package is on our hard-drive but it can not yet be used. To use the package it has to be loaded. This is done with the command library. To load the ggplot2 package we type\n\nlibrary(\"ggplot2\")\n\nand hit the return key. Many things could be said about the R package system and you will learn it in more detail as we go along in our course. For the moment the most important thing to remember is that a package needs to be newly loaded whenever you want to use it in a new R session.\nTo check whether our coin is fair, we need to toss it many times. R provides a function, that does this for us. This function is called replicate() and provides an easy way to repeat a command many times. The number of times we want to repeat something is given as an argument to the replicate function.\nNow lets roll our die 100 times and save the result in an object we call tosses:\n\nset.seed(123)\ntosses &lt;- replicate(100, toss_coin())\n\nThe function set.seed() I used here with the argument 123 is just a device to make this experiment reproduceable. If this function is not used, each new run of the 100 replications would show a different outcome.\nI now show you a code for visualizing this outcome. The code contains some concepts that we did not yet discuss. Don’t worry. We will learn them soon. The point here is to shwo you how we use the functions of the package to produce a visualization of the outcome of our 100 coin tosses.\n\n# Create a data frame for plotting\ntosses_df &lt;- data.frame(\n  Outcome = factor(tosses, levels = c(0, 1), labels = c(\"Tails\", \"Heads\"))\n)\n\n# Plot the results using ggplot2\nggplot(tosses_df, aes(x = Outcome)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(\n    title = \"Occurrences of Heads and Tails\",\n    x = \"Outcome\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nIt looks like every value occurred roughly 50 times but there is still quite some variation. Tail occured fewer times than Heads.\nMaybe we have to give it another trial with more replications. With the computer we can do this with a fingertip. Let us roll our die 1000 times and plot the result.\nHere is how we would code this by recycling the code used before.\n\nset.seed(123)\ntosses &lt;- replicate(1000, toss_coin())\n\n# Create a data frame for plotting\ntosses_df &lt;- data.frame(\n  Outcome = factor(tosses, levels = c(0, 1), labels = c(\"Tails\", \"Heads\"))\n)\n\n# Plot the results using ggplot2\nggplot(tosses_df, aes(x = Outcome)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(\n    title = \"Occurrences of Heads and Tails\",\n    x = \"Outcome\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nNow it looks much better: Each face comes up approximately 500 times. We will learn in our course why the picture get better as we increase the number of rolls of the die. For the moment, let us just state that at least for this case it seems that there is no significant visual evidence that our virtual die is loaded.\nBut wait a minute. We have introduced the idea of classical probability by constructing equally probable cases and then count. Here we have repeated a random experiment over and over again to draw some conclusion on the underlying probabilities by visualizing the frequency polts of outcomes? These ideas are connected. We have just informally introduced a new idea in probability, the relative frequency notion of probability. How the two concepts are related and why this notion makes sense we will learn more formally in the next lecture. For the moment let’s just stick with the idea that practitioners have used at all times to assess probabilities by looking at frequencies of particular events occurring. When and why this kind of reasoning about probability works we learn in the next lecture.\n\n\n\n\n\n\nTip for R novices: How to leverage the LLM to enhance understanding\n\n\n\nLet me give you a hint here how you could use the LLM to enhance your learning experience in another way. The students usually taking this bootcamp class have very different backgrounds. Some have much experience with programming but perhaps not necessarily in R. Many of you will - for example - know Python, because most of the MQF is taught and run with Python. In such a case you could use the LLM to translate the R code into Python and then compare.\nOr assume you are impatient and want to jump ahead by having somebody explaining you the ggplot2 code we used for the plotting function. Ask the LLM to explain you the R code and what it does, and I assure you you will get a pretty good and well explained answer.\nTry it!\n\n\n\n\n1.2.10 Getting Help\nWe have now learned a tiny number of R functions and we have written one function ourselves. We have learned how to make use of functions provided by packages.\nIt would be overwhelming to memorize and learn them all. In R, fortunately, every function comes with a detailed documentation and with its own help page. You need to learn how to use this source right from the beginning.\nTo access the help page of a function you type the function name preceded by a question mark at the prompt, like this\n\n?sample\n\nThen, after you have pressed the return key, a help page is opened in the right lower pane under the help tab as shown in Figure 1.5\n\n\n\n\n\n\n\n\nFigure 1.5: The Help-pane in RStudio\n\n\n\n\n\nThis help page has a particular structure that you will find for every other R function no matter whether it is provided by the base installation or by a package. In the upper left corner you see the name of the function (sample) and in curly brackets next to it the term base, which means that this is a function in the R base installation. Then you see a headline about what the function does.\nFrom the top of the page, you then first see the field Description. This is a short description what the function does. Here it says\nDescription\nsample takes a sample of the specified size from the elements of x using either with or without replacement.\nThe next field is Usage. It gives you the function description with the arguments. Here for example\nUsage\nsample(x, size, replace = FALSE, prob = NULL)\n\nsample.int(n, size = n, replace = FALSE, prob = NULL,\n           useHash = (!replace && is.null(prob) && size &lt;= n/2 && n &gt; 1e7))\n           \nThe first line in Usage should by now be familiar. Don’t worry about the second line. The function can obviously do more than we know so far.\nNext comes a list of arguments the function takes and what type of information R expects you to provide, as well as what R will do with this information. Here it says for example\nArguments\nx   \neither a vector of one or more elements from which to choose, or a positive integer. See ‘Details.’\n\nn   \na positive number, the number of items to choose from. See ‘Details.’\n\nsize    \na non-negative integer giving the number of items to choose.\n\nreplace \nshould sampling be with replacement?\n\nprob    \na vector of probability weights for obtaining the elements of the vector being sampled.\n\n...\n\nWe omit some information here.\nThen comes a field called Details which gives a more in-depth description of the function. The next field is called Value. It describes what the function returns when you run it. Then we have a reference to related R functions under the field See. Finally there is a field called Examples. This field contains example code that is guaranteed to work. It shows a couple of different cases how you can use the function in practice.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#coincidences",
    "href": "01-lecture1.html#coincidences",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.3 Application: Coincidences and the Blockchain",
    "text": "1.3 Application: Coincidences and the Blockchain\n\n1.3.1 The birthday problem\nIn this section, we will apply our foundational knowledge of probability - which is at the moment just the informal and intuitive notion of counting equally probably cases - to a fascinating real-world problem known as the birthday problem:\nThe starting question in the birthday problem is: What is the probability that at least two people in a room share the same birthday, when we neglect things like leap years, and when we assume that birthdays on any day of the year are equiprobable and the birthdays of the people in the room are independent. We have no twins for example.\nPerhaps some of you have already seen this problem before. If not, the result may surprise you. Even if you saw the birthday problem before, perhaps not many of you are aware that the significance of this problem reaches far beyond recreational math puzzles. This is because the birthday story is of course accidential. The mathematical formulation of the problem will reveal through the process of abstraction that this problem is at the heart a problem about the probability of coincidences. As such it has real world connections to cryptography and the blockchain security.4\n4 We follow here the discussion in Diaconis and Skyrms (2019)Through this problem, we will:\n\nExplore how to frame probability questions mathematically.\nUse basic R functions to compute probabilities.\nLearn how to simulate experiments to approximate probabilities. This problem is not only an entertaining mathematical puzzle but also a stepping stone to understanding its applications in cryptography and blockchain security.\n\nFirst, observe that we took our assumptions such that we are in the frame of classical probability like the originators of the field thought about it.\nNow for the sake of familiarizing ourselves with the new concepts, let us try to map the birthday problem into the probability notions we learned so far.\nThe sample space is the set of possible outcomes of the experiment. The sample space for our problem includes all possible combinations of birthdays for the group. For example, if there are 3 people, each with a birthday on any of 365 days, the sample space contains all possible sequences of three birthdays:\n\\((1,1,1),(1,1,2),…,(365,365,365)\\)\nIn general, for \\(n\\) people, there are \\(365^n\\) possible combinations, as each person’s birthday is independent of the others.5\n5 Mathematically you can describe the sample space for the birthday problem as a set with \\(365^n\\) ordered \\(n\\)-tuples or sequences of birthdays: \\({\\cal S} = \\{x | x \\in 365^n \\}\\) This is the sample space of this experiment, written as in set theoretic notation. It means the sample space is the set of all ordered \\(n-tuples\\) from the Cartesian product \\(365^n\\). Remember that in mathematics, a Cartesian product is a mathematical operation that returns a set (or product set or simply product) from multiple sets (in this case the sample space, \\({\\cal S}\\). That is, for sets \\(A\\) and \\(B\\), the Cartesian product \\(A \\times B\\) is the set of all ordered pairs \\((a,b)\\) where \\(a \\in A\\) and \\(b \\in B\\).Now given this sample space we can assign a probability to the event that two people chosen at random will have the same birthday. The denominator will this be \\(365^n\\). The nominator for this probability will be much more straightforward to figure out, if we compute the complement. We discussed before that the probability of the complement of an event is 1 minus the probability of the event: \\(P(\\text{not} A) = 1 - P(A)\\).\nLet \\(A\\) denote the event that no two people share the same brithday. We can then use the complement rule to compute the probability of at least two people sharing a birthday: Compute the probability that no two people share a birthday. Subtract this probability from 1 to get the probability of at least one match.\nHere’s how we compute the probability of no matches:\n\nThe first person can have any birthday \\((365/365)\\).\nThe second person must avoid the first person’s birthday \\((364/365)\\).\nThe third person must avoid the first two birthdays \\((363/365)\\).\n\nNow continue this reasoning for \\(n\\) people.\nThe final probability is:\n\\[\\begin{equation*}\nP(\\text{at least two people share birthday}) =\n1 - \\frac{365 \\times 364 \\times 363 \\cdots \\times 365 - n +1}{365^n}\n\\end{equation*}\\]\nNow there is an additional thing we did not yet introduce and which we will learn about in the next lecture. This refers to our assumption that the individual birthdays are independent. For the moment you need to take the following fact on faith: The probability of independent events is the product of the probability these events.\nNow comes the surprise for those of you who did not already see the birthday problem. Assume the group size of people is 23. Let us compute the birthday coincidence probability. For this computation we make use of the R function prod() which takes a vector of numbers as input and computes their product. For \\(n=23\\) we need the list of numbers from 365 to 343. Now we can use the : operator and take advantage from one of its cool properties. If we formulate the command as 365:343 then the colon operator will give us a descending list of integers starting at 365 and ending at 343. Then the probability can be computed as\n\n1 - prod(365:343)/365^23\n\n[1] 0.5072972\n\n\nWe have used the operator ^ which is needed to compute powers. Now we see from our computation that with 23 people the probability is already larger than 50 %. Quite stunning. You can now verify yourself that with 50 people this probability is already at 97 %.\nLet’s visualize how the probability of at least one shared birthday grows with the size of the group. This time I will use base R’s plotting functionality and not use the ggplot2 package.6\n6 I used ggplot2 before to explain the concept of a package and how to load it to enhance R’s functionality. Base R containts a lot of powerful plotting functions which work independently of gglot2.The plot below shows that the probability exceeds 50% with just 23 people and quickly approaches 100% as the group size increases.\n\n# Define the birthday_collisions function\n\nbirthday_collisions &lt;- function(n) {\n  1 - prod(365:(365 - n + 1)) / 365^n\n}\n\n# Generate data for group sizes\n\ngroup_sizes &lt;- 1:50\ncollision_probs &lt;- sapply(group_sizes, birthday_collisions)\n\n# Plot the probability of at least one shared birthday\n\nplot(group_sizes, collision_probs, type = \"l\", col = \"blue\", lwd = 2,\n     xlab = \"Group Size\", ylab = \"Collision Probability\",\n     main = \"Probability of At Least One Shared Birthday\")\nabline(h = 0.5, col = \"red\", lty = 2)  # Highlight the 50% threshold\n\n\n\n\n\n\n\n\nI will not go in detail into the explanation of the code at this stage. For those of you who crave for an explanation, please look at the marginal note here or use the LLM for a step by step explanation.7\n7 birthday_collisions Function: This function calculates the probability of at least one shared birthday for a group of \\(n\\) people using the formula derived earlier. group_sizes and collision_probs: group_sizes defines a range of group sizes (1 to 50). sapply applies the birthday_collisions function to each group size, computing the collision probabilities. Visualization: A line plot (type = \"l\") is used to visualize how the collision probability increases with group size. A horizontal red dashed line (abline) highlights the 50% threshold for better visual context.\n\n1.3.2 Determining birthday collisions by simulation\nInstead of deriving the probability analytically, we can simulate the birthday experiment if we use the relative frequency notion of probability which we informally had used in our visualization of coin tosses. Here’s how:\n\nGenerate random birthdays for nn people using sample(1:365, n, replace = TRUE).\nCount how often at least two people share a birthday using the duplicated() functionin combination with the logical function any().\nRepeat the simulation many times (e.g., 10,000) using replicate() to estimate the probability.\n\n\nsim_birthday &lt;- function(n, trials = 10000) {\n  results &lt;- replicate(trials, {\n    birthdays &lt;- sample(1:365, n, replace = TRUE)\n    any(duplicated(birthdays))\n  })\n  mean(results)\n}\n\nLet me give a step-by-step breakdown of this piece of code.\n\nDefining the Function:\n\nThe function sim_birthday has two arguments\n\nn: The number of people in the room (group size).\ntrials: The number of simulation repetitions (default is 10,000). These parameters allow us to customize the simulation for different group sizes and levels of precision.\n\n\nUsing replicate to Run Simulations:\nThe replicate() function repeats an experiment a specified number of times (trials). Each experiment simulates one instance of \\(n\\) people in a room.\nSimulating Birthdays:\nThe sample() function generates \\(n\\) random birthdays (integers between 1 and 365) with replacement, representing the assumption that birthdays are independent and uniformly distributed. This step directly reflects the assumptions made in the analytical solution:\n\nThe sample space consists of 365 possible birthdays.\nSampling is done with replacement because multiple people can share the same birthday.\n\nChecking for Duplicates:\nThe duplicated() function identifies repeated birthdays in the sample. The any() function checks if there is at least one duplicate. If duplicates exist, this corresponds to a “birthday collision.” This step operationalizes the concept of finding the complement (at least one collision) rather than calculating the probability of all unique birthdays.\nCalculating the Probability:\nThe results vector contains TRUE (collision occurred) or FALSE (no collision) for each trial. Taking the mean() of this logical vector calculates the proportion of trials with a collision, which corresponds to the simulated probability. This step ties back to the definition of relative frequency probability introduced earlier: the probability of an event is the ratio of favorable outcomes to the total number of trials.\n\nThis step requires some explanation of how R uses data types. We will learn about this more systematically in the next lecture. Here I give a quick and superficial explanation. R can force logical data types automatically to a numerical type when it applies arithmetic functions to a logical vector, forcing TRUE to 1 and FALSE to 0. Now, when you take the average (mean()) of a vector containing only 1 and 0 values you will get the proportion of 1’s or TRUE values. We will use such tricks often during the course of the lecture. For the moment I ask you to bear with this quick and superficial explanation of why this way of proceeding does what we want.\nNote that this code uses a function within a function, which makes the code very efficient.8\n8 As always there are many different ways to write this code a bit differently. Those of you who are more experienced in programming you can challenge yourself by using for instance the following approach: Create a single matrix where each row represents one trial, and each column corresponds to a birthday for one person in that trial.Use the apply()function for Row-Wise Operations checking for duplicates. The result should be a logical vector indicating whether each trial has a duplicate and then take the mean of this vector.Let’s compute the birthday collision probability for 23 (as in our analytical solution) and 50 people:\n\nsim_birthday(23)\n\n[1] 0.5111\n\nsim_birthday(50)\n\n[1] 0.9718\n\n\n\nFor \\(n = 23\\), the output should be close to the analytically derived probability \\(\\approx 0.507\\).\nFor \\(n = 50\\), the output should approximate \\(\\approx 0.970\\).\n\nWhat are the advantages of simulations. Here are three main advantages:\n\nFlexibility: This method works even when the assumptions (e.g., uniformity or independence) are adjusted.\nVerification: We can confirm analytical results with experimental data.\nReal-World Application: Simulation methods are widely used in practice when exact formulas are unavailable or complex.\n\nBy understanding and applying this simulation, you now have a practical tool to explore probability problems beyond purely mathematical derivations.\nThe birthday problem has practical implications beyond recreational math. In cryptography, the same underlying principles are used to analyze the likelihood of hash collisions in blockchain systems and digital signatures. Let’s explore this connection further.\n\n\n1.3.3 Hash-functions and the blockchain\nThe birthday problem provides the foundation for studying coincidences in various contexts. A critical application is in cryptography, where the concept of hash functions relies on similar probabilistic principles to ensure data security.\nA hash function is a mathematical tool that converts an input (e.g., a text, file, or number) of any size into a fixed-length output, often called a “hash value” or “digest.” For example, the widely used hash function SHA-256 maps its input to a 256-bit string. You can think of this hash value as a digital fingerprint: any change to the input, no matter how small, results in a completely different hash.\nHash functions have two critical properties that make them essential in cryptography:\n\nOne-wayness: It is computationally unfeasible to determine the original input from the hash value. A hash function is easy to evaluate or compute but it is practically impossible to learn from the value the initial argument by computing the inverse.\nCollision resistance: It is highly unlikely for two different inputs to produce the same hash value.\n\nIf the range of the hash-function is \\(M\\) and the hash-function maps into a 256 bit string then there are \\(2^{256}\\) basic outcomes. Since the hash-function maps a large string onto a smaller string it is possible that there are two different strings \\(x \\neq y\\) mapping to the same value \\(\\text{hash}(x)=\\text{hash}(y)\\). This would be a problem for message authentication because it would give the same “fingerprint” for two different strings.\nFor a cryptographically secure hash function it is therefore required that the probability of such a collision should be small enough to exclude a collision in all practically relevant circumstances.\nThe collision problem for hash functions is analogous to the birthday problem. Instead of asking how many people are needed in a room for a shared birthday, we ask: how many inputs (e.g., messages or files) need to be hashed before two of them produce the same hash value? This probability depends on the size of the hash space, which is determined by the number of bits9 in the hash function’s output.\n9 A bit, short for binary digit, is defined as the most basic unit of data in telecommunications and computing. Each bit is represented by either a 1 or a 0Let \\(M = 2^{256}\\) the number of possible hash values. The probability of no collisions after \\(n\\) hashes is\n\\[\\begin{equation*}\nP_{nc}(n) = 1 \\times \\left(1 - \\frac{1}{M}\\right)\\times\n\\left(1 - \\frac{2}{M} \\right) \\times \\cdots \\times \\left(1 - \\frac{(n-1)}{M} \\right)\n\\end{equation*}\\]\nFor \\(n\\) large this probability can be approximated by a factorial expansion as \\[\\begin{equation*}\nP_{nc}(n) \\approx \\prod_{k=0}^{n-1} \\left( 1 - \\frac{k}{M} \\right)\n\\end{equation*}\\]\nNow convert the product into a sum using the natural logarithm: \\[\\begin{equation}\n\\ln P_{nc}(n) \\approx \\sum_{k=0}^{n -1} \\ln \\left( 1 - \\frac{k}{M} \\right)\n\\end{equation}\\]\nNow to do the estimation of the threshold we use an approximation, which works with a simple property of the logarithm: \\(\\log(1-x)\\approx -x\\) when \\(x\\) is small. Thus for \\(n\\) much smaller than \\(M\\), or \\(n \\ll M\\), we can write the no-collision probability as \\[\\begin{equation*}\n\\ln P_{nc}(n) \\approx - \\sum_{k=0}^{n-1} \\frac{k}{M}\n\\end{equation*}\\] Simplify the summation by usin the fact that \\(\\sum_{k=0}^{n-1} = \\frac{n(n-1)}{2}\\) we get \\[\\begin{equation*}\n\\ln P_{nc}(n) \\approx -\\frac{n(n-1)}{2\\, M}\n\\end{equation*}\\] By taking exponentials on both sides this gives us \\[\\begin{equation*}\nP_{nc}(n) \\approx \\exp \\left( - \\frac{n(n-1)}{2 \\, M} \\right)\n\\end{equation*}\\]\nThus the probability of a hash-collision as a function of \\(n\\) is then approximately\n\\[\\begin{equation*}\nP_{c}(n) = 1- P_{nc}(n) \\approx \\frac{n^2}{M}\n\\end{equation*}\\]\nLet’s try a visualization to show how \\(P_{c}(n)\\) increases with \\(n\\):\n\nn &lt;- 1:100\nM &lt;- 2^256\n\ncollision_prob &lt;- (n^2) / (2 * M)\n\nplot(n, collision_prob, type = \"l\", log = \"y\", col = \"blue\",\n     xlab = \"Number of Inputs (n)\", ylab = \"Collision Probability (log scale)\",\n     main = \"Hash Collision Probability (SHA-256)\")\nabline(h = 0.5, col = \"red\", lty = 2)  # 50% threshold\n\n\n\n\n\n\n\n\nThese results show that for SHA-256:\n\nTo have a \\(50\\)% chance of a collision, an attacker would need to compute approximately \\(2^{128}\\) hashes.\nAt \\(10000\\) hashes per second, this would take longer than the age of the universe.\n\nThis enormous computational difficulty ensures the security of modern cryptographic systems. Even with the combined computing power of all devices on Earth, finding a collision is practically impossible.\nThe birthday problem demonstrates how fundamental probability concepts can inform critical applications like cryptographic hash functions. By understanding the collision probabilities, we see why hash functions like SHA-256 are effective for ensuring data integrity and security.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#summary",
    "href": "01-lecture1.html#summary",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.4 Summary",
    "text": "1.4 Summary\nIn this lecture we have taken a first step towards some very basic probability notions and some basic steps in R. Isn’t it amazing how much territory we could cover with so few concepts? You have learned about how to think probabilistically about collision probabilities and how to solve for them analytically, by simulation and for large numbers by approximation.\nWe have convinced ourselves using this knowledge only and taking on faith that the probability of independent events is the product of their individual probabilities, that the cryptographic Hash-function SHA-256, while it can produce collisions in theory, practically the number of hashes to make such a collision occur would be so large that we can be confident that hashing bit strings with SHA-256 gives us a unique fingerprint practically with certainty.\nThese are the basic probability concepts we have covered in this lecture:\n\nA random experiment: A process leading to an uncertain outcome.\nSample space: The collection of all possible outcomes of a random experiment.\nBasic outcome: A possible outcome of a random experiment.\nEvent: An event is a subset of basic outcomes. Any event which contains a single outcome is called a simple event.\nClassical probability find or make equally probably cases and the count them. The probability of an event \\(A\\) is the number of cases when \\(A\\) occurs divided by the total number of cases.\nRelative frequency probability defined as the number of times an event \\(A\\) occurs in a repeated number of trials divided by the total number of trials in a random experiment.\n\nThese are the R concepts we have covered in this lecture:\n\nobjects arbitrary names that can store different values and data types.\nfunctions ab R object that can accept other R objects as arguments, operate on them and return a new object.\nscripts files that store sequences of R commands and can be saved, repopened and allow the execution of commands.\nusing packages\nfinding help\nthe functions sample and replicate\n\nThese are the Applications we have covered in the lecture:\n\nConstructing a coin on the computer and toss it an arbitrary number of times\nThe birthday problem and how to solve it analytically as well as through simulation\nExtrapolating the birthday problem to analyze cryptographic collision resistance of hash-functions by using ideas from probability",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "01-lecture1.html#project-designing-transaction-identifyers-for-digital-payment-systems",
    "href": "01-lecture1.html#project-designing-transaction-identifyers-for-digital-payment-systems",
    "title": "1  First probability ideas and first steps in R",
    "section": "1.5 Project: Designing transaction identifyers for digital payment systems",
    "text": "1.5 Project: Designing transaction identifyers for digital payment systems\n\n1.5.1 Introduction: Real-World Importance of Unique Identifiers in Finance\nIn modern financial systems, every transaction is assigned a unique identifier, allowing stakeholders to track, verify, and manage transaction details efficiently. These identifiers are critical for maintaining transparency, accountability, and security across high-volume transaction systems. However, as the volume of transactions grows, the risk of identifier collisions—where two different transactions are assigned the same identifier—increases.\nThis issue is analogous to the birthday problem: as the number of transactions increases, the likelihood of collisions rises due to the combinatorial nature of the problem. A collision could result in processing errors or even security vulnerabilities, such as fraudulent transactions or misattribution of funds.\nTo mitigate such risks, many financial systems employ hash functions, such as the widely used SHA-256, to map data to a large space of possible outputs. These hash functions, with their vast output range (e.g., \\(2^{256}\\)), make collisions extremely unlikely, even for billions of transactions. By understanding the principles behind collision probabilities, financial institutions can design systems that maintain transaction integrity even under high workloads.\nIn this project, we will explore this critical aspect of financial systems by simulating transaction identifiers and analyzing collision probabilities. This exercise demonstrates how theoretical probability concepts translate directly to practical challenges in computational finance.10\n10 For more information and details you might want to check this source: https://www.hostmerchantservices.com/articles/what-are-transaction-ids/?utm_source=chatgpt.comIn this project, you will:\n\nSimulate a system assigning transaction identifiers.\nInvestigate the probability of identifier collisions under different scenarios.\nDiscuss implications for system design and security.\n\n\n\n1.5.2 Simulate transaction identifiers\n\nWrite a function to simulate transaction identifiers, where each identifier is randomly chosen from a pool of size \\(M\\) (e.g. \\(M = 10^6\\) or \\(M = 10^9\\))\nUsing your function, simulate \\(n\\) transactions and check for duplicates using R’s duplicated() function.\n\n\n\n1.5.3 Compute collision probabilities\n\nSimulate nn transactions multiple times and estimate the collision probability as the fraction of simulations with at least one collision.\nUse this function to compute the collision probability for \\(n = 10^3, n = 10^6, n = 10^9\\) and \\(M = 10^6, M = 10^9\\)\n\n\n\n1.5.4 Visualize the results\nPlot the collision probability as a function of \\(n\\) for different values of \\(M\\). We did not cover Rs plotting functions in the lecture so far. We only showed some examples which we did not explain. But we explained how you could research R’s help system and how you could ask an LLM for help. With any of these resources you should be able to come up with some reasonable visualization.\n\n\n1.5.5 Investigate the system design\n\nReflect on how the size of the pool \\(M\\) influences the collision risk.\nWhat happens when the transaction volume \\(n\\) increases significantly?\n\n\n\n1.5.6 Financial implications\n\nImagine a financial institution processing transactions with \\(M=10^6\\) identifiers.\nIf the daily transaction volume grows to \\(n=10^5\\), what is the risk of a collision?\nDiscuss potential consequences of a collision (e.g., failed transactions, fraud risks) and propose ways to mitigate these risks (e.g., increasing \\(M\\)).\n\n\n\n\n\nDiaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about Chance. Princeton University Press.\n\n\nHealy, Kirean. 2019. Data Visualization: A Practical Introduction. Princeton University Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://r4ds.had.co.nz/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First probability ideas and first steps in R</span>"
    ]
  },
  {
    "objectID": "06-references.html",
    "href": "06-references.html",
    "title": "2  References",
    "section": "",
    "text": "Diaconis, Persi, and Brian Skyrms. 2019. 10 Great Ideas about\nChance. Princeton University Press.\n\n\nFeller, William. 1968. An Introduction to Probability Theory and Its\nApplications. 3rd ed. Vol. 1. Wiley.\n\n\nGrolemund, Garrett. 2014. Hands on Programming with\nR. O’Reilly. https://rstudio-education.github.io/hopr/.\n\n\nHealy, Kirean. 2019. Data Visualization: A Practical\nIntroduction. Princeton University Press.\n\n\nLuenberger, David. 2009. Investment Science. Oxford University\nPress.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data\nScience. O’Reilly. https://r4ds.had.co.nz/.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>References</span>"
    ]
  }
]